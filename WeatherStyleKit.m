//
//  WeatherStyleKit.m
//  WeatherApp
//
//  Created by RyanRosello on 4/7/16.
//  Copyright (c) 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "WeatherStyleKit.h"


@implementation WeatherStyleKit

#pragma mark Cache

static UIImage* _imageOfCanvas1 = nil;
static UIImage* _imageOfCanvas4 = nil;
static UIImage* _imageOfCanvas6 = nil;
static UIImage* _imageOfCanvas7 = nil;
static UIImage* _imageOfCanvas8 = nil;
static UIImage* _imageOfCanvas9 = nil;
static UIImage* _imageOfCanvas10 = nil;
static UIImage* _imageOfCanvas11 = nil;
static UIImage* _imageOfCanvas13 = nil;
static UIImage* _imageOfCanvas18 = nil;
static UIImage* _imageOfCanvas20 = nil;
static UIImage* _imageOfCanvas21 = nil;
static UIImage* _imageOfCanvas22 = nil;
static UIImage* _imageOfCanvas23 = nil;
static UIImage* _imageOfCanvas24 = nil;
static UIImage* _imageOfCanvas25 = nil;
static UIImage* _imageOfCanvas26 = nil;
static UIImage* _imageOfCanvas27 = nil;
static UIImage* _imageOfCanvas28 = nil;
static UIImage* _imageOfCanvas29 = nil;
static UIImage* _imageOfCanvas30 = nil;
static UIImage* _imageOfCanvas31 = nil;
static UIImage* _imageOfCanvas32 = nil;
static UIImage* _imageOfCanvas33 = nil;
static UIImage* _imageOfCanvas34 = nil;
static UIImage* _imageOfCanvas35 = nil;
static UIImage* _imageOfCanvas36 = nil;
static UIImage* _imageOfCanvas37 = nil;
static UIImage* _imageOfCanvas38 = nil;
static UIImage* _imageOfCanvas39 = nil;
static UIImage* _imageOfCanvas40 = nil;
static UIImage* _imageOfCanvas42 = nil;
static UIImage* _imageOfCanvas43 = nil;
static UIImage* _imageOfCanvas77 = nil;
static UIImage* _imageOfCanvas79 = nil;
static UIImage* _imageOfCanvas80 = nil;
static UIImage* _imageOfCanvas81 = nil;
static UIImage* _imageOfCanvas82 = nil;
static UIImage* _imageOfCanvas83 = nil;
static UIImage* _imageOfCanvas78 = nil;
static UIImage* _imageOfCanvas2 = nil;
static UIImage* _imageOfCanvas3 = nil;
static UIImage* _imageOfCanvas41 = nil;
static UIImage* _imageOfCanvas44 = nil;
static UIImage* _imageOfCanvas45 = nil;
static UIImage* _imageOfCanvas46 = nil;
static UIImage* _imageOfCanvas47 = nil;
static UIImage* _imageOfCanvas48 = nil;
static UIImage* _imageOfCanvas49 = nil;
static UIImage* _imageOfCanvas50 = nil;
static UIImage* _imageOfCanvas51 = nil;
static UIImage* _imageOfCanvas52 = nil;
static UIImage* _imageOfCanvas53 = nil;
static UIImage* _imageOfCanvas54 = nil;
static UIImage* _imageOfCanvas55 = nil;
static UIImage* _imageOfCanvas56 = nil;
static UIImage* _imageOfCanvas57 = nil;
static UIImage* _imageOfCanvas58 = nil;
static UIImage* _imageOfCanvas59 = nil;
static UIImage* _imageOfCanvas60 = nil;
static UIImage* _imageOfCanvas61 = nil;
static UIImage* _imageOfCanvas62 = nil;
static UIImage* _imageOfCanvas63 = nil;
static UIImage* _imageOfCanvas64 = nil;
static UIImage* _imageOfCanvas65 = nil;
static UIImage* _imageOfCanvas67 = nil;
static UIImage* _imageOfCanvas68 = nil;
static UIImage* _imageOfCanvas69 = nil;
static UIImage* _imageOfCanvas70 = nil;
static UIImage* _imageOfCanvas71 = nil;
static UIImage* _imageOfCanvas72 = nil;
static UIImage* _imageOfCanvas73 = nil;
static UIImage* _imageOfCanvas74 = nil;
static UIImage* _imageOfCanvas75 = nil;

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawCanvas1
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color17 = [UIColor colorWithRed: 0.333 green: 0.333 blue: 0.333 alpha: 0.86];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 7
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 110.29, 36);
        CGContextRotateCTM(context, 1.37 * M_PI / 180);

        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 69 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 80.69, 5.52);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval69Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.49, 22.74)];
        [color3 setFill];
        [oval69Path fill];

        ////// Oval 69 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval69Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval69Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval69Path.lineWidth = 1;
        [oval69Path stroke];

        CGContextRestoreGState(context);


        //// Oval 70 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 41.53, 5.14);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval70Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.54, 20.33)];
        [color3 setFill];
        [oval70Path fill];

        ////// Oval 70 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval70Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval70Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval70Path.lineWidth = 1;
        [oval70Path stroke];

        CGContextRestoreGState(context);


        //// Oval 71 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 0, 19.05);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval71Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.02, 21.54)];
        [color3 setFill];
        [oval71Path fill];

        ////// Oval 71 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval71Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval71Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval71Path.lineWidth = 1;
        [oval71Path stroke];

        CGContextRestoreGState(context);


        //// Oval 78 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 95.44, 9);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval78Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.32, 21.41)];
        [color3 setFill];
        [oval78Path fill];

        ////// Oval 78 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval78Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval78Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval78Path.lineWidth = 1;
        [oval78Path stroke];

        CGContextRestoreGState(context);


        //// Oval 107 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 101.69, 18.84);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval107Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.01, 20.32)];
        [color3 setFill];
        [oval107Path fill];

        ////// Oval 107 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval107Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval107Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval107Path.lineWidth = 1;
        [oval107Path stroke];

        CGContextRestoreGState(context);


        //// Oval 108 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 17.95, 8.52);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval108Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.62, 17.99)];
        [color3 setFill];
        [oval108Path fill];

        ////// Oval 108 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval108Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval108Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval108Path.lineWidth = 1;
        [oval108Path stroke];

        CGContextRestoreGState(context);


        //// Oval 72 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 20.71, 20.42);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval72Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.54, 20.33)];
        [color3 setFill];
        [oval72Path fill];

        ////// Oval 72 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval72Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval72Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval72Path.lineWidth = 1;
        [oval72Path stroke];

        CGContextRestoreGState(context);


        //// Oval 68 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 61.32, 3.09);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval68Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.06, 20.37)];
        [color3 setFill];
        [oval68Path fill];

        ////// Oval 68 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval68Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval68Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval68Path.lineWidth = 1;
        [oval68Path stroke];

        CGContextRestoreGState(context);


        //// Oval 73 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 42.61, 22.53);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval73Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.16, 18.1)];
        [color3 setFill];
        [oval73Path fill];

        ////// Oval 73 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval73Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval73Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval73Path.lineWidth = 1;
        [oval73Path stroke];

        CGContextRestoreGState(context);


        //// Oval 74 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 55.53, 17.48);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval74Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 33.37, 23.69)];
        [color3 setFill];
        [oval74Path fill];

        ////// Oval 74 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval74Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval74Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval74Path.lineWidth = 1;
        [oval74Path stroke];

        CGContextRestoreGState(context);


        //// Oval 75 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 78.39, 20.48);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval75Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.54, 20.33)];
        [color3 setFill];
        [oval75Path fill];

        ////// Oval 75 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval75Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval75Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval75Path.lineWidth = 1;
        [oval75Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Group 8
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 123.75, 158.5);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 95 Drawing
        UIBezierPath* oval95Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(45.25, -10, 31, 24)];
        [color3 setFill];
        [oval95Path fill];

        ////// Oval 95 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval95Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval95Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval95Path.lineWidth = 1;
        [oval95Path stroke];


        //// Oval 96 Drawing
        UIBezierPath* oval96Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(24.39, -6.04, 26, 23)];
        [color3 setFill];
        [oval96Path fill];

        ////// Oval 96 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval96Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval96Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval96Path.lineWidth = 1;
        [oval96Path stroke];


        //// Oval 35 Drawing
        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-112.27, -3.92, 27, 20.34)];
        [color3 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];


        //// Oval 104 Drawing
        UIBezierPath* oval104Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-115.82, 9.21, 26, 19.34)];
        [color3 setFill];
        [oval104Path fill];

        ////// Oval 104 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval104Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval104Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval104Path.lineWidth = 1;
        [oval104Path stroke];


        //// Oval 105 Drawing
        UIBezierPath* oval105Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-98.81, -4.04, 29, 26)];
        [color3 setFill];
        [oval105Path fill];

        ////// Oval 105 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval105Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval105Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval105Path.lineWidth = 1;
        [oval105Path stroke];


        //// Oval 138 Drawing
        UIBezierPath* oval138Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-83.68, -10.97, 28, 22)];
        [color3 setFill];
        [oval138Path fill];

        ////// Oval 138 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval138Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval138Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval138Path.lineWidth = 1;
        [oval138Path stroke];


        //// Oval 97 Drawing
        UIBezierPath* oval97Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-13.25, -2.5, 23, 19)];
        [color3 setFill];
        [oval97Path fill];

        ////// Oval 97 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval97Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval97Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval97Path.lineWidth = 1;
        [oval97Path stroke];


        //// Oval 86 Drawing
        UIBezierPath* oval86Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(69.75, -3.5, 31, 26)];
        [color3 setFill];
        [oval86Path fill];

        ////// Oval 86 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval86Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval86Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval86Path.lineWidth = 1;
        [oval86Path stroke];


        //// Oval 87 Drawing
        UIBezierPath* oval87Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(58.25, 5, 26, 19)];
        [color3 setFill];
        [oval87Path fill];

        ////// Oval 87 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval87Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval87Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval87Path.lineWidth = 1;
        [oval87Path stroke];


        //// Oval 88 Drawing
        UIBezierPath* oval88Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(40.82, -0.04, 30, 24)];
        [color3 setFill];
        [oval88Path fill];

        ////// Oval 88 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval88Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval88Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval88Path.lineWidth = 1;
        [oval88Path stroke];


        //// Oval 90 Drawing
        UIBezierPath* oval90Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.75, 3, 33, 21)];
        [color3 setFill];
        [oval90Path fill];

        ////// Oval 90 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval90Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval90Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval90Path.lineWidth = 1;
        [oval90Path stroke];


        //// Oval 91 Drawing
        UIBezierPath* oval91Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-16.75, 10, 30, 19)];
        [color3 setFill];
        [oval91Path fill];

        ////// Oval 91 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval91Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval91Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval91Path.lineWidth = 1;
        [oval91Path stroke];


        //// Oval 92 Drawing
        UIBezierPath* oval92Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-30.25, 2.5, 24, 20)];
        [color3 setFill];
        [oval92Path fill];

        ////// Oval 92 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval92Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval92Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval92Path.lineWidth = 1;
        [oval92Path stroke];


        //// Oval 93 Drawing
        UIBezierPath* oval93Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-60.25, 5, 28, 24)];
        [color3 setFill];
        [oval93Path fill];

        ////// Oval 93 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval93Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval93Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval93Path.lineWidth = 1;
        [oval93Path stroke];


        //// Oval 94 Drawing
        UIBezierPath* oval94Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-41.25, 9, 24, 22)];
        [color3 setFill];
        [oval94Path fill];

        ////// Oval 94 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval94Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval94Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval94Path.lineWidth = 1;
        [oval94Path stroke];


        //// Oval 99 Drawing
        UIBezierPath* oval99Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-40.75, -6, 22, 20)];
        [color3 setFill];
        [oval99Path fill];

        ////// Oval 99 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval99Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval99Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval99Path.lineWidth = 1;
        [oval99Path stroke];


        //// Oval 100 Drawing
        UIBezierPath* oval100Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-62.25, -15, 32, 25)];
        [color3 setFill];
        [oval100Path fill];

        ////// Oval 100 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval100Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval100Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval100Path.lineWidth = 1;
        [oval100Path stroke];


        //// Oval 102 Drawing
        UIBezierPath* oval102Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-68.75, -3.5, 28, 21)];
        [color3 setFill];
        [oval102Path fill];

        ////// Oval 102 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval102Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval102Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval102Path.lineWidth = 1;
        [oval102Path stroke];


        //// Oval 103 Drawing
        UIBezierPath* oval103Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-83.25, 5.5, 27, 23)];
        [color3 setFill];
        [oval103Path fill];

        ////// Oval 103 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval103Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval103Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval103Path.lineWidth = 1;
        [oval103Path stroke];


        //// Oval 89 Drawing
        UIBezierPath* oval89Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(25.25, 7, 25, 20)];
        [color3 setFill];
        [oval89Path fill];

        ////// Oval 89 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval89Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval89Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval89Path.lineWidth = 1;
        [oval89Path stroke];


        //// Oval 139 Drawing
        UIBezierPath* oval139Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-99.75, 10.76, 26, 19.34)];
        [color3 setFill];
        [oval139Path fill];

        ////// Oval 139 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval139Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval139Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval139Path.lineWidth = 1;
        [oval139Path stroke];


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Group 9
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 14 Drawing
        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(367.5, 65.5, 31, 21)];
        [color3 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];


        //// Oval 109 Drawing
        UIBezierPath* oval109Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(371, 77, 27, 22)];
        [color3 setFill];
        [oval109Path fill];

        ////// Oval 109 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval109Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval109Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval109Path.lineWidth = 1;
        [oval109Path stroke];


        //// Oval 110 Drawing
        UIBezierPath* oval110Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(385.5, 76.5, 29, 21)];
        [color3 setFill];
        [oval110Path fill];

        ////// Oval 110 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval110Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval110Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval110Path.lineWidth = 1;
        [oval110Path stroke];


        //// Oval 112 Drawing
        UIBezierPath* oval112Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(347, 68.5, 26, 21)];
        [color3 setFill];
        [oval112Path fill];

        ////// Oval 112 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval112Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval112Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval112Path.lineWidth = 1;
        [oval112Path stroke];


        //// Oval 113 Drawing
        UIBezierPath* oval113Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(322, 79, 29, 21)];
        [color3 setFill];
        [oval113Path fill];

        ////// Oval 113 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval113Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval113Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval113Path.lineWidth = 1;
        [oval113Path stroke];


        //// Oval 114 Drawing
        UIBezierPath* oval114Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(331.5, 76.5, 30, 22)];
        [color3 setFill];
        [oval114Path fill];

        ////// Oval 114 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval114Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval114Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval114Path.lineWidth = 1;
        [oval114Path stroke];


        //// Oval 115 Drawing
        UIBezierPath* oval115Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(350.5, 75, 31, 21)];
        [color3 setFill];
        [oval115Path fill];

        ////// Oval 115 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval115Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval115Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval115Path.lineWidth = 1;
        [oval115Path stroke];


        //// Oval 116 Drawing
        UIBezierPath* oval116Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(398, 75, 30, 24)];
        [color3 setFill];
        [oval116Path fill];

        ////// Oval 116 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval116Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval116Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval116Path.lineWidth = 1;
        [oval116Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 10
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 118 Drawing
        UIBezierPath* oval118Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(366, 54, 25, 24)];
        [color3 setFill];
        [oval118Path fill];

        ////// Oval 118 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval118Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval118Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval118Path.lineWidth = 1;
        [oval118Path stroke];


        //// Oval 119 Drawing
        UIBezierPath* oval119Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(384.5, 44.5, 26, 24)];
        [color3 setFill];
        [oval119Path fill];

        ////// Oval 119 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval119Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval119Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval119Path.lineWidth = 1;
        [oval119Path stroke];


        //// Oval 120 Drawing
        UIBezierPath* oval120Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(366, 43, 25, 21)];
        [color3 setFill];
        [oval120Path fill];

        ////// Oval 120 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval120Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval120Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval120Path.lineWidth = 1;
        [oval120Path stroke];


        //// Oval 121 Drawing
        UIBezierPath* oval121Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(341, 46.5, 28, 22)];
        [color3 setFill];
        [oval121Path fill];

        ////// Oval 121 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval121Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval121Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval121Path.lineWidth = 1;
        [oval121Path stroke];


        //// Oval 123 Drawing
        UIBezierPath* oval123Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(325.5, 53.5, 28, 24)];
        [color3 setFill];
        [oval123Path fill];

        ////// Oval 123 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval123Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval123Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval123Path.lineWidth = 1;
        [oval123Path stroke];


        //// Oval 124 Drawing
        UIBezierPath* oval124Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(344.5, 53, 30, 23)];
        [color3 setFill];
        [oval124Path fill];

        ////// Oval 124 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval124Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval124Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval124Path.lineWidth = 1;
        [oval124Path stroke];


        //// Oval 125 Drawing
        UIBezierPath* oval125Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(391, 53, 28, 25)];
        [color3 setFill];
        [oval125Path fill];

        ////// Oval 125 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval125Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval125Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval125Path.lineWidth = 1;
        [oval125Path stroke];


        //// Oval 126 Drawing
        UIBezierPath* oval126Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(374.5, 48.5, 28, 22)];
        [color3 setFill];
        [oval126Path fill];

        ////// Oval 126 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval126Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval126Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval126Path.lineWidth = 1;
        [oval126Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 63.75, 95.75);
        CGContextRotateCTM(context, 3.39 * M_PI / 180);

        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 32 Drawing
        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6.75, -18.25, 35, 24)];
        [color17 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];


        //// Oval 34 Drawing
        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-48.25, -9.75, 30, 20)];
        [color17 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];


        //// Oval 37 Drawing
        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-76.25, -7.25, 30, 20)];
        [color17 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];


        //// Oval 21 Drawing
        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(75.25, -7.25, 38, 24)];
        [color17 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];


        //// Oval 22 Drawing
        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(64.75, -1.75, 31, 20)];
        [color17 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];


        //// Oval 23 Drawing
        UIBezierPath* oval23Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(43.25, -4.75, 34, 22)];
        [color17 setFill];
        [oval23Path fill];

        ////// Oval 23 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval23Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval23Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval23Path.lineWidth = 1;
        [oval23Path stroke];


        //// Oval 24 Drawing
        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(26.75, 1.25, 32, 20)];
        [color17 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];


        //// Oval 25 Drawing
        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(3.25, -3.75, 36, 22)];
        [color17 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];


        //// Oval 26 Drawing
        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-19.25, 1.25, 37, 24)];
        [color17 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];


        //// Oval 27 Drawing
        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-36.75, -4.25, 31, 21)];
        [color17 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];


        //// Oval 28 Drawing
        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-69.75, -1.75, 37, 26)];
        [color17 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];


        //// Oval 29 Drawing
        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-48.25, 3.25, 30, 21)];
        [color17 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];


        //// Oval 30 Drawing
        UIBezierPath* oval30Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(47.75, -13.75, 38, 24)];
        [color17 setFill];
        [oval30Path fill];

        ////// Oval 30 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval30Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval30Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval30Path.lineWidth = 1;
        [oval30Path stroke];


        //// Oval 31 Drawing
        UIBezierPath* oval31Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(19.75, -13.75, 39, 24)];
        [color17 setFill];
        [oval31Path fill];

        ////// Oval 31 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval31Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval31Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval31Path.lineWidth = 1;
        [oval31Path stroke];


        //// Oval 33 Drawing
        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-24.75, -8.25, 28, 21)];
        [color17 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 15 Drawing
        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(366.5, 140.5, 32, 26)];
        [color3 setFill];
        [oval15Path fill];

        ////// Oval 15 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval15Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval15Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];


        //// Oval 13 Drawing
        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(344.5, 137.5, 32, 21)];
        [color3 setFill];
        [oval13Path fill];

        ////// Oval 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(327.5, 140.5, 29, 26)];
        [color3 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(301, 146, 33.5, 24)];
        [color3 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(277, 145, 29, 26)];
        [color3 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(252.5, 152.5, 31, 27)];
        [color3 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(268, 161, 25, 21)];
        [color3 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(283.5, 159, 28, 25)];
        [color3 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(300, 164, 25, 20)];
        [color3 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(317.5, 161, 33, 24)];
        [color3 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(356.5, 147.5, 33, 22)];
        [color3 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(356.5, 162, 33.5, 22)];
        [color3 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(388, 149.5, 28, 22)];
        [color3 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];


        //// Oval 18 Drawing
        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(405.5, 162.5, 25, 24)];
        [color3 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(334, 159, 32, 25)];
        [color3 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(379.5, 157, 32, 27)];
        [color3 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas4
{
    //// Color Declarations
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* shadow2Color = [UIColor colorWithRed: 1 green: 0.799 blue: 0.229 alpha: 1];

    //// Star 15 Drawing
    UIBezierPath* star15Path = [UIBezierPath bezierPath];
    [star15Path moveToPoint: CGPointMake(282.5, 11.5)];
    [star15Path addLineToPoint: CGPointMake(286.03, 16.65)];
    [star15Path addLineToPoint: CGPointMake(292.01, 18.41)];
    [star15Path addLineToPoint: CGPointMake(288.21, 23.35)];
    [star15Path addLineToPoint: CGPointMake(288.38, 29.59)];
    [star15Path addLineToPoint: CGPointMake(282.5, 27.5)];
    [star15Path addLineToPoint: CGPointMake(276.62, 29.59)];
    [star15Path addLineToPoint: CGPointMake(276.79, 23.35)];
    [star15Path addLineToPoint: CGPointMake(272.99, 18.41)];
    [star15Path addLineToPoint: CGPointMake(278.97, 16.65)];
    [star15Path closePath];
    [color11 setFill];
    [star15Path fill];
    [shadow2Color setStroke];
    star15Path.lineWidth = 1;
    [star15Path stroke];


    //// Bezier 8 Drawing
    UIBezierPath* bezier8Path = [UIBezierPath bezierPath];
    [UIColor.blackColor setStroke];
    bezier8Path.lineWidth = 1;
    [bezier8Path stroke];


    //// Star 5 Drawing
    UIBezierPath* star5Path = [UIBezierPath bezierPath];
    [star5Path moveToPoint: CGPointMake(203, 20)];
    [star5Path addLineToPoint: CGPointMake(207.58, 26.69)];
    [star5Path addLineToPoint: CGPointMake(215.36, 28.98)];
    [star5Path addLineToPoint: CGPointMake(210.42, 35.41)];
    [star5Path addLineToPoint: CGPointMake(210.64, 43.52)];
    [star5Path addLineToPoint: CGPointMake(203, 40.8)];
    [star5Path addLineToPoint: CGPointMake(195.36, 43.52)];
    [star5Path addLineToPoint: CGPointMake(195.58, 35.41)];
    [star5Path addLineToPoint: CGPointMake(190.64, 28.98)];
    [star5Path addLineToPoint: CGPointMake(198.42, 26.69)];
    [star5Path closePath];
    [color11 setFill];
    [star5Path fill];
    [shadow2Color setStroke];
    star5Path.lineWidth = 1;
    [star5Path stroke];


    //// Group 2
    {
        //// Star 18 Drawing
        UIBezierPath* star18Path = [UIBezierPath bezierPath];
        [star18Path moveToPoint: CGPointMake(364.5, 72.5)];
        [star18Path addLineToPoint: CGPointMake(367.32, 76.62)];
        [star18Path addLineToPoint: CGPointMake(372.11, 78.03)];
        [star18Path addLineToPoint: CGPointMake(369.07, 81.98)];
        [star18Path addLineToPoint: CGPointMake(369.2, 86.97)];
        [star18Path addLineToPoint: CGPointMake(364.5, 85.3)];
        [star18Path addLineToPoint: CGPointMake(359.8, 86.97)];
        [star18Path addLineToPoint: CGPointMake(359.93, 81.98)];
        [star18Path addLineToPoint: CGPointMake(356.89, 78.03)];
        [star18Path addLineToPoint: CGPointMake(361.68, 76.62)];
        [star18Path closePath];
        [color11 setFill];
        [star18Path fill];
        [shadow2Color setStroke];
        star18Path.lineWidth = 1;
        [star18Path stroke];


        //// Star 12 Drawing
        UIBezierPath* star12Path = [UIBezierPath bezierPath];
        [star12Path moveToPoint: CGPointMake(344.5, 9.5)];
        [star12Path addLineToPoint: CGPointMake(347.67, 14.13)];
        [star12Path addLineToPoint: CGPointMake(353.06, 15.72)];
        [star12Path addLineToPoint: CGPointMake(349.64, 20.17)];
        [star12Path addLineToPoint: CGPointMake(349.79, 25.78)];
        [star12Path addLineToPoint: CGPointMake(344.5, 23.9)];
        [star12Path addLineToPoint: CGPointMake(339.21, 25.78)];
        [star12Path addLineToPoint: CGPointMake(339.36, 20.17)];
        [star12Path addLineToPoint: CGPointMake(335.94, 15.72)];
        [star12Path addLineToPoint: CGPointMake(341.33, 14.13)];
        [star12Path closePath];
        [color11 setFill];
        [star12Path fill];
        [shadow2Color setStroke];
        star12Path.lineWidth = 1;
        [star12Path stroke];


        //// Star 16 Drawing
        UIBezierPath* star16Path = [UIBezierPath bezierPath];
        [star16Path moveToPoint: CGPointMake(400, 11)];
        [star16Path addLineToPoint: CGPointMake(402.82, 15.12)];
        [star16Path addLineToPoint: CGPointMake(407.61, 16.53)];
        [star16Path addLineToPoint: CGPointMake(404.57, 20.48)];
        [star16Path addLineToPoint: CGPointMake(404.7, 25.47)];
        [star16Path addLineToPoint: CGPointMake(400, 23.8)];
        [star16Path addLineToPoint: CGPointMake(395.3, 25.47)];
        [star16Path addLineToPoint: CGPointMake(395.43, 20.48)];
        [star16Path addLineToPoint: CGPointMake(392.39, 16.53)];
        [star16Path addLineToPoint: CGPointMake(397.18, 15.12)];
        [star16Path closePath];
        [color11 setFill];
        [star16Path fill];
        [shadow2Color setStroke];
        star16Path.lineWidth = 1;
        [star16Path stroke];


        //// Star 19 Drawing
        UIBezierPath* star19Path = [UIBezierPath bezierPath];
        [star19Path moveToPoint: CGPointMake(378.5, 42.5)];
        [star19Path addLineToPoint: CGPointMake(380.26, 45.07)];
        [star19Path addLineToPoint: CGPointMake(383.26, 45.95)];
        [star19Path addLineToPoint: CGPointMake(381.35, 48.43)];
        [star19Path addLineToPoint: CGPointMake(381.44, 51.55)];
        [star19Path addLineToPoint: CGPointMake(378.5, 50.5)];
        [star19Path addLineToPoint: CGPointMake(375.56, 51.55)];
        [star19Path addLineToPoint: CGPointMake(375.65, 48.43)];
        [star19Path addLineToPoint: CGPointMake(373.74, 45.95)];
        [star19Path addLineToPoint: CGPointMake(376.74, 45.07)];
        [star19Path closePath];
        [color11 setFill];
        [star19Path fill];
        [shadow2Color setStroke];
        star19Path.lineWidth = 1;
        [star19Path stroke];


        //// Star 20 Drawing
        UIBezierPath* star20Path = [UIBezierPath bezierPath];
        [star20Path moveToPoint: CGPointMake(400, 100)];
        [star20Path addLineToPoint: CGPointMake(404.94, 107.2)];
        [star20Path addLineToPoint: CGPointMake(413.31, 109.67)];
        [star20Path addLineToPoint: CGPointMake(407.99, 116.6)];
        [star20Path addLineToPoint: CGPointMake(408.23, 125.33)];
        [star20Path addLineToPoint: CGPointMake(400, 122.4)];
        [star20Path addLineToPoint: CGPointMake(391.77, 125.33)];
        [star20Path addLineToPoint: CGPointMake(392.01, 116.6)];
        [star20Path addLineToPoint: CGPointMake(386.69, 109.67)];
        [star20Path addLineToPoint: CGPointMake(395.06, 107.2)];
        [star20Path closePath];
        [color11 setFill];
        [star20Path fill];
        [shadow2Color setStroke];
        star20Path.lineWidth = 1;
        [star20Path stroke];


        //// Star 13 Drawing
        UIBezierPath* star13Path = [UIBezierPath bezierPath];
        [star13Path moveToPoint: CGPointMake(348.5, 150.5)];
        [star13Path addLineToPoint: CGPointMake(352.73, 156.68)];
        [star13Path addLineToPoint: CGPointMake(359.91, 158.79)];
        [star13Path addLineToPoint: CGPointMake(355.35, 164.72)];
        [star13Path addLineToPoint: CGPointMake(355.55, 172.21)];
        [star13Path addLineToPoint: CGPointMake(348.5, 169.7)];
        [star13Path addLineToPoint: CGPointMake(341.45, 172.21)];
        [star13Path addLineToPoint: CGPointMake(341.65, 164.72)];
        [star13Path addLineToPoint: CGPointMake(337.09, 158.79)];
        [star13Path addLineToPoint: CGPointMake(344.27, 156.68)];
        [star13Path closePath];
        [color11 setFill];
        [star13Path fill];
        [shadow2Color setStroke];
        star13Path.lineWidth = 1;
        [star13Path stroke];


        //// Star 23 Drawing
        UIBezierPath* star23Path = [UIBezierPath bezierPath];
        [star23Path moveToPoint: CGPointMake(297.5, 67)];
        [star23Path addLineToPoint: CGPointMake(299.26, 69.57)];
        [star23Path addLineToPoint: CGPointMake(302.26, 70.45)];
        [star23Path addLineToPoint: CGPointMake(300.35, 72.93)];
        [star23Path addLineToPoint: CGPointMake(300.44, 76.05)];
        [star23Path addLineToPoint: CGPointMake(297.5, 75)];
        [star23Path addLineToPoint: CGPointMake(294.56, 76.05)];
        [star23Path addLineToPoint: CGPointMake(294.65, 72.93)];
        [star23Path addLineToPoint: CGPointMake(292.74, 70.45)];
        [star23Path addLineToPoint: CGPointMake(295.74, 69.57)];
        [star23Path closePath];
        [color11 setFill];
        [star23Path fill];
        [shadow2Color setStroke];
        star23Path.lineWidth = 1;
        [star23Path stroke];
    }


    //// Group
    {
        //// Star Drawing
        UIBezierPath* starPath = [UIBezierPath bezierPath];
        [starPath moveToPoint: CGPointMake(44.5, 60.5)];
        [starPath addLineToPoint: CGPointMake(47.32, 64.62)];
        [starPath addLineToPoint: CGPointMake(52.11, 66.03)];
        [starPath addLineToPoint: CGPointMake(49.07, 69.98)];
        [starPath addLineToPoint: CGPointMake(49.2, 74.97)];
        [starPath addLineToPoint: CGPointMake(44.5, 73.3)];
        [starPath addLineToPoint: CGPointMake(39.8, 74.97)];
        [starPath addLineToPoint: CGPointMake(39.93, 69.98)];
        [starPath addLineToPoint: CGPointMake(36.89, 66.03)];
        [starPath addLineToPoint: CGPointMake(41.68, 64.62)];
        [starPath closePath];
        [color11 setFill];
        [starPath fill];
        [shadow2Color setStroke];
        starPath.lineWidth = 1;
        [starPath stroke];


        //// Star 2 Drawing
        UIBezierPath* star2Path = [UIBezierPath bezierPath];
        [star2Path moveToPoint: CGPointMake(106, 58)];
        [star2Path addLineToPoint: CGPointMake(108.47, 61.6)];
        [star2Path addLineToPoint: CGPointMake(112.66, 62.84)];
        [star2Path addLineToPoint: CGPointMake(109.99, 66.3)];
        [star2Path addLineToPoint: CGPointMake(110.11, 70.66)];
        [star2Path addLineToPoint: CGPointMake(106, 69.2)];
        [star2Path addLineToPoint: CGPointMake(101.89, 70.66)];
        [star2Path addLineToPoint: CGPointMake(102.01, 66.3)];
        [star2Path addLineToPoint: CGPointMake(99.34, 62.84)];
        [star2Path addLineToPoint: CGPointMake(103.53, 61.6)];
        [star2Path closePath];
        [color11 setFill];
        [star2Path fill];
        [shadow2Color setStroke];
        star2Path.lineWidth = 1;
        [star2Path stroke];


        //// Star 3 Drawing
        UIBezierPath* star3Path = [UIBezierPath bezierPath];
        [star3Path moveToPoint: CGPointMake(108, 14)];
        [star3Path addLineToPoint: CGPointMake(111.17, 18.63)];
        [star3Path addLineToPoint: CGPointMake(116.56, 20.22)];
        [star3Path addLineToPoint: CGPointMake(113.14, 24.67)];
        [star3Path addLineToPoint: CGPointMake(113.29, 30.28)];
        [star3Path addLineToPoint: CGPointMake(108, 28.4)];
        [star3Path addLineToPoint: CGPointMake(102.71, 30.28)];
        [star3Path addLineToPoint: CGPointMake(102.86, 24.67)];
        [star3Path addLineToPoint: CGPointMake(99.44, 20.22)];
        [star3Path addLineToPoint: CGPointMake(104.83, 18.63)];
        [star3Path closePath];
        [color11 setFill];
        [star3Path fill];
        [shadow2Color setStroke];
        star3Path.lineWidth = 1;
        [star3Path stroke];


        //// Star 4 Drawing
        UIBezierPath* star4Path = [UIBezierPath bezierPath];
        [star4Path moveToPoint: CGPointMake(147, 20)];
        [star4Path addLineToPoint: CGPointMake(148.76, 22.57)];
        [star4Path addLineToPoint: CGPointMake(151.76, 23.45)];
        [star4Path addLineToPoint: CGPointMake(149.85, 25.93)];
        [star4Path addLineToPoint: CGPointMake(149.94, 29.05)];
        [star4Path addLineToPoint: CGPointMake(147, 28)];
        [star4Path addLineToPoint: CGPointMake(144.06, 29.05)];
        [star4Path addLineToPoint: CGPointMake(144.15, 25.93)];
        [star4Path addLineToPoint: CGPointMake(142.24, 23.45)];
        [star4Path addLineToPoint: CGPointMake(145.24, 22.57)];
        [star4Path closePath];
        [color11 setFill];
        [star4Path fill];
        [shadow2Color setStroke];
        star4Path.lineWidth = 1;
        [star4Path stroke];


        //// Star 6 Drawing
        UIBezierPath* star6Path = [UIBezierPath bezierPath];
        [star6Path moveToPoint: CGPointMake(159.5, 64.5)];
        [star6Path addLineToPoint: CGPointMake(163.38, 70.16)];
        [star6Path addLineToPoint: CGPointMake(169.96, 72.1)];
        [star6Path addLineToPoint: CGPointMake(165.78, 77.54)];
        [star6Path addLineToPoint: CGPointMake(165.97, 84.4)];
        [star6Path addLineToPoint: CGPointMake(159.5, 82.1)];
        [star6Path addLineToPoint: CGPointMake(153.03, 84.4)];
        [star6Path addLineToPoint: CGPointMake(153.22, 77.54)];
        [star6Path addLineToPoint: CGPointMake(149.04, 72.1)];
        [star6Path addLineToPoint: CGPointMake(155.62, 70.16)];
        [star6Path closePath];
        [color11 setFill];
        [star6Path fill];
        [shadow2Color setStroke];
        star6Path.lineWidth = 1;
        [star6Path stroke];


        //// Star 7 Drawing
        UIBezierPath* star7Path = [UIBezierPath bezierPath];
        [star7Path moveToPoint: CGPointMake(106, 99)];
        [star7Path addLineToPoint: CGPointMake(109.17, 103.63)];
        [star7Path addLineToPoint: CGPointMake(114.56, 105.22)];
        [star7Path addLineToPoint: CGPointMake(111.14, 109.67)];
        [star7Path addLineToPoint: CGPointMake(111.29, 115.28)];
        [star7Path addLineToPoint: CGPointMake(106, 113.4)];
        [star7Path addLineToPoint: CGPointMake(100.71, 115.28)];
        [star7Path addLineToPoint: CGPointMake(100.86, 109.67)];
        [star7Path addLineToPoint: CGPointMake(97.44, 105.22)];
        [star7Path addLineToPoint: CGPointMake(102.83, 103.63)];
        [star7Path closePath];
        [color11 setFill];
        [star7Path fill];
        [shadow2Color setStroke];
        star7Path.lineWidth = 1;
        [star7Path stroke];


        //// Star 8 Drawing
        UIBezierPath* star8Path = [UIBezierPath bezierPath];
        [star8Path moveToPoint: CGPointMake(25.5, 6.5)];
        [star8Path addLineToPoint: CGPointMake(28.67, 11.13)];
        [star8Path addLineToPoint: CGPointMake(34.06, 12.72)];
        [star8Path addLineToPoint: CGPointMake(30.64, 17.17)];
        [star8Path addLineToPoint: CGPointMake(30.79, 22.78)];
        [star8Path addLineToPoint: CGPointMake(25.5, 20.9)];
        [star8Path addLineToPoint: CGPointMake(20.21, 22.78)];
        [star8Path addLineToPoint: CGPointMake(20.36, 17.17)];
        [star8Path addLineToPoint: CGPointMake(16.94, 12.72)];
        [star8Path addLineToPoint: CGPointMake(22.33, 11.13)];
        [star8Path closePath];
        [color11 setFill];
        [star8Path fill];
        [shadow2Color setStroke];
        star8Path.lineWidth = 1;
        [star8Path stroke];


        //// Star 9 Drawing
        UIBezierPath* star9Path = [UIBezierPath bezierPath];
        [star9Path moveToPoint: CGPointMake(74.5, 72)];
        [star9Path addLineToPoint: CGPointMake(76.62, 75.09)];
        [star9Path addLineToPoint: CGPointMake(80.21, 76.15)];
        [star9Path addLineToPoint: CGPointMake(77.92, 79.11)];
        [star9Path addLineToPoint: CGPointMake(78.03, 82.85)];
        [star9Path addLineToPoint: CGPointMake(74.5, 81.6)];
        [star9Path addLineToPoint: CGPointMake(70.97, 82.85)];
        [star9Path addLineToPoint: CGPointMake(71.08, 79.11)];
        [star9Path addLineToPoint: CGPointMake(68.79, 76.15)];
        [star9Path addLineToPoint: CGPointMake(72.38, 75.09)];
        [star9Path closePath];
        [color11 setFill];
        [star9Path fill];
        [shadow2Color setStroke];
        star9Path.lineWidth = 1;
        [star9Path stroke];


        //// Star 10 Drawing
        UIBezierPath* star10Path = [UIBezierPath bezierPath];
        [star10Path moveToPoint: CGPointMake(25, 83.5)];
        [star10Path addLineToPoint: CGPointMake(28.17, 88.13)];
        [star10Path addLineToPoint: CGPointMake(33.56, 89.72)];
        [star10Path addLineToPoint: CGPointMake(30.14, 94.17)];
        [star10Path addLineToPoint: CGPointMake(30.29, 99.78)];
        [star10Path addLineToPoint: CGPointMake(25, 97.9)];
        [star10Path addLineToPoint: CGPointMake(19.71, 99.78)];
        [star10Path addLineToPoint: CGPointMake(19.86, 94.17)];
        [star10Path addLineToPoint: CGPointMake(16.44, 89.72)];
        [star10Path addLineToPoint: CGPointMake(21.83, 88.13)];
        [star10Path closePath];
        [color11 setFill];
        [star10Path fill];
        [shadow2Color setStroke];
        star10Path.lineWidth = 1;
        [star10Path stroke];


        //// Star 11 Drawing
        UIBezierPath* star11Path = [UIBezierPath bezierPath];
        [star11Path moveToPoint: CGPointMake(185.5, 133.5)];
        [star11Path addLineToPoint: CGPointMake(189.38, 139.16)];
        [star11Path addLineToPoint: CGPointMake(195.96, 141.1)];
        [star11Path addLineToPoint: CGPointMake(191.78, 146.54)];
        [star11Path addLineToPoint: CGPointMake(191.97, 153.4)];
        [star11Path addLineToPoint: CGPointMake(185.5, 151.1)];
        [star11Path addLineToPoint: CGPointMake(179.03, 153.4)];
        [star11Path addLineToPoint: CGPointMake(179.22, 146.54)];
        [star11Path addLineToPoint: CGPointMake(175.04, 141.1)];
        [star11Path addLineToPoint: CGPointMake(181.62, 139.16)];
        [star11Path closePath];
        [color11 setFill];
        [star11Path fill];
        [shadow2Color setStroke];
        star11Path.lineWidth = 1;
        [star11Path stroke];


        //// Star 14 Drawing
        UIBezierPath* star14Path = [UIBezierPath bezierPath];
        [star14Path moveToPoint: CGPointMake(51.5, 146.5)];
        [star14Path addLineToPoint: CGPointMake(56.08, 153.19)];
        [star14Path addLineToPoint: CGPointMake(63.86, 155.48)];
        [star14Path addLineToPoint: CGPointMake(58.92, 161.91)];
        [star14Path addLineToPoint: CGPointMake(59.14, 170.02)];
        [star14Path addLineToPoint: CGPointMake(51.5, 167.3)];
        [star14Path addLineToPoint: CGPointMake(43.86, 170.02)];
        [star14Path addLineToPoint: CGPointMake(44.08, 161.91)];
        [star14Path addLineToPoint: CGPointMake(39.14, 155.48)];
        [star14Path addLineToPoint: CGPointMake(46.92, 153.19)];
        [star14Path closePath];
        [color11 setFill];
        [star14Path fill];
        [shadow2Color setStroke];
        star14Path.lineWidth = 1;
        [star14Path stroke];


        //// Star 17 Drawing
        UIBezierPath* star17Path = [UIBezierPath bezierPath];
        [star17Path moveToPoint: CGPointMake(83.5, 65.5)];
        [star17Path addLineToPoint: CGPointMake(84.56, 67.04)];
        [star17Path addLineToPoint: CGPointMake(86.35, 67.57)];
        [star17Path addLineToPoint: CGPointMake(85.21, 69.06)];
        [star17Path addLineToPoint: CGPointMake(85.26, 70.93)];
        [star17Path addLineToPoint: CGPointMake(83.5, 70.3)];
        [star17Path addLineToPoint: CGPointMake(81.74, 70.93)];
        [star17Path addLineToPoint: CGPointMake(81.79, 69.06)];
        [star17Path addLineToPoint: CGPointMake(80.65, 67.57)];
        [star17Path addLineToPoint: CGPointMake(82.44, 67.04)];
        [star17Path closePath];
        [color11 setFill];
        [star17Path fill];
        [shadow2Color setStroke];
        star17Path.lineWidth = 1;
        [star17Path stroke];


        //// Star 22 Drawing
        UIBezierPath* star22Path = [UIBezierPath bezierPath];
        [star22Path moveToPoint: CGPointMake(92.5, 59.5)];
        [star22Path addLineToPoint: CGPointMake(93.56, 61.04)];
        [star22Path addLineToPoint: CGPointMake(95.35, 61.57)];
        [star22Path addLineToPoint: CGPointMake(94.21, 63.06)];
        [star22Path addLineToPoint: CGPointMake(94.26, 64.93)];
        [star22Path addLineToPoint: CGPointMake(92.5, 64.3)];
        [star22Path addLineToPoint: CGPointMake(90.74, 64.93)];
        [star22Path addLineToPoint: CGPointMake(90.79, 63.06)];
        [star22Path addLineToPoint: CGPointMake(89.65, 61.57)];
        [star22Path addLineToPoint: CGPointMake(91.44, 61.04)];
        [star22Path closePath];
        [color11 setFill];
        [star22Path fill];
        [shadow2Color setStroke];
        star22Path.lineWidth = 1;
        [star22Path stroke];
    }


    //// Star 21 Drawing
    UIBezierPath* star21Path = [UIBezierPath bezierPath];
    [star21Path moveToPoint: CGPointMake(261, 114)];
    [star21Path addLineToPoint: CGPointMake(264.88, 119.66)];
    [star21Path addLineToPoint: CGPointMake(271.46, 121.6)];
    [star21Path addLineToPoint: CGPointMake(267.28, 127.04)];
    [star21Path addLineToPoint: CGPointMake(267.47, 133.9)];
    [star21Path addLineToPoint: CGPointMake(261, 131.6)];
    [star21Path addLineToPoint: CGPointMake(254.53, 133.9)];
    [star21Path addLineToPoint: CGPointMake(254.72, 127.04)];
    [star21Path addLineToPoint: CGPointMake(250.54, 121.6)];
    [star21Path addLineToPoint: CGPointMake(257.12, 119.66)];
    [star21Path closePath];
    [color11 setFill];
    [star21Path fill];
    [shadow2Color setStroke];
    star21Path.lineWidth = 1;
    [star21Path stroke];


    //// Star 24 Drawing
    UIBezierPath* star24Path = [UIBezierPath bezierPath];
    [star24Path moveToPoint: CGPointMake(221.5, 68.5)];
    [star24Path addLineToPoint: CGPointMake(223.97, 72.1)];
    [star24Path addLineToPoint: CGPointMake(228.16, 73.34)];
    [star24Path addLineToPoint: CGPointMake(225.49, 76.8)];
    [star24Path addLineToPoint: CGPointMake(225.61, 81.16)];
    [star24Path addLineToPoint: CGPointMake(221.5, 79.7)];
    [star24Path addLineToPoint: CGPointMake(217.39, 81.16)];
    [star24Path addLineToPoint: CGPointMake(217.51, 76.8)];
    [star24Path addLineToPoint: CGPointMake(214.84, 73.34)];
    [star24Path addLineToPoint: CGPointMake(219.03, 72.1)];
    [star24Path closePath];
    [color11 setFill];
    [star24Path fill];
    [shadow2Color setStroke];
    star24Path.lineWidth = 1;
    [star24Path stroke];
}

+ (void)drawCanvas6
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 7
    {
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 33 Drawing
        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(49.5, 153.5, 29, 21)];
        [color3 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];


        //// Oval 34 Drawing
        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(31.5, 153.5, 29, 21)];
        [color3 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];


        //// Oval 30 Drawing
        UIBezierPath* oval30Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(83.5, 172.5, 32, 23)];
        [color3 setFill];
        [oval30Path fill];

        ////// Oval 30 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval30Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval30Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval30Path.lineWidth = 1;
        [oval30Path stroke];


        //// Oval 32 Drawing
        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(68.5, 159.5, 32, 23)];
        [color3 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];


        //// Oval 28 Drawing
        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-7.5, 166.5, 30, 19)];
        [color3 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(19.5, 168.5, 30, 19)];
        [color3 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.5, 172.5, 35, 24)];
        [color3 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 42 Drawing
        UIBezierPath* oval42Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6.5, 187.5, 28, 18)];
        [color3 setFill];
        [oval42Path fill];

        ////// Oval 42 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval42Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval42Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval42Path.lineWidth = 1;
        [oval42Path stroke];


        //// Oval 40 Drawing
        UIBezierPath* oval40Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(44.5, 167.5, 29, 21)];
        [color3 setFill];
        [oval40Path fill];

        ////// Oval 40 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval40Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval40Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval40Path.lineWidth = 1;
        [oval40Path stroke];


        //// Oval 36 Drawing
        UIBezierPath* oval36Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(68.5, 174.5, 32, 23)];
        [color3 setFill];
        [oval36Path fill];

        ////// Oval 36 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval36Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval36Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval36Path.lineWidth = 1;
        [oval36Path stroke];


        //// Oval 61 Drawing
        UIBezierPath* oval61Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(31.5, 182.5, 36, 23)];
        [color3 setFill];
        [oval61Path fill];

        ////// Oval 61 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval61Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval61Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval61Path.lineWidth = 1;
        [oval61Path stroke];


        //// Oval 60 Drawing
        UIBezierPath* oval60Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(79.5, 187.5, 30, 19)];
        [color3 setFill];
        [oval60Path fill];

        ////// Oval 60 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval60Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval60Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval60Path.lineWidth = 1;
        [oval60Path stroke];


        //// Oval 48 Drawing
        UIBezierPath* oval48Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(16.5, 185.5, 33, 23)];
        [color3 setFill];
        [oval48Path fill];

        ////// Oval 48 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval48Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval48Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval48Path.lineWidth = 1;
        [oval48Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(51.5, 187.5, 32, 19)];
        [color3 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 29 Drawing
        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(100.5, 187.5, 30, 19)];
        [color3 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 21 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 3.37, 64.92);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.49, 19.73)];
        [color3 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];

        CGContextRestoreGState(context);


        //// Oval 26 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -60.22, 76.01);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.98, 17.4)];
        [color3 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];

        CGContextRestoreGState(context);


        //// Oval 10 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -42.02, 71.51);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.98, 17.4)];
        [color3 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];

        CGContextRestoreGState(context);


        //// Oval 31 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 40.03, 61.84);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval31Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.49, 19.73)];
        [color3 setFill];
        [oval31Path fill];

        ////// Oval 31 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval31Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval31Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval31Path.lineWidth = 1;
        [oval31Path stroke];

        CGContextRestoreGState(context);


        //// Oval 27 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -53.43, 84.48);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.48, 14.61)];
        [color3 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];

        CGContextRestoreGState(context);


        //// Oval 25 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 66.62, 66.21);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.83, 22.38)];
        [color3 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];

        CGContextRestoreGState(context);


        //// Oval 23 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 19.37, 65.42);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval23Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.49, 19.73)];
        [color3 setFill];
        [oval23Path fill];

        ////// Oval 23 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval23Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval23Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval23Path.lineWidth = 1;
        [oval23Path stroke];

        CGContextRestoreGState(context);


        //// Oval 20 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 80.81, 77.69);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.08, 20.95)];
        [color3 setFill];
        [oval20Path fill];

        ////// Oval 20 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval20Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval20Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];

        CGContextRestoreGState(context);


        //// Oval 22 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -15.54, 67.44);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.98, 17.4)];
        [color3 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];

        CGContextRestoreGState(context);


        //// Oval 24 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -24.27, 71.83);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.48, 14.61)];
        [color3 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];

        CGContextRestoreGState(context);


        //// Oval 15 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -32.44, 82.8);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.75, 17.95)];
        [color3 setFill];
        [oval15Path fill];

        ////// Oval 15 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval15Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval15Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];

        CGContextRestoreGState(context);


        //// Oval 16 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -6.76, 76.93);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.39, 23.07)];
        [color3 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];

        CGContextRestoreGState(context);


        //// Oval 17 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 20.28, 80.52);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.1, 20.32)];
        [color3 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];

        CGContextRestoreGState(context);


        //// Oval 19 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 63.42, 78.98);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.39, 23.07)];
        [color3 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];

        CGContextRestoreGState(context);


        //// Oval 18 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 38.8, 77.34);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 33.05, 22.41)];
        [color3 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 77 Drawing
        UIBezierPath* oval77Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(391.5, 43.5, 29, 23)];
        [color10 setFill];
        [oval77Path fill];

        ////// Oval 77 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval77Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval77Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval77Path.lineWidth = 1;
        [oval77Path stroke];


        //// Oval 79 Drawing
        UIBezierPath* oval79Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(371, 41, 27, 21)];
        [color10 setFill];
        [oval79Path fill];

        ////// Oval 79 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval79Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval79Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval79Path.lineWidth = 1;
        [oval79Path stroke];


        //// Oval 80 Drawing
        UIBezierPath* oval80Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(345, 44.5, 28, 22)];
        [color10 setFill];
        [oval80Path fill];

        ////// Oval 80 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval80Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval80Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval80Path.lineWidth = 1;
        [oval80Path stroke];


        //// Oval 81 Drawing
        UIBezierPath* oval81Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(320, 59, 23, 17)];
        [color10 setFill];
        [oval81Path fill];

        ////// Oval 81 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval81Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval81Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval81Path.lineWidth = 1;
        [oval81Path stroke];


        //// Oval 82 Drawing
        UIBezierPath* oval82Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(328.5, 54.5, 28, 20)];
        [color10 setFill];
        [oval82Path fill];

        ////// Oval 82 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval82Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval82Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval82Path.lineWidth = 1;
        [oval82Path stroke];


        //// Oval 84 Drawing
        UIBezierPath* oval84Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(391.5, 53, 36.5, 23)];
        [color10 setFill];
        [oval84Path fill];

        ////// Oval 84 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval84Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval84Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval84Path.lineWidth = 1;
        [oval84Path stroke];


        //// Oval 76 Drawing
        UIBezierPath* oval76Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(363.5, 54, 33.5, 22)];
        [color10 setFill];
        [oval76Path fill];

        ////// Oval 76 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval76Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval76Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval76Path.lineWidth = 1;
        [oval76Path stroke];


        //// Oval 83 Drawing
        UIBezierPath* oval83Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(351.5, 53, 29, 20)];
        [color10 setFill];
        [oval83Path fill];

        ////// Oval 83 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval83Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval83Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval83Path.lineWidth = 1;
        [oval83Path stroke];


        //// Oval 85 Drawing
        UIBezierPath* oval85Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(381.5, 51.5, 28, 20)];
        [color10 setFill];
        [oval85Path fill];

        ////// Oval 85 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval85Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval85Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval85Path.lineWidth = 1;
        [oval85Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 14 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 393.54, 158.64);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 33.56, 24.14)];
        [color10 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];

        CGContextRestoreGState(context);


        //// Oval 13 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 375.04, 164.64);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 33.56, 24.14)];
        [color10 setFill];
        [oval13Path fill];

        ////// Oval 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];

        CGContextRestoreGState(context);


        //// Oval 8 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 390.34, 177.64);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 35.35, 22.41)];
        [color10 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];

        CGContextRestoreGState(context);


        //// Oval 51 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 392.84, 186.64);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval51Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 35.35, 22.41)];
        [color10 setFill];
        [oval51Path fill];

        ////// Oval 51 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval51Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval51Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval51Path.lineWidth = 1;
        [oval51Path stroke];

        CGContextRestoreGState(context);


        //// Oval 12 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 352.27, 166.22);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.97, 19.82)];
        [color10 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];

        CGContextRestoreGState(context);


        //// Oval 4 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 304.24, 180.01);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.4, 21.94)];
        [color10 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];

        CGContextRestoreGState(context);


        //// Oval 11 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 329.6, 172.44);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.4, 17.76)];
        [color10 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];

        CGContextRestoreGState(context);


        //// Oval 6 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 345.55, 179.82);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.31, 23.02)];
        [color10 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];

        CGContextRestoreGState(context);


        //// Oval 7 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 368.45, 181.46);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.69, 21.61)];
        [color10 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];

        CGContextRestoreGState(context);


        //// Oval 5 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 321.51, 180.42);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.32, 22.97)];
        [color10 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 9
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 38 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 261.72, 147.19);
        CGContextRotateCTM(context, 1.66 * M_PI / 180);

        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-16.21, -9.81, 32.43, 19.62)];
        [color10 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];

        CGContextRestoreGState(context);


        //// Oval 9 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 190.64, 125.18);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.24, 17.43)];
        [color10 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];

        CGContextRestoreGState(context);


        //// Oval 117 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 231.29, 130.78);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval117Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.84, 22.92)];
        [color10 setFill];
        [oval117Path fill];

        ////// Oval 117 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval117Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval117Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval117Path.lineWidth = 1;
        [oval117Path stroke];

        CGContextRestoreGState(context);


        //// Oval 119 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128.07, 138.98);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval119Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.03, 19.02)];
        [color10 setFill];
        [oval119Path fill];

        ////// Oval 119 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval119Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval119Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval119Path.lineWidth = 1;
        [oval119Path stroke];

        CGContextRestoreGState(context);


        //// Oval 110 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 211.35, 129.58);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval110Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.05, 19.96)];
        [color10 setFill];
        [oval110Path fill];

        ////// Oval 110 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval110Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval110Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval110Path.lineWidth = 1;
        [oval110Path stroke];

        CGContextRestoreGState(context);


        //// Oval 109 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 176.14, 131.18);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval109Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.24, 17.43)];
        [color10 setFill];
        [oval109Path fill];

        ////// Oval 109 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval109Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval109Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval109Path.lineWidth = 1;
        [oval109Path stroke];

        CGContextRestoreGState(context);


        //// Oval 111 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 153.72, 133.42);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval111Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.92, 19.52)];
        [color10 setFill];
        [oval111Path fill];

        ////// Oval 111 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval111Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval111Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval111Path.lineWidth = 1;
        [oval111Path stroke];

        CGContextRestoreGState(context);


        //// Oval 113 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 145.42, 139.76);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval113Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.92, 21.52)];
        [color10 setFill];
        [oval113Path fill];

        ////// Oval 113 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval113Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval113Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval113Path.lineWidth = 1;
        [oval113Path stroke];

        CGContextRestoreGState(context);


        //// Oval 114 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 171.65, 145.44);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval114Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26, 19.17)];
        [color10 setFill];
        [oval114Path fill];

        ////// Oval 114 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval114Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval114Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval114Path.lineWidth = 1;
        [oval114Path stroke];

        CGContextRestoreGState(context);


        //// Oval 115 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 186.29, 140.12);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval115Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 37.47, 25.06)];
        [color10 setFill];
        [oval115Path fill];

        ////// Oval 115 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval115Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval115Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval115Path.lineWidth = 1;
        [oval115Path stroke];

        CGContextRestoreGState(context);


        //// Oval 116 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 212.07, 143.28);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval116Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.92, 21.52)];
        [color10 setFill];
        [oval116Path fill];

        ////// Oval 116 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval116Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval116Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval116Path.lineWidth = 1;
        [oval116Path stroke];

        CGContextRestoreGState(context);


        //// Oval 118 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 235.85, 140.99);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval118Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.57, 21.62)];
        [color10 setFill];
        [oval118Path fill];

        ////// Oval 118 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval118Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval118Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval118Path.lineWidth = 1;
        [oval118Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas7
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 65 Drawing
        UIBezierPath* oval65Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(89, 83.5, 34, 20.5)];
        [color10 setFill];
        [oval65Path fill];

        ////// Oval 65 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval65Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval65Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval65Path.lineWidth = 1;
        [oval65Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(108.5, 90.5, 34, 26)];
        [color10 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(64.5, 88, 34, 26)];
        [color10 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(44, 91.5, 32, 18)];
        [color10 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(15.5, 94, 30, 17)];
        [color10 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 62 Drawing
        UIBezierPath* oval62Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(64.5, 100.5, 29, 22)];
        [color10 setFill];
        [oval62Path fill];

        ////// Oval 62 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval62Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval62Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval62Path.lineWidth = 1;
        [oval62Path stroke];


        //// Oval 61 Drawing
        UIBezierPath* oval61Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(31.5, 100.5, 32, 17)];
        [color10 setFill];
        [oval61Path fill];

        ////// Oval 61 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval61Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval61Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval61Path.lineWidth = 1;
        [oval61Path stroke];


        //// Oval 35 Drawing
        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(95.5, 96.5, 33, 24)];
        [color10 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];


        //// Oval 60 Drawing
        UIBezierPath* oval60Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(81, 102, 31, 18)];
        [color10 setFill];
        [oval60Path fill];

        ////// Oval 60 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval60Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval60Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval60Path.lineWidth = 1;
        [oval60Path stroke];


        //// Oval 48 Drawing
        UIBezierPath* oval48Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(8.5, 98.5, 29, 21)];
        [color10 setFill];
        [oval48Path fill];

        ////// Oval 48 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval48Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval48Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval48Path.lineWidth = 1;
        [oval48Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(45.5, 100.5, 32, 17)];
        [color10 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 79 Drawing
        UIBezierPath* oval79Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(358, 74, 27, 23)];
        [color10 setFill];
        [oval79Path fill];

        ////// Oval 79 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval79Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval79Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval79Path.lineWidth = 1;
        [oval79Path stroke];


        //// Oval 76 Drawing
        UIBezierPath* oval76Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(358, 86, 36.5, 26)];
        [color10 setFill];
        [oval76Path fill];

        ////// Oval 76 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval76Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval76Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval76Path.lineWidth = 1;
        [oval76Path stroke];


        //// Oval 77 Drawing
        UIBezierPath* oval77Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(376.5, 76.5, 26, 25)];
        [color10 setFill];
        [oval77Path fill];

        ////// Oval 77 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval77Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval77Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval77Path.lineWidth = 1;
        [oval77Path stroke];


        //// Oval 80 Drawing
        UIBezierPath* oval80Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(335, 77.5, 27, 24)];
        [color10 setFill];
        [oval80Path fill];

        ////// Oval 80 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval80Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval80Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval80Path.lineWidth = 1;
        [oval80Path stroke];


        //// Oval 81 Drawing
        UIBezierPath* oval81Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(311, 91, 22, 21)];
        [color10 setFill];
        [oval81Path fill];

        ////// Oval 81 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval81Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval81Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval81Path.lineWidth = 1;
        [oval81Path stroke];


        //// Oval 82 Drawing
        UIBezierPath* oval82Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(319.5, 85.5, 27, 25)];
        [color10 setFill];
        [oval82Path fill];

        ////// Oval 82 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval82Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval82Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval82Path.lineWidth = 1;
        [oval82Path stroke];


        //// Oval 83 Drawing
        UIBezierPath* oval83Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(339.5, 86, 27, 23)];
        [color10 setFill];
        [oval83Path fill];

        ////// Oval 83 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval83Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval83Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval83Path.lineWidth = 1;
        [oval83Path stroke];


        //// Oval 84 Drawing
        UIBezierPath* oval84Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(376.5, 86, 34.5, 26)];
        [color10 setFill];
        [oval84Path fill];

        ////// Oval 84 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval84Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval84Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval84Path.lineWidth = 1;
        [oval84Path stroke];


        //// Oval 85 Drawing
        UIBezierPath* oval85Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(367.5, 82.5, 27, 20)];
        [color10 setFill];
        [oval85Path fill];

        ////// Oval 85 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval85Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval85Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval85Path.lineWidth = 1;
        [oval85Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 37 Drawing
        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(178.5, 137.5, 27, 22)];
        [color10 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];


        //// Oval 38 Drawing
        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(158.5, 138.5, 32, 25)];
        [color10 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];


        //// Oval 39 Drawing
        UIBezierPath* oval39Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(143.5, 144.5, 28, 21)];
        [color10 setFill];
        [oval39Path fill];

        ////// Oval 39 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval39Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval39Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval39Path.lineWidth = 1;
        [oval39Path stroke];


        //// Oval 41 Drawing
        UIBezierPath* oval41Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(200.5, 137.5, 30, 24)];
        [color10 setFill];
        [oval41Path fill];

        ////// Oval 41 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval41Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval41Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval41Path.lineWidth = 1;
        [oval41Path stroke];


        //// Oval 43 Drawing
        UIBezierPath* oval43Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(221.5, 138.5, 34, 29)];
        [color10 setFill];
        [oval43Path fill];

        ////// Oval 43 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval43Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval43Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval43Path.lineWidth = 1;
        [oval43Path stroke];


        //// Oval 44 Drawing
        UIBezierPath* oval44Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(241, 139, 27, 23)];
        [color10 setFill];
        [oval44Path fill];

        ////// Oval 44 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval44Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval44Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval44Path.lineWidth = 1;
        [oval44Path stroke];


        //// Oval 47 Drawing
        UIBezierPath* oval47Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(253.5, 147.5, 28, 24)];
        [color10 setFill];
        [oval47Path fill];

        ////// Oval 47 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval47Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval47Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval47Path.lineWidth = 1;
        [oval47Path stroke];


        //// Oval 49 Drawing
        UIBezierPath* oval49Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(228, 149, 33, 23)];
        [color10 setFill];
        [oval49Path fill];

        ////// Oval 49 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval49Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval49Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval49Path.lineWidth = 1;
        [oval49Path stroke];


        //// Oval 50 Drawing
        UIBezierPath* oval50Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(164.5, 147.5, 32, 24)];
        [color10 setFill];
        [oval50Path fill];

        ////// Oval 50 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval50Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval50Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval50Path.lineWidth = 1;
        [oval50Path stroke];


        //// Oval 46 Drawing
        UIBezierPath* oval46Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(184.5, 149.5, 37, 26)];
        [color10 setFill];
        [oval46Path fill];

        ////// Oval 46 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval46Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval46Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval46Path.lineWidth = 1;
        [oval46Path stroke];


        //// Oval 51 Drawing
        UIBezierPath* oval51Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(206.5, 152.5, 33, 22)];
        [color10 setFill];
        [oval51Path fill];

        ////// Oval 51 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval51Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval51Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval51Path.lineWidth = 1;
        [oval51Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas8
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color17 = [UIColor colorWithRed: 0.333 green: 0.333 blue: 0.333 alpha: 0.86];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 104 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -16.09, 145.46);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval104Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 20, 18.34)];
        [color17 setFill];
        [oval104Path fill];

        ////// Oval 104 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval104Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval104Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval104Path.lineWidth = 1;
        [oval104Path stroke];

        CGContextRestoreGState(context);


        //// Oval 105 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -2.59, 131.68);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval105Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24, 26)];
        [color17 setFill];
        [oval105Path fill];

        ////// Oval 105 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval105Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval105Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval105Path.lineWidth = 1;
        [oval105Path stroke];

        CGContextRestoreGState(context);


        //// Oval 138 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 10.77, 125.21);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval138Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23, 22)];
        [color17 setFill];
        [oval138Path fill];

        ////// Oval 138 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval138Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval138Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval138Path.lineWidth = 1;
        [oval138Path stroke];

        CGContextRestoreGState(context);


        //// Oval 97 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 68.87, 135.72);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval97Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19, 20)];
        [color17 setFill];
        [oval97Path fill];

        ////// Oval 97 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval97Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval97Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval97Path.lineWidth = 1;
        [oval97Path stroke];

        CGContextRestoreGState(context);


        //// Oval 86 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 137.87, 137.13);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval86Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26, 26)];
        [color17 setFill];
        [oval86Path fill];

        ////// Oval 86 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval86Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval86Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval86Path.lineWidth = 1;
        [oval86Path stroke];

        CGContextRestoreGState(context);


        //// Oval 87 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 129.07, 145.33);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval87Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21, 20)];
        [color17 setFill];
        [oval87Path fill];

        ////// Oval 87 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval87Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval87Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval87Path.lineWidth = 1;
        [oval87Path stroke];

        CGContextRestoreGState(context);


        //// Oval 88 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 112.79, 138.76);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval88Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25, 24)];
        [color17 setFill];
        [oval88Path fill];

        ////// Oval 88 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval88Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval88Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval88Path.lineWidth = 1;
        [oval88Path stroke];

        CGContextRestoreGState(context);


        //// Oval 90 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 80.67, 141.63);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval90Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27, 22)];
        [color17 setFill];
        [oval90Path fill];

        ////// Oval 90 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval90Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval90Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval90Path.lineWidth = 1;
        [oval90Path stroke];

        CGContextRestoreGState(context);


        //// Oval 91 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 65.94, 148.12);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval91Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24, 20)];
        [color17 setFill];
        [oval91Path fill];

        ////// Oval 91 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval91Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval91Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval91Path.lineWidth = 1;
        [oval91Path stroke];

        CGContextRestoreGState(context);


        //// Oval 92 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 54.71, 140.22);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval92Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19, 20)];
        [color17 setFill];
        [oval92Path fill];

        ////// Oval 92 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval92Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval92Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval92Path.lineWidth = 1;
        [oval92Path stroke];

        CGContextRestoreGState(context);


        //// Oval 93 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 28.6, 142.81);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval93Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25, 24)];
        [color17 setFill];
        [oval93Path fill];

        ////// Oval 93 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval93Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval93Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval93Path.lineWidth = 1;
        [oval93Path stroke];

        CGContextRestoreGState(context);


        //// Oval 94 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 45.45, 147.41);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval94Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19, 21)];
        [color17 setFill];
        [oval94Path fill];

        ////// Oval 94 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval94Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval94Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval94Path.lineWidth = 1;
        [oval94Path stroke];

        CGContextRestoreGState(context);


        //// Oval 95 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 118.6, 129.95);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval95Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25, 25)];
        [color17 setFill];
        [oval95Path fill];

        ////// Oval 95 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval95Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval95Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval95Path.lineWidth = 1;
        [oval95Path stroke];

        CGContextRestoreGState(context);


        //// Oval 96 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 99.58, 130.29);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval96Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22, 23)];
        [color17 setFill];
        [oval96Path fill];

        ////// Oval 96 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval96Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval96Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval96Path.lineWidth = 1;
        [oval96Path stroke];

        CGContextRestoreGState(context);


        //// Oval 99 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 45.51, 131.4);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval99Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19, 21)];
        [color17 setFill];
        [oval99Path fill];

        ////// Oval 99 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval99Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval99Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval99Path.lineWidth = 1;
        [oval99Path stroke];

        CGContextRestoreGState(context);


        //// Oval 100 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 28.34, 121.79);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval100Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27, 25)];
        [color17 setFill];
        [oval100Path fill];

        ////// Oval 100 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval100Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval100Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval100Path.lineWidth = 1;
        [oval100Path stroke];

        CGContextRestoreGState(context);


        //// Oval 102 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 22.44, 133.09);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval102Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23, 22)];
        [color17 setFill];
        [oval102Path fill];

        ////// Oval 102 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval102Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval102Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval102Path.lineWidth = 1;
        [oval102Path stroke];

        CGContextRestoreGState(context);


        //// Oval 103 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 10.59, 142.68);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval103Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22, 23)];
        [color17 setFill];
        [oval103Path fill];

        ////// Oval 103 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval103Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval103Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval103Path.lineWidth = 1;
        [oval103Path stroke];

        CGContextRestoreGState(context);


        //// Oval 89 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 100.99, 147.35);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval89Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21, 20)];
        [color17 setFill];
        [oval89Path fill];

        ////// Oval 89 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval89Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval89Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval89Path.lineWidth = 1;
        [oval89Path stroke];

        CGContextRestoreGState(context);


        //// Oval 139 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -2.12, 146.5);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval139Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 18, 16.34)];
        [color17 setFill];
        [oval139Path fill];

        ////// Oval 139 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval139Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval139Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval139Path.lineWidth = 1;
        [oval139Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 9
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 109 Drawing
        UIBezierPath* oval109Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(380, 67, 20, 18)];
        [color3 setFill];
        [oval109Path fill];

        ////// Oval 109 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval109Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval109Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval109Path.lineWidth = 1;
        [oval109Path stroke];


        //// Oval 110 Drawing
        UIBezierPath* oval110Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(394.5, 59.5, 20, 18)];
        [color3 setFill];
        [oval110Path fill];

        ////// Oval 110 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval110Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval110Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval110Path.lineWidth = 1;
        [oval110Path stroke];


        //// Oval 111 Drawing
        UIBezierPath* oval111Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(380, 58, 20, 16)];
        [color3 setFill];
        [oval111Path fill];

        ////// Oval 111 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval111Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval111Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval111Path.lineWidth = 1;
        [oval111Path stroke];


        //// Oval 112 Drawing
        UIBezierPath* oval112Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(362, 60.5, 20, 17)];
        [color3 setFill];
        [oval112Path fill];

        ////// Oval 112 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval112Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval112Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval112Path.lineWidth = 1;
        [oval112Path stroke];


        //// Oval 113 Drawing
        UIBezierPath* oval113Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(342, 69, 20, 17)];
        [color3 setFill];
        [oval113Path fill];

        ////// Oval 113 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval113Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval113Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval113Path.lineWidth = 1;
        [oval113Path stroke];


        //// Oval 114 Drawing
        UIBezierPath* oval114Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(330, 67, 21, 18)];
        [color3 setFill];
        [oval114Path fill];

        ////// Oval 114 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval114Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval114Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval114Path.lineWidth = 1;
        [oval114Path stroke];


        //// Oval 115 Drawing
        UIBezierPath* oval115Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(364.5, 66, 23, 17)];
        [color3 setFill];
        [oval115Path fill];

        ////// Oval 115 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval115Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval115Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval115Path.lineWidth = 1;
        [oval115Path stroke];


        //// Oval 116 Drawing
        UIBezierPath* oval116Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(400, 66, 21, 19)];
        [color3 setFill];
        [oval116Path fill];

        ////// Oval 116 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval116Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval116Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval116Path.lineWidth = 1;
        [oval116Path stroke];


        //// Oval 117 Drawing
        UIBezierPath* oval117Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(387.5, 63.5, 20, 15)];
        [color3 setFill];
        [oval117Path fill];

        ////// Oval 117 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval117Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval117Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval117Path.lineWidth = 1;
        [oval117Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 76 Drawing
        UIBezierPath* oval76Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(370, 58, 20, 18)];
        [color3 setFill];
        [oval76Path fill];

        ////// Oval 76 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval76Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval76Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval76Path.lineWidth = 1;
        [oval76Path stroke];


        //// Oval 77 Drawing
        UIBezierPath* oval77Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(384.5, 50.5, 20, 18)];
        [color3 setFill];
        [oval77Path fill];

        ////// Oval 77 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval77Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval77Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval77Path.lineWidth = 1;
        [oval77Path stroke];


        //// Oval 79 Drawing
        UIBezierPath* oval79Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(370, 49, 20, 16)];
        [color3 setFill];
        [oval79Path fill];

        ////// Oval 79 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval79Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval79Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval79Path.lineWidth = 1;
        [oval79Path stroke];


        //// Oval 80 Drawing
        UIBezierPath* oval80Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(352, 51.5, 20, 17)];
        [color3 setFill];
        [oval80Path fill];

        ////// Oval 80 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval80Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval80Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval80Path.lineWidth = 1;
        [oval80Path stroke];


        //// Oval 81 Drawing
        UIBezierPath* oval81Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(332, 60, 20, 17)];
        [color3 setFill];
        [oval81Path fill];

        ////// Oval 81 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval81Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval81Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval81Path.lineWidth = 1;
        [oval81Path stroke];


        //// Oval 82 Drawing
        UIBezierPath* oval82Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(339.5, 57.5, 21, 18)];
        [color3 setFill];
        [oval82Path fill];

        ////// Oval 82 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval82Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval82Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval82Path.lineWidth = 1;
        [oval82Path stroke];


        //// Oval 83 Drawing
        UIBezierPath* oval83Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(354.5, 57, 23, 17)];
        [color3 setFill];
        [oval83Path fill];

        ////// Oval 83 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval83Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval83Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval83Path.lineWidth = 1;
        [oval83Path stroke];


        //// Oval 84 Drawing
        UIBezierPath* oval84Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(390, 57, 21, 19)];
        [color3 setFill];
        [oval84Path fill];

        ////// Oval 84 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval84Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval84Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval84Path.lineWidth = 1;
        [oval84Path stroke];


        //// Oval 85 Drawing
        UIBezierPath* oval85Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(377.5, 54.5, 20, 15)];
        [color3 setFill];
        [oval85Path fill];

        ////// Oval 85 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval85Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval85Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval85Path.lineWidth = 1;
        [oval85Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 10
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 118 Drawing
        UIBezierPath* oval118Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(357, 46, 20, 18)];
        [color3 setFill];
        [oval118Path fill];

        ////// Oval 118 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval118Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval118Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval118Path.lineWidth = 1;
        [oval118Path stroke];


        //// Oval 119 Drawing
        UIBezierPath* oval119Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(371.5, 38.5, 20, 18)];
        [color3 setFill];
        [oval119Path fill];

        ////// Oval 119 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval119Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval119Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval119Path.lineWidth = 1;
        [oval119Path stroke];


        //// Oval 120 Drawing
        UIBezierPath* oval120Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(357, 37, 20, 16)];
        [color3 setFill];
        [oval120Path fill];

        ////// Oval 120 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval120Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval120Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval120Path.lineWidth = 1;
        [oval120Path stroke];


        //// Oval 121 Drawing
        UIBezierPath* oval121Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(339, 39.5, 20, 17)];
        [color3 setFill];
        [oval121Path fill];

        ////// Oval 121 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval121Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval121Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval121Path.lineWidth = 1;
        [oval121Path stroke];


        //// Oval 122 Drawing
        UIBezierPath* oval122Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(319, 48, 20, 17)];
        [color3 setFill];
        [oval122Path fill];

        ////// Oval 122 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval122Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval122Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval122Path.lineWidth = 1;
        [oval122Path stroke];


        //// Oval 123 Drawing
        UIBezierPath* oval123Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(326.5, 45.5, 21, 18)];
        [color3 setFill];
        [oval123Path fill];

        ////// Oval 123 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval123Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval123Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval123Path.lineWidth = 1;
        [oval123Path stroke];


        //// Oval 124 Drawing
        UIBezierPath* oval124Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(341.5, 45, 23, 17)];
        [color3 setFill];
        [oval124Path fill];

        ////// Oval 124 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval124Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval124Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval124Path.lineWidth = 1;
        [oval124Path stroke];


        //// Oval 125 Drawing
        UIBezierPath* oval125Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(377, 45, 21, 19)];
        [color3 setFill];
        [oval125Path fill];

        ////// Oval 125 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval125Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval125Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval125Path.lineWidth = 1;
        [oval125Path stroke];


        //// Oval 126 Drawing
        UIBezierPath* oval126Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(364.5, 42.5, 20, 15)];
        [color3 setFill];
        [oval126Path fill];

        ////// Oval 126 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval126Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval126Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval126Path.lineWidth = 1;
        [oval126Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 13
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 176 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 168.31, 61.93);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval176Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.66, 0.68, 19.93, 16.31)];
        [color17 setFill];
        [oval176Path fill];

        ////// Oval 176 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval176Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval176Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval176Path.lineWidth = 1;
        [oval176Path stroke];

        CGContextRestoreGState(context);


        //// Oval 177 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 151.11, 49.62);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval177Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.93, 0.81, 23.9, 23.13)];
        [color17 setFill];
        [oval177Path fill];

        ////// Oval 177 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval177Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval177Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval177Path.lineWidth = 1;
        [oval177Path stroke];

        CGContextRestoreGState(context);


        //// Oval 178 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 138.6, 43.84);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval178Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.79, 0.78, 22.91, 19.56)];
        [color17 setFill];
        [oval178Path fill];

        ////// Oval 178 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval178Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval178Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval178Path.lineWidth = 1;
        [oval178Path stroke];

        CGContextRestoreGState(context);


        //// Oval 179 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 84.41, 53.23);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval179Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.72, 0.64, 18.92, 17.79)];
        [color17 setFill];
        [oval179Path fill];

        ////// Oval 179 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval179Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval179Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval179Path.lineWidth = 1;
        [oval179Path stroke];

        CGContextRestoreGState(context);


        //// Oval 180 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 8.66, 54.49);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval180Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.94, 0.88, 25.9, 23.12)];
        [color17 setFill];
        [oval180Path fill];

        ////// Oval 180 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval180Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval180Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval180Path.lineWidth = 1;
        [oval180Path stroke];

        CGContextRestoreGState(context);


        //// Oval 181 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 22.21, 61.81);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval181Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.72, 0.71, 20.92, 17.78)];
        [color17 setFill];
        [oval181Path fill];

        ////// Oval 181 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval181Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval181Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval181Path.lineWidth = 1;
        [oval181Path stroke];

        CGContextRestoreGState(context);


        //// Oval 182 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 34.65, 55.94);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval182Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.87, 0.84, 24.91, 21.34)];
        [color17 setFill];
        [oval182Path fill];

        ////// Oval 182 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval182Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval182Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval182Path.lineWidth = 1;
        [oval182Path stroke];

        CGContextRestoreGState(context);


        //// Oval 183 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 64.7, 58.51);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval183Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.8, 0.92, 26.91, 19.55)];
        [color17 setFill];
        [oval183Path fill];

        ////// Oval 183 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval183Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval183Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval183Path.lineWidth = 1;
        [oval183Path stroke];

        CGContextRestoreGState(context);


        //// Oval 184 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 82.35, 64.3);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval184Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.73, 0.81, 23.92, 17.77)];
        [color17 setFill];
        [oval184Path fill];

        ////// Oval 184 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval184Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval184Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval184Path.lineWidth = 1;
        [oval184Path stroke];

        CGContextRestoreGState(context);


        //// Oval 185 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 98.58, 57.25);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval185Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.72, 0.64, 18.92, 17.79)];
        [color17 setFill];
        [oval185Path fill];

        ////// Oval 185 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval185Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval185Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval185Path.lineWidth = 1;
        [oval185Path stroke];

        CGContextRestoreGState(context);


        //// Oval 186 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 118.85, 59.56);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval186Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.87, 0.84, 24.91, 21.34)];
        [color17 setFill];
        [oval186Path fill];

        ////// Oval 186 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval186Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval186Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval186Path.lineWidth = 1;
        [oval186Path stroke];

        CGContextRestoreGState(context);


        //// Oval 187 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 107.88, 63.66);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval187Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.75, 0.64, 18.92, 18.68)];
        [color17 setFill];
        [oval187Path fill];

        ////// Oval 187 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval187Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval187Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval187Path.lineWidth = 1;
        [oval187Path stroke];

        CGContextRestoreGState(context);


        //// Oval 188 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 28.88, 48.08);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval188Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.9, 0.84, 24.9, 22.23)];
        [color17 setFill];
        [oval188Path fill];

        ////// Oval 188 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval188Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval188Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval188Path.lineWidth = 1;
        [oval188Path stroke];

        CGContextRestoreGState(context);


        //// Oval 189 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 50.82, 48.38);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval189Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.83, 0.74, 21.91, 20.46)];
        [color17 setFill];
        [oval189Path fill];

        ////// Oval 189 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval189Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval189Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval189Path.lineWidth = 1;
        [oval189Path stroke];

        CGContextRestoreGState(context);


        //// Oval 190 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 107.81, 49.37);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval190Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.75, 0.64, 18.92, 18.68)];
        [color17 setFill];
        [oval190Path fill];

        ////// Oval 190 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval190Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval190Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval190Path.lineWidth = 1;
        [oval190Path stroke];

        CGContextRestoreGState(context);


        //// Oval 191 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 117.15, 40.79);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval191Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.9, 0.91, 26.9, 22.23)];
        [color17 setFill];
        [oval191Path fill];

        ////// Oval 191 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval191Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval191Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval191Path.lineWidth = 1;
        [oval191Path stroke];

        CGContextRestoreGState(context);


        //// Oval 192 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 126.93, 50.88);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval192Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.79, 0.78, 22.91, 19.56)];
        [color17 setFill];
        [oval192Path fill];

        ////// Oval 192 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval192Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval192Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval192Path.lineWidth = 1;
        [oval192Path stroke];

        CGContextRestoreGState(context);


        //// Oval 193 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 139.81, 59.44);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval193Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.83, 0.74, 21.91, 20.46)];
        [color17 setFill];
        [oval193Path fill];

        ////// Oval 193 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval193Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval193Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval193Path.lineWidth = 1;
        [oval193Path stroke];

        CGContextRestoreGState(context);


        //// Oval 194 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 50.3, 63.61);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval194Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.72, 0.71, 20.92, 17.78)];
        [color17 setFill];
        [oval194Path fill];

        ////// Oval 194 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval194Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval194Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval194Path.lineWidth = 1;
        [oval194Path stroke];

        CGContextRestoreGState(context);


        //// Oval 195 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 156.27, 62.85);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval195Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.59, 0.61, 17.94, 14.53)];
        [color17 setFill];
        [oval195Path fill];

        ////// Oval 195 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval195Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval195Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval195Path.lineWidth = 1;
        [oval195Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 41 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 168.74, 47.96);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval41Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.67, 0.68, 20, 18.34)];
        [color17 setFill];
        [oval41Path fill];

        ////// Oval 41 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval41Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval41Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval41Path.lineWidth = 1;
        [oval41Path stroke];

        CGContextRestoreGState(context);


        //// Oval 42 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 151.51, 34.18);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval42Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.94, 0.81, 24, 26)];
        [color17 setFill];
        [oval42Path fill];

        ////// Oval 42 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval42Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval42Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval42Path.lineWidth = 1;
        [oval42Path stroke];

        CGContextRestoreGState(context);


        //// Oval 43 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 139.01, 27.71);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval43Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.8, 0.78, 23, 22)];
        [color17 setFill];
        [oval43Path fill];

        ////// Oval 43 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval43Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval43Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval43Path.lineWidth = 1;
        [oval43Path stroke];

        CGContextRestoreGState(context);


        //// Oval 44 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 84.84, 38.22);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval44Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.72, 0.64, 19, 20)];
        [color17 setFill];
        [oval44Path fill];

        ////// Oval 44 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval44Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval44Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval44Path.lineWidth = 1;
        [oval44Path stroke];

        CGContextRestoreGState(context);


        //// Oval 45 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 9.06, 39.63);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval45Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.94, 0.88, 26, 26)];
        [color17 setFill];
        [oval45Path fill];

        ////// Oval 45 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval45Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval45Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval45Path.lineWidth = 1;
        [oval45Path stroke];

        CGContextRestoreGState(context);


        //// Oval 46 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 22.64, 47.83);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval46Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.73, 0.71, 21, 20)];
        [color17 setFill];
        [oval46Path fill];

        ////// Oval 46 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval46Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval46Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval46Path.lineWidth = 1;
        [oval46Path stroke];

        CGContextRestoreGState(context);


        //// Oval 47 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 35.06, 41.26);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval47Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.87, 0.84, 25, 24)];
        [color17 setFill];
        [oval47Path fill];

        ////// Oval 47 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval47Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval47Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval47Path.lineWidth = 1;
        [oval47Path stroke];

        CGContextRestoreGState(context);


        //// Oval 48 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 65.11, 44.13);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval48Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.8, 0.92, 27, 22)];
        [color17 setFill];
        [oval48Path fill];

        ////// Oval 48 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval48Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval48Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval48Path.lineWidth = 1;
        [oval48Path stroke];

        CGContextRestoreGState(context);


        //// Oval 49 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 82.78, 50.62);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval49Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.73, 0.81, 24, 20)];
        [color17 setFill];
        [oval49Path fill];

        ////// Oval 49 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval49Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval49Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval49Path.lineWidth = 1;
        [oval49Path stroke];

        CGContextRestoreGState(context);


        //// Oval 50 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 99.01, 42.72);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval50Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.72, 0.64, 19, 20)];
        [color17 setFill];
        [oval50Path fill];

        ////// Oval 50 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval50Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval50Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval50Path.lineWidth = 1;
        [oval50Path stroke];

        CGContextRestoreGState(context);


        //// Oval 51 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 119.26, 45.31);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval51Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.87, 0.84, 25, 24)];
        [color17 setFill];
        [oval51Path fill];

        ////// Oval 51 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval51Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval51Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval51Path.lineWidth = 1;
        [oval51Path stroke];

        CGContextRestoreGState(context);


        //// Oval 52 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 108.3, 49.91);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval52Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.76, 0.64, 19, 21)];
        [color17 setFill];
        [oval52Path fill];

        ////// Oval 52 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval52Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval52Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval52Path.lineWidth = 1;
        [oval52Path stroke];

        CGContextRestoreGState(context);


        //// Oval 53 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 29.29, 32.45);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval53Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.9, 0.84, 25, 25)];
        [color17 setFill];
        [oval53Path fill];

        ////// Oval 53 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval53Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval53Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval53Path.lineWidth = 1;
        [oval53Path stroke];

        CGContextRestoreGState(context);


        //// Oval 60 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 51.24, 32.79);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval60Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.83, 0.74, 22, 23)];
        [color17 setFill];
        [oval60Path fill];

        ////// Oval 60 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval60Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval60Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval60Path.lineWidth = 1;
        [oval60Path stroke];

        CGContextRestoreGState(context);


        //// Oval 61 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 108.24, 33.9);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval61Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.76, 0.64, 19, 21)];
        [color17 setFill];
        [oval61Path fill];

        ////// Oval 61 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval61Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval61Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval61Path.lineWidth = 1;
        [oval61Path stroke];

        CGContextRestoreGState(context);


        //// Oval 62 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 117.56, 24.29);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval62Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.91, 0.91, 27, 25)];
        [color17 setFill];
        [oval62Path fill];

        ////// Oval 62 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval62Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval62Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval62Path.lineWidth = 1;
        [oval62Path stroke];

        CGContextRestoreGState(context);


        //// Oval 65 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 127.35, 35.59);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval65Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.8, 0.78, 23, 22)];
        [color17 setFill];
        [oval65Path fill];

        ////// Oval 65 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval65Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval65Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval65Path.lineWidth = 1;
        [oval65Path stroke];

        CGContextRestoreGState(context);


        //// Oval 68 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 140.23, 45.18);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval68Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.83, 0.74, 22, 23)];
        [color17 setFill];
        [oval68Path fill];

        ////// Oval 68 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval68Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval68Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval68Path.lineWidth = 1;
        [oval68Path stroke];

        CGContextRestoreGState(context);


        //// Oval 69 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 50.73, 49.85);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval69Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.73, 0.71, 21, 20)];
        [color17 setFill];
        [oval69Path fill];

        ////// Oval 69 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval69Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval69Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval69Path.lineWidth = 1;
        [oval69Path stroke];

        CGContextRestoreGState(context);


        //// Oval 70 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 156.71, 49);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval70Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.59, 0.61, 18, 16.34)];
        [color17 setFill];
        [oval70Path fill];

        ////// Oval 70 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval70Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval70Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval70Path.lineWidth = 1;
        [oval70Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 98 Drawing
        UIBezierPath* oval98Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(387.5, 129.5, 17, 18)];
        [color17 setFill];
        [oval98Path fill];

        ////// Oval 98 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval98Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval98Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval98Path.lineWidth = 1;
        [oval98Path stroke];


        //// Oval 16 Drawing
        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(368.5, 126.5, 23, 24)];
        [color17 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];


        //// Oval 19 Drawing
        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(381.5, 140.5, 20, 22)];
        [color17 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(239.5, 140.5, 26, 26)];
        [color17 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(253, 149, 21, 20)];
        [color17 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(265.5, 143, 25, 24)];
        [color17 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(281, 152, 21, 20)];
        [color17 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(295.5, 147, 27, 22)];
        [color17 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(311, 152, 28, 24)];
        [color17 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(329.5, 146.5, 19, 20)];
        [color17 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(348.5, 149, 27, 26)];
        [color17 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(339, 154, 19, 21)];
        [color17 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(260, 134, 25, 25)];
        [color17 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(281, 134, 24, 25)];
        [color17 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(303.5, 129.5, 26, 25)];
        [color17 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];


        //// Oval 13 Drawing
        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(322.5, 138.5, 20, 24)];
        [color17 setFill];
        [oval13Path fill];

        ////// Oval 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];


        //// Oval 14 Drawing
        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(339, 138, 19, 21)];
        [color17 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];


        //// Oval 15 Drawing
        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(348.5, 129, 27, 25)];
        [color17 setFill];
        [oval15Path fill];

        ////// Oval 15 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval15Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval15Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(358, 140.5, 23, 22)];
        [color17 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];


        //// Oval 18 Drawing
        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(370.5, 150.5, 22, 23)];
        [color17 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];


        //// Oval 20 Drawing
        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(386.5, 153.5, 20, 19)];
        [color17 setFill];
        [oval20Path fill];

        ////// Oval 20 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval20Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval20Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];


        //// Oval 101 Drawing
        UIBezierPath* oval101Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(398, 140.5, 18, 20)];
        [color17 setFill];
        [oval101Path fill];

        ////// Oval 101 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval101Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval101Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval101Path.lineWidth = 1;
        [oval101Path stroke];


        //// Oval 106 Drawing
        UIBezierPath* oval106Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(400, 155.5, 16, 15)];
        [color17 setFill];
        [oval106Path fill];

        ////// Oval 106 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval106Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval106Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval106Path.lineWidth = 1;
        [oval106Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 8
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 130 Drawing
        UIBezierPath* oval130Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(371.5, 113, 17, 18)];
        [color17 setFill];
        [oval130Path fill];

        ////// Oval 130 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval130Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval130Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval130Path.lineWidth = 1;
        [oval130Path stroke];


        //// Oval 131 Drawing
        UIBezierPath* oval131Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(352.5, 110, 23, 24)];
        [color17 setFill];
        [oval131Path fill];

        ////// Oval 131 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval131Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval131Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval131Path.lineWidth = 1;
        [oval131Path stroke];


        //// Oval 132 Drawing
        UIBezierPath* oval132Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(365.5, 124, 20, 22)];
        [color17 setFill];
        [oval132Path fill];

        ////// Oval 132 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval132Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval132Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval132Path.lineWidth = 1;
        [oval132Path stroke];


        //// Oval 135 Drawing
        UIBezierPath* oval135Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(249.5, 126.5, 25, 24)];
        [color17 setFill];
        [oval135Path fill];

        ////// Oval 135 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval135Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval135Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval135Path.lineWidth = 1;
        [oval135Path stroke];


        //// Oval 136 Drawing
        UIBezierPath* oval136Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(265, 135.5, 21, 20)];
        [color17 setFill];
        [oval136Path fill];

        ////// Oval 136 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval136Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval136Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval136Path.lineWidth = 1;
        [oval136Path stroke];


        //// Oval 137 Drawing
        UIBezierPath* oval137Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(279.5, 130.5, 27, 22)];
        [color17 setFill];
        [oval137Path fill];

        ////// Oval 137 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval137Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval137Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval137Path.lineWidth = 1;
        [oval137Path stroke];


        //// Oval 151 Drawing
        UIBezierPath* oval151Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(295, 135.5, 28, 24)];
        [color17 setFill];
        [oval151Path fill];

        ////// Oval 151 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval151Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval151Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval151Path.lineWidth = 1;
        [oval151Path stroke];


        //// Oval 152 Drawing
        UIBezierPath* oval152Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(313.5, 130, 19, 20)];
        [color17 setFill];
        [oval152Path fill];

        ////// Oval 152 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval152Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval152Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval152Path.lineWidth = 1;
        [oval152Path stroke];


        //// Oval 153 Drawing
        UIBezierPath* oval153Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(332.5, 132.5, 27, 26)];
        [color17 setFill];
        [oval153Path fill];

        ////// Oval 153 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval153Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval153Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval153Path.lineWidth = 1;
        [oval153Path stroke];


        //// Oval 154 Drawing
        UIBezierPath* oval154Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(323, 137.5, 19, 21)];
        [color17 setFill];
        [oval154Path fill];

        ////// Oval 154 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval154Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval154Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval154Path.lineWidth = 1;
        [oval154Path stroke];


        //// Oval 156 Drawing
        UIBezierPath* oval156Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(265, 117.5, 24, 25)];
        [color17 setFill];
        [oval156Path fill];

        ////// Oval 156 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval156Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval156Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval156Path.lineWidth = 1;
        [oval156Path stroke];


        //// Oval 157 Drawing
        UIBezierPath* oval157Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(287.5, 113, 26, 25)];
        [color17 setFill];
        [oval157Path fill];

        ////// Oval 157 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval157Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval157Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval157Path.lineWidth = 1;
        [oval157Path stroke];


        //// Oval 158 Drawing
        UIBezierPath* oval158Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(306.5, 122, 20, 24)];
        [color17 setFill];
        [oval158Path fill];

        ////// Oval 158 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval158Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval158Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval158Path.lineWidth = 1;
        [oval158Path stroke];


        //// Oval 159 Drawing
        UIBezierPath* oval159Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(323, 121.5, 19, 21)];
        [color17 setFill];
        [oval159Path fill];

        ////// Oval 159 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval159Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval159Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval159Path.lineWidth = 1;
        [oval159Path stroke];


        //// Oval 160 Drawing
        UIBezierPath* oval160Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(332.5, 112.5, 27, 25)];
        [color17 setFill];
        [oval160Path fill];

        ////// Oval 160 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval160Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval160Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval160Path.lineWidth = 1;
        [oval160Path stroke];


        //// Oval 161 Drawing
        UIBezierPath* oval161Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(342, 124, 23, 22)];
        [color17 setFill];
        [oval161Path fill];

        ////// Oval 161 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval161Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval161Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval161Path.lineWidth = 1;
        [oval161Path stroke];


        //// Oval 162 Drawing
        UIBezierPath* oval162Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(354.5, 134, 22, 23)];
        [color17 setFill];
        [oval162Path fill];

        ////// Oval 162 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval162Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval162Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval162Path.lineWidth = 1;
        [oval162Path stroke];


        //// Oval 163 Drawing
        UIBezierPath* oval163Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(370.5, 137, 20, 19)];
        [color17 setFill];
        [oval163Path fill];

        ////// Oval 163 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval163Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval163Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval163Path.lineWidth = 1;
        [oval163Path stroke];


        //// Oval 164 Drawing
        UIBezierPath* oval164Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(382, 124, 18, 20)];
        [color17 setFill];
        [oval164Path fill];

        ////// Oval 164 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval164Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval164Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval164Path.lineWidth = 1;
        [oval164Path stroke];


        //// Oval 165 Drawing
        UIBezierPath* oval165Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(384, 139, 16, 15)];
        [color17 setFill];
        [oval165Path fill];

        ////// Oval 165 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval165Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval165Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval165Path.lineWidth = 1;
        [oval165Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 11
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 155 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 284.98, 115.82);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval155Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22, 23)];
        [color17 setFill];
        [oval155Path fill];

        ////// Oval 155 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval155Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval155Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval155Path.lineWidth = 1;
        [oval155Path stroke];

        CGContextRestoreGState(context);


        //// Oval 166 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 300.73, 116.96);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval166Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23, 22)];
        [color17 setFill];
        [oval166Path fill];

        ////// Oval 166 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval166Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval166Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval166Path.lineWidth = 1;
        [oval166Path stroke];

        CGContextRestoreGState(context);


        //// Oval 167 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 318.61, 123.39);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval167Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 16, 16)];
        [color17 setFill];
        [oval167Path fill];

        ////// Oval 167 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval167Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval167Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval167Path.lineWidth = 1;
        [oval167Path stroke];

        CGContextRestoreGState(context);


        //// Oval 168 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 327.13, 118.85);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval168Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23, 21)];
        [color17 setFill];
        [oval168Path fill];

        ////// Oval 168 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval168Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval168Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval168Path.lineWidth = 1;
        [oval168Path stroke];

        CGContextRestoreGState(context);


        //// Oval 169 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 341.45, 120.67);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval169Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21, 20)];
        [color17 setFill];
        [oval169Path fill];

        ////// Oval 169 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval169Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval169Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval169Path.lineWidth = 1;
        [oval169Path stroke];

        CGContextRestoreGState(context);


        //// Oval 170 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 353.97, 111.62);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval170Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 16, 19)];
        [color17 setFill];
        [oval170Path fill];

        ////// Oval 170 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval170Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval170Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval170Path.lineWidth = 1;
        [oval170Path stroke];

        CGContextRestoreGState(context);


        //// Oval 171 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 357.28, 118.27);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval171Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 17, 18)];
        [color17 setFill];
        [oval171Path fill];

        ////// Oval 171 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval171Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval171Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval171Path.lineWidth = 1;
        [oval171Path stroke];

        CGContextRestoreGState(context);


        //// Oval 172 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 299.84, 109.52);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval172Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23, 20)];
        [color17 setFill];
        [oval172Path fill];

        ////// Oval 172 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval172Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval172Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval172Path.lineWidth = 1;
        [oval172Path stroke];

        CGContextRestoreGState(context);


        //// Oval 173 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 316.72, 107.5);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval173Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21, 20)];
        [color17 setFill];
        [oval173Path fill];

        ////// Oval 173 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval173Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval173Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval173Path.lineWidth = 1;
        [oval173Path stroke];

        CGContextRestoreGState(context);


        //// Oval 174 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 332.57, 101.08);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval174Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22, 22)];
        [color17 setFill];
        [oval174Path fill];

        ////// Oval 174 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval174Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval174Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval174Path.lineWidth = 1;
        [oval174Path stroke];

        CGContextRestoreGState(context);


        //// Oval 175 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 344.06, 108.77);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval175Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 17, 20)];
        [color17 setFill];
        [oval175Path fill];

        ////// Oval 175 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval175Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval175Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval175Path.lineWidth = 1;
        [oval175Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 12
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 140 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 12.13, 123.86);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval140Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.44, 22.48)];
        [color3 setFill];
        [oval140Path fill];

        ////// Oval 140 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval140Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval140Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval140Path.lineWidth = 1;
        [oval140Path stroke];

        CGContextRestoreGState(context);


        //// Oval 141 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 29.1, 125);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval141Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.53, 21.48)];
        [color3 setFill];
        [oval141Path fill];

        ////// Oval 141 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval141Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval141Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval141Path.lineWidth = 1;
        [oval141Path stroke];

        CGContextRestoreGState(context);


        //// Oval 142 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 48.31, 131.27);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval142Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 17.06, 15.63)];
        [color3 setFill];
        [oval142Path fill];

        ////// Oval 142 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval142Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval142Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval142Path.lineWidth = 1;
        [oval142Path stroke];

        CGContextRestoreGState(context);


        //// Oval 143 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 57.56, 126.86);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval143Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.54, 20.49)];
        [color3 setFill];
        [oval143Path fill];

        ////// Oval 143 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval143Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval143Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval143Path.lineWidth = 1;
        [oval143Path stroke];

        CGContextRestoreGState(context);


        //// Oval 144 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 72.98, 128.64);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval144Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.4, 19.53)];
        [color3 setFill];
        [oval144Path fill];

        ////// Oval 144 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval144Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval144Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval144Path.lineWidth = 1;
        [oval144Path stroke];

        CGContextRestoreGState(context);


        //// Oval 145 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 86.45, 119.66);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval145Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 17.02, 18.59)];
        [color3 setFill];
        [oval145Path fill];

        ////// Oval 145 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval145Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval145Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval145Path.lineWidth = 1;
        [oval145Path stroke];

        CGContextRestoreGState(context);


        //// Oval 146 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 90.01, 126.24);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval146Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 18.11, 17.59)];
        [color3 setFill];
        [oval146Path fill];

        ////// Oval 146 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval146Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval146Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval146Path.lineWidth = 1;
        [oval146Path stroke];

        CGContextRestoreGState(context);


        //// Oval 147 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 28.12, 117.66);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval147Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.55, 19.5)];
        [color3 setFill];
        [oval147Path fill];

        ////// Oval 147 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval147Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval147Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval147Path.lineWidth = 1;
        [oval147Path stroke];

        CGContextRestoreGState(context);


        //// Oval 148 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 46.31, 115.65);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval148Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.4, 19.53)];
        [color3 setFill];
        [oval148Path fill];

        ////// Oval 148 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval148Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval148Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval148Path.lineWidth = 1;
        [oval148Path stroke];

        CGContextRestoreGState(context);


        //// Oval 150 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 75.78, 116.86);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval150Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 18.09, 19.57)];
        [color3 setFill];
        [oval150Path fill];

        ////// Oval 150 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval150Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval150Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval150Path.lineWidth = 1;
        [oval150Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 7
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 71 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 120.13, 113.79);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval71Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.88, 23.49)];
        [color3 setFill];
        [oval71Path fill];

        ////// Oval 71 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval71Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval71Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval71Path.lineWidth = 1;
        [oval71Path stroke];

        CGContextRestoreGState(context);


        //// Oval 72 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 136.55, 114.96);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval72Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.93, 22.46)];
        [color3 setFill];
        [oval72Path fill];

        ////// Oval 72 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval72Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval72Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval72Path.lineWidth = 1;
        [oval72Path stroke];

        CGContextRestoreGState(context);


        //// Oval 73 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 155.19, 121.52);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval73Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 16.64, 16.34)];
        [color3 setFill];
        [oval73Path fill];

        ////// Oval 73 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval73Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval73Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval73Path.lineWidth = 1;
        [oval73Path stroke];

        CGContextRestoreGState(context);


        //// Oval 74 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 164.08, 116.89);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval74Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.93, 21.44)];
        [color3 setFill];
        [oval74Path fill];

        ////// Oval 74 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval74Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval74Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval74Path.lineWidth = 1;
        [oval74Path stroke];

        CGContextRestoreGState(context);


        //// Oval 75 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 179.01, 118.75);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval75Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21.85, 20.42)];
        [color3 setFill];
        [oval75Path fill];

        ////// Oval 75 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval75Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval75Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval75Path.lineWidth = 1;
        [oval75Path stroke];

        CGContextRestoreGState(context);


        //// Oval 78 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 192.06, 109.48);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval78Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 16.64, 19.41)];
        [color3 setFill];
        [oval78Path fill];

        ////// Oval 78 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval78Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval78Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval78Path.lineWidth = 1;
        [oval78Path stroke];

        CGContextRestoreGState(context);


        //// Oval 107 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 195.51, 116.29);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval107Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 17.68, 18.38)];
        [color3 setFill];
        [oval107Path fill];

        ////// Oval 107 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval107Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval107Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval107Path.lineWidth = 1;
        [oval107Path stroke];

        CGContextRestoreGState(context);


        //// Oval 108 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 135.62, 107.34);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval108Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.93, 20.42)];
        [color3 setFill];
        [oval108Path fill];

        ////// Oval 108 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval108Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval108Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval108Path.lineWidth = 1;
        [oval108Path stroke];

        CGContextRestoreGState(context);


        //// Oval 127 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 153.22, 105.28);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval127Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21.85, 20.42)];
        [color3 setFill];
        [oval127Path fill];

        ////// Oval 127 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval127Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval127Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval127Path.lineWidth = 1;
        [oval127Path stroke];

        CGContextRestoreGState(context);


        //// Oval 128 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 169.75, 98.71);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval128Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.88, 22.47)];
        [color3 setFill];
        [oval128Path fill];

        ////// Oval 128 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval128Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval128Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval128Path.lineWidth = 1;
        [oval128Path stroke];

        CGContextRestoreGState(context);


        //// Oval 129 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 181.73, 106.57);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval129Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 17.68, 20.43)];
        [color3 setFill];
        [oval129Path fill];

        ////// Oval 129 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval129Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval129Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval129Path.lineWidth = 1;
        [oval129Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 21 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 54.41, 137.46);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 20, 18.34)];
        [color17 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];

        CGContextRestoreGState(context);


        //// Oval 22 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 67.91, 123.68);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24, 26)];
        [color17 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];

        CGContextRestoreGState(context);


        //// Oval 23 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 81.27, 117.21);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval23Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23, 22)];
        [color17 setFill];
        [oval23Path fill];

        ////// Oval 23 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval23Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval23Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval23Path.lineWidth = 1;
        [oval23Path stroke];

        CGContextRestoreGState(context);


        //// Oval 24 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 139.37, 127.72);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19, 20)];
        [color17 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];

        CGContextRestoreGState(context);


        //// Oval 25 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 208.37, 129.13);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26, 26)];
        [color17 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];

        CGContextRestoreGState(context);


        //// Oval 26 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 199.57, 137.33);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21, 20)];
        [color17 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];

        CGContextRestoreGState(context);


        //// Oval 27 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 183.29, 130.76);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25, 24)];
        [color17 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];

        CGContextRestoreGState(context);


        //// Oval 28 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 151.17, 133.63);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27, 22)];
        [color17 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];

        CGContextRestoreGState(context);


        //// Oval 29 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 136.44, 140.12);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24, 20)];
        [color17 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];

        CGContextRestoreGState(context);


        //// Oval 30 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 125.21, 132.22);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval30Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19, 20)];
        [color17 setFill];
        [oval30Path fill];

        ////// Oval 30 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval30Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval30Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval30Path.lineWidth = 1;
        [oval30Path stroke];

        CGContextRestoreGState(context);


        //// Oval 31 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 99.1, 134.81);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval31Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25, 24)];
        [color17 setFill];
        [oval31Path fill];

        ////// Oval 31 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval31Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval31Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval31Path.lineWidth = 1;
        [oval31Path stroke];

        CGContextRestoreGState(context);


        //// Oval 32 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 115.95, 139.41);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19, 21)];
        [color17 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];

        CGContextRestoreGState(context);


        //// Oval 33 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 189.1, 121.95);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25, 25)];
        [color17 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];

        CGContextRestoreGState(context);


        //// Oval 34 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 170.08, 122.29);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22, 23)];
        [color17 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];

        CGContextRestoreGState(context);


        //// Oval 35 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 116.01, 123.4);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19, 21)];
        [color17 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];

        CGContextRestoreGState(context);


        //// Oval 36 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 98.84, 113.79);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval36Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27, 25)];
        [color17 setFill];
        [oval36Path fill];

        ////// Oval 36 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval36Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval36Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval36Path.lineWidth = 1;
        [oval36Path stroke];

        CGContextRestoreGState(context);


        //// Oval 37 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 92.94, 125.09);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23, 22)];
        [color17 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];

        CGContextRestoreGState(context);


        //// Oval 38 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 81.09, 134.68);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22, 23)];
        [color17 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];

        CGContextRestoreGState(context);


        //// Oval 39 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 171.49, 139.35);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval39Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21, 20)];
        [color17 setFill];
        [oval39Path fill];

        ////// Oval 39 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval39Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval39Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval39Path.lineWidth = 1;
        [oval39Path stroke];

        CGContextRestoreGState(context);


        //// Oval 40 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 68.38, 138.5);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval40Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 18, 16.34)];
        [color17 setFill];
        [oval40Path fill];

        ////// Oval 40 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval40Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval40Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval40Path.lineWidth = 1;
        [oval40Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas9
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color17 = [UIColor colorWithRed: 0.333 green: 0.333 blue: 0.333 alpha: 0.86];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 98 Drawing
        UIBezierPath* oval98Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(387.5, 129.5, 17, 18)];
        [color17 setFill];
        [oval98Path fill];

        ////// Oval 98 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval98Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval98Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval98Path.lineWidth = 1;
        [oval98Path stroke];


        //// Oval 19 Drawing
        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(381.5, 140.5, 20, 22)];
        [color17 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(239.5, 140.5, 26, 26)];
        [color17 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(253, 149, 21, 20)];
        [color17 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(265.5, 143, 25, 24)];
        [color17 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(281, 152, 21, 20)];
        [color17 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(295.5, 147, 27, 22)];
        [color17 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(311, 152, 28, 24)];
        [color17 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(329.5, 146.5, 19, 20)];
        [color17 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(348.5, 149, 27, 26)];
        [color17 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(339.5, 153.5, 19, 21)];
        [color17 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(358, 140.5, 23, 22)];
        [color17 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];


        //// Oval 18 Drawing
        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(370.5, 150.5, 22, 23)];
        [color17 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];


        //// Oval 20 Drawing
        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(386.5, 153.5, 20, 19)];
        [color17 setFill];
        [oval20Path fill];

        ////// Oval 20 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval20Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval20Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];


        //// Oval 101 Drawing
        UIBezierPath* oval101Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(398, 140.5, 18, 20)];
        [color17 setFill];
        [oval101Path fill];

        ////// Oval 101 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval101Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval101Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval101Path.lineWidth = 1;
        [oval101Path stroke];


        //// Oval 106 Drawing
        UIBezierPath* oval106Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(400, 155.5, 16, 15)];
        [color17 setFill];
        [oval106Path fill];

        ////// Oval 106 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval106Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval106Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval106Path.lineWidth = 1;
        [oval106Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 138 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -5.62, 132.04);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval138Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.71, 22.17)];
        [color17 setFill];
        [oval138Path fill];

        ////// Oval 138 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval138Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval138Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval138Path.lineWidth = 1;
        [oval138Path stroke];

        CGContextRestoreGState(context);


        //// Oval 97 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 64.03, 142.58);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval97Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.91, 20.14)];
        [color17 setFill];
        [oval97Path fill];

        ////// Oval 97 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval97Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval97Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval97Path.lineWidth = 1;
        [oval97Path stroke];

        CGContextRestoreGState(context);


        //// Oval 86 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 146.68, 143.95);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval86Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.34, 26.19)];
        [color17 setFill];
        [oval86Path fill];

        ////// Oval 86 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval86Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval86Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval86Path.lineWidth = 1;
        [oval86Path stroke];

        CGContextRestoreGState(context);


        //// Oval 87 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 136.18, 152.18);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval87Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.3, 20.15)];
        [color17 setFill];
        [oval87Path fill];

        ////// Oval 87 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval87Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval87Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval87Path.lineWidth = 1;
        [oval87Path stroke];

        CGContextRestoreGState(context);


        //// Oval 88 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 116.64, 145.58);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval88Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.12, 24.18)];
        [color17 setFill];
        [oval88Path fill];

        ////// Oval 88 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval88Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval88Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval88Path.lineWidth = 1;
        [oval88Path stroke];

        CGContextRestoreGState(context);


        //// Oval 90 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 78.16, 148.44);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval90Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 32.51, 22.19)];
        [color17 setFill];
        [oval90Path fill];

        ////// Oval 90 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval90Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval90Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval90Path.lineWidth = 1;
        [oval90Path stroke];

        CGContextRestoreGState(context);


        //// Oval 91 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 60.51, 154.95);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval91Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.9, 20.17)];
        [color17 setFill];
        [oval91Path fill];

        ////// Oval 91 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval91Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval91Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval91Path.lineWidth = 1;
        [oval91Path stroke];

        CGContextRestoreGState(context);


        //// Oval 92 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 47.05, 147.09);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval92Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.91, 20.14)];
        [color17 setFill];
        [oval92Path fill];

        ////// Oval 92 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval92Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval92Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval92Path.lineWidth = 1;
        [oval92Path stroke];

        CGContextRestoreGState(context);


        //// Oval 93 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 15.73, 149.63);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval93Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.12, 24.18)];
        [color17 setFill];
        [oval93Path fill];

        ////// Oval 93 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval93Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval93Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval93Path.lineWidth = 1;
        [oval93Path stroke];

        CGContextRestoreGState(context);


        //// Oval 94 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 35.95, 154.27);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval94Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.91, 21.14)];
        [color17 setFill];
        [oval94Path fill];

        ////// Oval 94 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval94Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval94Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval94Path.lineWidth = 1;
        [oval94Path stroke];

        CGContextRestoreGState(context);


        //// Oval 95 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 123.6, 136.77);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval95Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.13, 25.18)];
        [color17 setFill];
        [oval95Path fill];

        ////// Oval 95 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval95Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval95Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval95Path.lineWidth = 1;
        [oval95Path stroke];

        CGContextRestoreGState(context);


        //// Oval 96 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 100.82, 137.13);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval96Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.52, 23.16)];
        [color17 setFill];
        [oval96Path fill];

        ////// Oval 96 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval96Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval96Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval96Path.lineWidth = 1;
        [oval96Path stroke];

        CGContextRestoreGState(context);


        //// Oval 99 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 36.02, 138.26);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval99Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.91, 21.14)];
        [color17 setFill];
        [oval99Path fill];

        ////// Oval 99 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval99Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval99Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval99Path.lineWidth = 1;
        [oval99Path stroke];

        CGContextRestoreGState(context);


        //// Oval 100 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 15.41, 128.6);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval100Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 32.53, 25.19)];
        [color17 setFill];
        [oval100Path fill];

        ////// Oval 100 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval100Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval100Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval100Path.lineWidth = 1;
        [oval100Path stroke];

        CGContextRestoreGState(context);


        //// Oval 102 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 8.36, 139.93);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval102Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.71, 22.17)];
        [color17 setFill];
        [oval102Path fill];

        ////// Oval 102 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval102Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval102Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval102Path.lineWidth = 1;
        [oval102Path stroke];

        CGContextRestoreGState(context);


        //// Oval 103 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -5.84, 149.52);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval103Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.52, 23.16)];
        [color17 setFill];
        [oval103Path fill];

        ////// Oval 103 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval103Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval103Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval103Path.lineWidth = 1;
        [oval103Path stroke];

        CGContextRestoreGState(context);


        //// Oval 89 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 102.52, 154.2);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval89Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.3, 20.15)];
        [color17 setFill];
        [oval89Path fill];

        ////// Oval 89 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval89Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval89Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval89Path.lineWidth = 1;
        [oval89Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 9
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 109 Drawing
        UIBezierPath* oval109Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(382, 69, 20, 18)];
        [color3 setFill];
        [oval109Path fill];

        ////// Oval 109 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval109Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval109Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval109Path.lineWidth = 1;
        [oval109Path stroke];


        //// Oval 110 Drawing
        UIBezierPath* oval110Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(396.5, 61.5, 20, 18)];
        [color3 setFill];
        [oval110Path fill];

        ////// Oval 110 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval110Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval110Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval110Path.lineWidth = 1;
        [oval110Path stroke];


        //// Oval 111 Drawing
        UIBezierPath* oval111Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(382, 60, 20, 16)];
        [color3 setFill];
        [oval111Path fill];

        ////// Oval 111 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval111Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval111Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval111Path.lineWidth = 1;
        [oval111Path stroke];


        //// Oval 112 Drawing
        UIBezierPath* oval112Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(364, 62.5, 20, 17)];
        [color3 setFill];
        [oval112Path fill];

        ////// Oval 112 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval112Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval112Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval112Path.lineWidth = 1;
        [oval112Path stroke];


        //// Oval 113 Drawing
        UIBezierPath* oval113Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(344, 71, 20, 17)];
        [color3 setFill];
        [oval113Path fill];

        ////// Oval 113 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval113Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval113Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval113Path.lineWidth = 1;
        [oval113Path stroke];


        //// Oval 114 Drawing
        UIBezierPath* oval114Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(351.5, 68.5, 21, 18)];
        [color3 setFill];
        [oval114Path fill];

        ////// Oval 114 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval114Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval114Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval114Path.lineWidth = 1;
        [oval114Path stroke];


        //// Oval 115 Drawing
        UIBezierPath* oval115Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(366.5, 68, 23, 17)];
        [color3 setFill];
        [oval115Path fill];

        ////// Oval 115 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval115Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval115Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval115Path.lineWidth = 1;
        [oval115Path stroke];


        //// Oval 116 Drawing
        UIBezierPath* oval116Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(402, 68, 21, 19)];
        [color3 setFill];
        [oval116Path fill];

        ////// Oval 116 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval116Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval116Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval116Path.lineWidth = 1;
        [oval116Path stroke];


        //// Oval 117 Drawing
        UIBezierPath* oval117Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(389.5, 65.5, 20, 15)];
        [color3 setFill];
        [oval117Path fill];

        ////// Oval 117 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval117Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval117Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval117Path.lineWidth = 1;
        [oval117Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 76 Drawing
        UIBezierPath* oval76Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(346, 59, 20, 18)];
        [color3 setFill];
        [oval76Path fill];

        ////// Oval 76 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval76Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval76Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval76Path.lineWidth = 1;
        [oval76Path stroke];


        //// Oval 77 Drawing
        UIBezierPath* oval77Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(360.5, 51.5, 20, 18)];
        [color3 setFill];
        [oval77Path fill];

        ////// Oval 77 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval77Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval77Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval77Path.lineWidth = 1;
        [oval77Path stroke];


        //// Oval 79 Drawing
        UIBezierPath* oval79Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(346, 50, 20, 16)];
        [color3 setFill];
        [oval79Path fill];

        ////// Oval 79 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval79Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval79Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval79Path.lineWidth = 1;
        [oval79Path stroke];


        //// Oval 80 Drawing
        UIBezierPath* oval80Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(328, 52.5, 20, 17)];
        [color3 setFill];
        [oval80Path fill];

        ////// Oval 80 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval80Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval80Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval80Path.lineWidth = 1;
        [oval80Path stroke];


        //// Oval 81 Drawing
        UIBezierPath* oval81Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(308, 57, 20, 17)];
        [color3 setFill];
        [oval81Path fill];

        ////// Oval 81 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval81Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval81Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval81Path.lineWidth = 1;
        [oval81Path stroke];


        //// Oval 82 Drawing
        UIBezierPath* oval82Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(315.5, 57.5, 21, 18)];
        [color3 setFill];
        [oval82Path fill];

        ////// Oval 82 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval82Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval82Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval82Path.lineWidth = 1;
        [oval82Path stroke];


        //// Oval 83 Drawing
        UIBezierPath* oval83Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(330.5, 58, 23, 17)];
        [color3 setFill];
        [oval83Path fill];

        ////// Oval 83 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval83Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval83Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval83Path.lineWidth = 1;
        [oval83Path stroke];


        //// Oval 84 Drawing
        UIBezierPath* oval84Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(366, 58, 21, 19)];
        [color3 setFill];
        [oval84Path fill];

        ////// Oval 84 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval84Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval84Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval84Path.lineWidth = 1;
        [oval84Path stroke];


        //// Oval 85 Drawing
        UIBezierPath* oval85Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(353.5, 55.5, 20, 15)];
        [color3 setFill];
        [oval85Path fill];

        ////// Oval 85 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval85Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval85Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval85Path.lineWidth = 1;
        [oval85Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 10
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 118 Drawing
        UIBezierPath* oval118Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(381, 50, 20, 18)];
        [color3 setFill];
        [oval118Path fill];

        ////// Oval 118 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval118Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval118Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval118Path.lineWidth = 1;
        [oval118Path stroke];


        //// Oval 119 Drawing
        UIBezierPath* oval119Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(395.5, 42.5, 20, 18)];
        [color3 setFill];
        [oval119Path fill];

        ////// Oval 119 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval119Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval119Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval119Path.lineWidth = 1;
        [oval119Path stroke];


        //// Oval 120 Drawing
        UIBezierPath* oval120Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(381, 41, 20, 16)];
        [color3 setFill];
        [oval120Path fill];

        ////// Oval 120 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval120Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval120Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval120Path.lineWidth = 1;
        [oval120Path stroke];


        //// Oval 121 Drawing
        UIBezierPath* oval121Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(363, 43.5, 20, 17)];
        [color3 setFill];
        [oval121Path fill];

        ////// Oval 121 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval121Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval121Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval121Path.lineWidth = 1;
        [oval121Path stroke];


        //// Oval 122 Drawing
        UIBezierPath* oval122Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(343, 52, 20, 17)];
        [color3 setFill];
        [oval122Path fill];

        ////// Oval 122 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval122Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval122Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval122Path.lineWidth = 1;
        [oval122Path stroke];


        //// Oval 123 Drawing
        UIBezierPath* oval123Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(350.5, 49.5, 21, 18)];
        [color3 setFill];
        [oval123Path fill];

        ////// Oval 123 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval123Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval123Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval123Path.lineWidth = 1;
        [oval123Path stroke];


        //// Oval 124 Drawing
        UIBezierPath* oval124Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(365.5, 49, 23, 17)];
        [color3 setFill];
        [oval124Path fill];

        ////// Oval 124 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval124Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval124Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval124Path.lineWidth = 1;
        [oval124Path stroke];


        //// Oval 125 Drawing
        UIBezierPath* oval125Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(401, 49, 21, 19)];
        [color3 setFill];
        [oval125Path fill];

        ////// Oval 125 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval125Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval125Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval125Path.lineWidth = 1;
        [oval125Path stroke];


        //// Oval 126 Drawing
        UIBezierPath* oval126Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(388.5, 46.5, 20, 15)];
        [color3 setFill];
        [oval126Path fill];

        ////// Oval 126 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval126Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval126Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval126Path.lineWidth = 1;
        [oval126Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 21 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 24.65, 137.34);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.4, 18.46)];
        [color17 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];

        CGContextRestoreGState(context);


        //// Oval 22 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 40.32, 123.53);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.1, 26.14)];
        [color17 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];

        CGContextRestoreGState(context);


        //// Oval 23 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 55.91, 117.07);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval23Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.91, 22.14)];
        [color17 setFill];
        [oval23Path fill];

        ////// Oval 23 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval23Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval23Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval23Path.lineWidth = 1;
        [oval23Path stroke];

        CGContextRestoreGState(context);


        //// Oval 24 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 123.6, 127.6);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.24, 20.11)];
        [color17 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];

        CGContextRestoreGState(context);


        //// Oval 25 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 205.87, 131.05);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.43, 22.16)];
        [color17 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];

        CGContextRestoreGState(context);


        //// Oval 26 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 193.73, 137.21);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.57, 20.13)];
        [color17 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];

        CGContextRestoreGState(context);


        //// Oval 27 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 174.74, 130.61);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.26, 24.15)];
        [color17 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];

        CGContextRestoreGState(context);


        //// Oval 28 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 137.34, 133.47);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.57, 22.16)];
        [color17 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];

        CGContextRestoreGState(context);


        //// Oval 29 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 120.18, 139.98);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.07, 20.14)];
        [color17 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];

        CGContextRestoreGState(context);


        //// Oval 30 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 107.1, 132.11);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval30Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.24, 20.11)];
        [color17 setFill];
        [oval30Path fill];

        ////// Oval 30 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval30Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval30Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval30Path.lineWidth = 1;
        [oval30Path stroke];

        CGContextRestoreGState(context);


        //// Oval 31 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 76.67, 134.66);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval31Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.26, 24.15)];
        [color17 setFill];
        [oval31Path fill];

        ////// Oval 31 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval31Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval31Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval31Path.lineWidth = 1;
        [oval31Path stroke];

        CGContextRestoreGState(context);


        //// Oval 32 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 96.31, 139.29);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.25, 21.11)];
        [color17 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];

        CGContextRestoreGState(context);


        //// Oval 33 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 181.51, 121.81);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.26, 25.15)];
        [color17 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];

        CGContextRestoreGState(context);


        //// Oval 34 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 159.36, 122.16);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.76, 23.13)];
        [color17 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];

        CGContextRestoreGState(context);


        //// Oval 35 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 96.38, 123.28);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.25, 21.11)];
        [color17 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];

        CGContextRestoreGState(context);


        //// Oval 36 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 76.35, 113.63);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval36Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.59, 25.16)];
        [color17 setFill];
        [oval36Path fill];

        ////// Oval 36 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval36Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval36Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval36Path.lineWidth = 1;
        [oval36Path stroke];

        CGContextRestoreGState(context);


        //// Oval 37 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 69.5, 124.95);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.91, 22.14)];
        [color17 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];

        CGContextRestoreGState(context);


        //// Oval 38 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 55.7, 134.55);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.76, 23.13)];
        [color17 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];

        CGContextRestoreGState(context);


        //// Oval 39 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 161.01, 139.22);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval39Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.57, 20.13)];
        [color17 setFill];
        [oval39Path fill];

        ////// Oval 39 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval39Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval39Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval39Path.lineWidth = 1;
        [oval39Path stroke];

        CGContextRestoreGState(context);


        //// Oval 40 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 40.92, 138.39);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval40Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21.06, 16.45)];
        [color17 setFill];
        [oval40Path fill];

        ////// Oval 40 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval40Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval40Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval40Path.lineWidth = 1;
        [oval40Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 12
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 140 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 42.82, 118.93);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval140Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.19, 22.38)];
        [color17 setFill];
        [oval140Path fill];

        ////// Oval 140 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval140Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval140Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval140Path.lineWidth = 1;
        [oval140Path stroke];

        CGContextRestoreGState(context);


        //// Oval 141 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 62.84, 120.11);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval141Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.5, 21.34)];
        [color17 setFill];
        [oval141Path fill];

        ////// Oval 141 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval141Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval141Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval141Path.lineWidth = 1;
        [oval141Path stroke];

        CGContextRestoreGState(context);


        //// Oval 142 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 85.41, 126.34);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval142Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19.8, 15.55)];
        [color17 setFill];
        [oval142Path fill];

        ////// Oval 142 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval142Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval142Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval142Path.lineWidth = 1;
        [oval142Path stroke];

        CGContextRestoreGState(context);


        //// Oval 143 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 96.45, 122);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval143Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.53, 20.34)];
        [color17 setFill];
        [oval143Path fill];

        ////// Oval 143 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval143Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval143Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval143Path.lineWidth = 1;
        [oval143Path stroke];

        CGContextRestoreGState(context);


        //// Oval 144 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 114.64, 123.76);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval144Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.02, 19.4)];
        [color17 setFill];
        [oval144Path fill];

        ////// Oval 144 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval144Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval144Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval144Path.lineWidth = 1;
        [oval144Path stroke];

        CGContextRestoreGState(context);


        //// Oval 145 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 130.53, 114.56);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval145Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19.7, 18.56)];
        [color17 setFill];
        [oval145Path fill];

        ////// Oval 145 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval145Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval145Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval145Path.lineWidth = 1;
        [oval145Path stroke];

        CGContextRestoreGState(context);


        //// Oval 146 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 134.72, 121.25);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval146Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21.01, 17.52)];
        [color17 setFill];
        [oval146Path fill];

        ////// Oval 146 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval146Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval146Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval146Path.lineWidth = 1;
        [oval146Path stroke];

        CGContextRestoreGState(context);


        //// Oval 147 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 61.65, 112.67);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval147Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.56, 19.34)];
        [color17 setFill];
        [oval147Path fill];

        ////// Oval 147 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval147Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval147Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval147Path.lineWidth = 1;
        [oval147Path stroke];

        CGContextRestoreGState(context);


        //// Oval 148 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 83.14, 110.6);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval148Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.02, 19.4)];
        [color17 setFill];
        [oval148Path fill];

        ////// Oval 148 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval148Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval148Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval148Path.lineWidth = 1;
        [oval148Path stroke];

        CGContextRestoreGState(context);


        //// Oval 149 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 103.39, 104.2);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval149Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.23, 21.38)];
        [color17 setFill];
        [oval149Path fill];

        ////// Oval 149 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval149Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval149Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval149Path.lineWidth = 1;
        [oval149Path stroke];

        CGContextRestoreGState(context);


        //// Oval 150 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 117.95, 111.74);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval150Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 20.94, 19.53)];
        [color17 setFill];
        [oval150Path fill];

        ////// Oval 150 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval150Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval150Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval150Path.lineWidth = 1;
        [oval150Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 7
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 71 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 105.56, 111.74);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval71Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.53, 22.58)];
        [color17 setFill];
        [oval71Path fill];

        ////// Oval 71 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval71Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval71Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval71Path.lineWidth = 1;
        [oval71Path stroke];

        CGContextRestoreGState(context);


        //// Oval 72 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 124.21, 112.91);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval72Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.74, 21.55)];
        [color17 setFill];
        [oval72Path fill];

        ////// Oval 72 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval72Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval72Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval72Path.lineWidth = 1;
        [oval72Path stroke];

        CGContextRestoreGState(context);


        //// Oval 73 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 145.28, 119.2);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval73Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 18.58, 15.69)];
        [color17 setFill];
        [oval73Path fill];

        ////// Oval 73 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval73Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval73Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval73Path.lineWidth = 1;
        [oval73Path stroke];

        CGContextRestoreGState(context);


        //// Oval 74 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 155.51, 114.79);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval74Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.76, 20.55)];
        [color17 setFill];
        [oval74Path fill];

        ////// Oval 74 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval74Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval74Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval74Path.lineWidth = 1;
        [oval74Path stroke];

        CGContextRestoreGState(context);


        //// Oval 75 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 172.46, 116.57);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval75Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.41, 19.59)];
        [color17 setFill];
        [oval75Path fill];

        ////// Oval 75 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval75Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval75Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval75Path.lineWidth = 1;
        [oval75Path stroke];

        CGContextRestoreGState(context);


        //// Oval 78 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 187.27, 107.42);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval78Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 18.52, 18.7)];
        [color17 setFill];
        [oval78Path fill];

        ////// Oval 78 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval78Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval78Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval78Path.lineWidth = 1;
        [oval78Path stroke];

        CGContextRestoreGState(context);


        //// Oval 107 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 191.18, 114.1);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval107Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19.72, 17.68)];
        [color17 setFill];
        [oval107Path fill];

        ////// Oval 107 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval107Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval107Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval107Path.lineWidth = 1;
        [oval107Path stroke];

        CGContextRestoreGState(context);


        //// Oval 108 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 123.11, 105.46);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval108Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.78, 19.55)];
        [color17 setFill];
        [oval108Path fill];

        ////// Oval 108 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval108Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval108Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval108Path.lineWidth = 1;
        [oval108Path stroke];

        CGContextRestoreGState(context);


        //// Oval 127 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 143.13, 103.41);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval127Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.41, 19.59)];
        [color17 setFill];
        [oval127Path fill];

        ////// Oval 127 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval127Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval127Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval127Path.lineWidth = 1;
        [oval127Path stroke];

        CGContextRestoreGState(context);


        //// Oval 128 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 161.97, 97);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval128Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.55, 21.58)];
        [color17 setFill];
        [oval128Path fill];

        ////// Oval 128 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval128Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval128Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval128Path.lineWidth = 1;
        [oval128Path stroke];

        CGContextRestoreGState(context);


        //// Oval 129 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 175.55, 104.59);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval129Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19.68, 19.68)];
        [color17 setFill];
        [oval129Path fill];

        ////// Oval 129 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval129Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval129Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval129Path.lineWidth = 1;
        [oval129Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 13
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 176 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 170.94, 70.57);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval176Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.77, 0.68, 23.16, 18.23)];
        [color17 setFill];
        [oval176Path fill];

        ////// Oval 176 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval176Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval176Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval176Path.lineWidth = 1;
        [oval176Path stroke];

        CGContextRestoreGState(context);


        //// Oval 177 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 150.93, 56.8);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval177Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-1.09, 0.81, 27.77, 25.87)];
        [color17 setFill];
        [oval177Path fill];

        ////// Oval 177 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval177Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval177Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval177Path.lineWidth = 1;
        [oval177Path stroke];

        CGContextRestoreGState(context);


        //// Oval 179 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 73.31, 60.82);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval179Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.84, 0.64, 21.99, 19.9)];
        [color17 setFill];
        [oval179Path fill];

        ////// Oval 179 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval179Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval179Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval179Path.lineWidth = 1;
        [oval179Path stroke];

        CGContextRestoreGState(context);


        //// Oval 181 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 0.93, 70.44);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval181Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.84, 0.71, 24.32, 19.88)];
        [color17 setFill];
        [oval181Path fill];

        ////// Oval 181 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval181Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval181Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval181Path.lineWidth = 1;
        [oval181Path stroke];

        CGContextRestoreGState(context);


        //// Oval 182 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 15.41, 63.89);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval182Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-1.01, 0.84, 28.95, 23.86)];
        [color17 setFill];
        [oval182Path fill];

        ////// Oval 182 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval182Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval182Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval182Path.lineWidth = 1;
        [oval182Path stroke];

        CGContextRestoreGState(context);


        //// Oval 183 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 50.37, 66.78);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval183Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.93, 0.92, 31.29, 21.85)];
        [color17 setFill];
        [oval183Path fill];

        ////// Oval 183 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval183Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval183Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval183Path.lineWidth = 1;
        [oval183Path stroke];

        CGContextRestoreGState(context);


        //// Oval 184 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 70.91, 73.25);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval184Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.84, 0.81, 27.81, 19.87)];
        [color17 setFill];
        [oval184Path fill];

        ////// Oval 184 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval184Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval184Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval184Path.lineWidth = 1;
        [oval184Path stroke];

        CGContextRestoreGState(context);


        //// Oval 185 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 89.8, 65.33);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval185Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.84, 0.64, 21.99, 19.9)];
        [color17 setFill];
        [oval185Path fill];

        ////// Oval 185 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval185Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval185Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval185Path.lineWidth = 1;
        [oval185Path stroke];

        CGContextRestoreGState(context);


        //// Oval 186 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 113.39, 67.95);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval186Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-1.01, 0.84, 28.95, 23.86)];
        [color17 setFill];
        [oval186Path fill];

        ////// Oval 186 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval186Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval186Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval186Path.lineWidth = 1;
        [oval186Path stroke];

        CGContextRestoreGState(context);


        //// Oval 187 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 100.61, 72.51);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval187Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.88, 0.64, 21.99, 20.9)];
        [color17 setFill];
        [oval187Path fill];

        ////// Oval 187 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval187Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval187Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval187Path.lineWidth = 1;
        [oval187Path stroke];

        CGContextRestoreGState(context);


        //// Oval 188 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 8.69, 55.09);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval188Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-1.05, 0.84, 28.94, 24.86)];
        [color17 setFill];
        [oval188Path fill];

        ////// Oval 188 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval188Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval188Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval188Path.lineWidth = 1;
        [oval188Path stroke];

        CGContextRestoreGState(context);


        //// Oval 190 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 100.54, 56.5);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval190Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.88, 0.64, 21.99, 20.9)];
        [color17 setFill];
        [oval190Path fill];

        ////// Oval 190 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval190Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval190Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval190Path.lineWidth = 1;
        [oval190Path stroke];

        CGContextRestoreGState(context);


        //// Oval 193 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 137.78, 67.8);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval193Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.96, 0.74, 25.47, 22.88)];
        [color17 setFill];
        [oval193Path fill];

        ////// Oval 193 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval193Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval193Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval193Path.lineWidth = 1;
        [oval193Path stroke];

        CGContextRestoreGState(context);


        //// Oval 194 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 33.62, 72.46);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval194Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.84, 0.71, 24.32, 19.88)];
        [color17 setFill];
        [oval194Path fill];

        ////// Oval 194 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval194Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval194Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval194Path.lineWidth = 1;
        [oval194Path stroke];

        CGContextRestoreGState(context);


        //// Oval 195 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 156.92, 71.59);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval195Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.69, 0.61, 20.85, 16.24)];
        [color17 setFill];
        [oval195Path fill];

        ////// Oval 195 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval195Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval195Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval195Path.lineWidth = 1;
        [oval195Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 41 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 165.32, 56.99);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval41Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.69, 0.68, 20.72, 18.32)];
        [color17 setFill];
        [oval41Path fill];

        ////// Oval 41 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval41Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval41Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval41Path.lineWidth = 1;
        [oval41Path stroke];

        CGContextRestoreGState(context);


        //// Oval 42 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 147.46, 43.21);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval42Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.97, 0.81, 24.86, 25.97)];
        [color17 setFill];
        [oval42Path fill];

        ////// Oval 42 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval42Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval42Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval42Path.lineWidth = 1;
        [oval42Path stroke];

        CGContextRestoreGState(context);


        //// Oval 43 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 134.49, 36.74);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval43Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.83, 0.78, 23.83, 21.97)];
        [color17 setFill];
        [oval43Path fill];

        ////// Oval 43 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval43Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval43Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval43Path.lineWidth = 1;
        [oval43Path stroke];

        CGContextRestoreGState(context);


        //// Oval 44 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 78.28, 47.24);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval44Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.75, 0.64, 19.68, 19.98)];
        [color17 setFill];
        [oval44Path fill];

        ////// Oval 44 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval44Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval44Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval44Path.lineWidth = 1;
        [oval44Path stroke];

        CGContextRestoreGState(context);


        //// Oval 46 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 13.75, 56.86);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval46Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.75, 0.71, 21.76, 19.97)];
        [color17 setFill];
        [oval46Path fill];

        ////// Oval 46 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval46Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval46Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval46Path.lineWidth = 1;
        [oval46Path stroke];

        CGContextRestoreGState(context);


        //// Oval 47 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 26.65, 50.29);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval47Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.9, 0.84, 25.9, 23.97)];
        [color17 setFill];
        [oval47Path fill];

        ////// Oval 47 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval47Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval47Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval47Path.lineWidth = 1;
        [oval47Path stroke];

        CGContextRestoreGState(context);


        //// Oval 48 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 57.82, 53.17);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval48Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.83, 0.92, 27.98, 21.97)];
        [color17 setFill];
        [oval48Path fill];

        ////// Oval 48 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval48Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval48Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval48Path.lineWidth = 1;
        [oval48Path stroke];

        CGContextRestoreGState(context);


        //// Oval 49 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 76.14, 59.65);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval49Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.76, 0.81, 24.87, 19.97)];
        [color17 setFill];
        [oval49Path fill];

        ////// Oval 49 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval49Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval49Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval49Path.lineWidth = 1;
        [oval49Path stroke];

        CGContextRestoreGState(context);


        //// Oval 50 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 92.98, 51.75);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval50Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.75, 0.64, 19.68, 19.98)];
        [color17 setFill];
        [oval50Path fill];

        ////// Oval 50 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval50Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval50Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval50Path.lineWidth = 1;
        [oval50Path stroke];

        CGContextRestoreGState(context);


        //// Oval 51 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 113.99, 54.34);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval51Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.9, 0.84, 25.9, 23.97)];
        [color17 setFill];
        [oval51Path fill];

        ////// Oval 51 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval51Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval51Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval51Path.lineWidth = 1;
        [oval51Path stroke];

        CGContextRestoreGState(context);


        //// Oval 52 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 102.62, 58.93);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval52Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.78, 0.64, 19.68, 20.98)];
        [color17 setFill];
        [oval52Path fill];

        ////// Oval 52 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval52Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval52Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval52Path.lineWidth = 1;
        [oval52Path stroke];

        CGContextRestoreGState(context);


        //// Oval 53 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 20.66, 41.48);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval53Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.94, 0.84, 25.9, 24.97)];
        [color17 setFill];
        [oval53Path fill];

        ////// Oval 53 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval53Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval53Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval53Path.lineWidth = 1;
        [oval53Path stroke];

        CGContextRestoreGState(context);


        //// Oval 60 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 43.43, 41.82);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval60Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.86, 0.74, 22.79, 22.97)];
        [color17 setFill];
        [oval60Path fill];

        ////// Oval 60 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval60Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval60Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval60Path.lineWidth = 1;
        [oval60Path stroke];

        CGContextRestoreGState(context);


        //// Oval 61 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 102.56, 42.92);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval61Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.78, 0.64, 19.68, 20.98)];
        [color17 setFill];
        [oval61Path fill];

        ////// Oval 61 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval61Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval61Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval61Path.lineWidth = 1;
        [oval61Path stroke];

        CGContextRestoreGState(context);


        //// Oval 62 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 112.23, 33.32);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval62Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.94, 0.91, 27.98, 24.97)];
        [color17 setFill];
        [oval62Path fill];

        ////// Oval 62 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval62Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval62Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval62Path.lineWidth = 1;
        [oval62Path stroke];

        CGContextRestoreGState(context);


        //// Oval 65 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 122.39, 44.62);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval65Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.83, 0.78, 23.83, 21.97)];
        [color17 setFill];
        [oval65Path fill];

        ////// Oval 65 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval65Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval65Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval65Path.lineWidth = 1;
        [oval65Path stroke];

        CGContextRestoreGState(context);


        //// Oval 68 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 135.75, 54.21);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval68Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.86, 0.74, 22.79, 22.97)];
        [color17 setFill];
        [oval68Path fill];

        ////// Oval 68 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval68Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval68Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval68Path.lineWidth = 1;
        [oval68Path stroke];

        CGContextRestoreGState(context);


        //// Oval 69 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 42.89, 58.87);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval69Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.75, 0.71, 21.76, 19.97)];
        [color17 setFill];
        [oval69Path fill];

        ////// Oval 69 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval69Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval69Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval69Path.lineWidth = 1;
        [oval69Path stroke];

        CGContextRestoreGState(context);


        //// Oval 70 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 152.83, 58.02);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval70Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.62, 0.61, 18.65, 16.32)];
        [color17 setFill];
        [oval70Path fill];

        ////// Oval 70 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval70Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval70Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval70Path.lineWidth = 1;
        [oval70Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 8
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 130 Drawing
        UIBezierPath* oval130Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(370.5, 118, 17, 18)];
        [color17 setFill];
        [oval130Path fill];

        ////// Oval 130 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval130Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval130Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval130Path.lineWidth = 1;
        [oval130Path stroke];


        //// Oval 131 Drawing
        UIBezierPath* oval131Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(351.5, 115, 23, 24)];
        [color17 setFill];
        [oval131Path fill];

        ////// Oval 131 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval131Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval131Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval131Path.lineWidth = 1;
        [oval131Path stroke];


        //// Oval 132 Drawing
        UIBezierPath* oval132Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(364.5, 129, 20, 22)];
        [color17 setFill];
        [oval132Path fill];

        ////// Oval 132 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval132Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval132Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval132Path.lineWidth = 1;
        [oval132Path stroke];


        //// Oval 135 Drawing
        UIBezierPath* oval135Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(248.5, 131.5, 25, 24)];
        [color17 setFill];
        [oval135Path fill];

        ////// Oval 135 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval135Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval135Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval135Path.lineWidth = 1;
        [oval135Path stroke];


        //// Oval 136 Drawing
        UIBezierPath* oval136Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(264, 140.5, 21, 20)];
        [color17 setFill];
        [oval136Path fill];

        ////// Oval 136 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval136Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval136Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval136Path.lineWidth = 1;
        [oval136Path stroke];


        //// Oval 137 Drawing
        UIBezierPath* oval137Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(278.5, 135.5, 27, 22)];
        [color17 setFill];
        [oval137Path fill];

        ////// Oval 137 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval137Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval137Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval137Path.lineWidth = 1;
        [oval137Path stroke];


        //// Oval 151 Drawing
        UIBezierPath* oval151Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(294, 140.5, 28, 24)];
        [color17 setFill];
        [oval151Path fill];

        ////// Oval 151 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval151Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval151Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval151Path.lineWidth = 1;
        [oval151Path stroke];


        //// Oval 152 Drawing
        UIBezierPath* oval152Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(312.5, 135, 19, 20)];
        [color17 setFill];
        [oval152Path fill];

        ////// Oval 152 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval152Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval152Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval152Path.lineWidth = 1;
        [oval152Path stroke];


        //// Oval 153 Drawing
        UIBezierPath* oval153Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(331.5, 137.5, 27, 26)];
        [color17 setFill];
        [oval153Path fill];

        ////// Oval 153 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval153Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval153Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval153Path.lineWidth = 1;
        [oval153Path stroke];


        //// Oval 154 Drawing
        UIBezierPath* oval154Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(322, 142.5, 19, 21)];
        [color17 setFill];
        [oval154Path fill];

        ////// Oval 154 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval154Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval154Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval154Path.lineWidth = 1;
        [oval154Path stroke];


        //// Oval 156 Drawing
        UIBezierPath* oval156Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(264, 122.5, 24, 25)];
        [color17 setFill];
        [oval156Path fill];

        ////// Oval 156 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval156Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval156Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval156Path.lineWidth = 1;
        [oval156Path stroke];


        //// Oval 158 Drawing
        UIBezierPath* oval158Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(305.5, 127, 20, 24)];
        [color17 setFill];
        [oval158Path fill];

        ////// Oval 158 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval158Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval158Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval158Path.lineWidth = 1;
        [oval158Path stroke];


        //// Oval 159 Drawing
        UIBezierPath* oval159Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(322, 126.5, 19, 21)];
        [color17 setFill];
        [oval159Path fill];

        ////// Oval 159 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval159Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval159Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval159Path.lineWidth = 1;
        [oval159Path stroke];


        //// Oval 161 Drawing
        UIBezierPath* oval161Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(341, 129, 23, 22)];
        [color17 setFill];
        [oval161Path fill];

        ////// Oval 161 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval161Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval161Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval161Path.lineWidth = 1;
        [oval161Path stroke];


        //// Oval 162 Drawing
        UIBezierPath* oval162Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(353.5, 139, 22, 23)];
        [color17 setFill];
        [oval162Path fill];

        ////// Oval 162 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval162Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval162Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval162Path.lineWidth = 1;
        [oval162Path stroke];


        //// Oval 163 Drawing
        UIBezierPath* oval163Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(369.5, 142, 20, 19)];
        [color17 setFill];
        [oval163Path fill];

        ////// Oval 163 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval163Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval163Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval163Path.lineWidth = 1;
        [oval163Path stroke];


        //// Oval 164 Drawing
        UIBezierPath* oval164Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(381, 129, 18, 20)];
        [color17 setFill];
        [oval164Path fill];

        ////// Oval 164 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval164Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval164Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval164Path.lineWidth = 1;
        [oval164Path stroke];


        //// Oval 165 Drawing
        UIBezierPath* oval165Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(383, 144, 16, 15)];
        [color17 setFill];
        [oval165Path fill];

        ////// Oval 165 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval165Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval165Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval165Path.lineWidth = 1;
        [oval165Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 11
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 155 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 273.98, 122.82);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval155Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22, 23)];
        [color17 setFill];
        [oval155Path fill];

        ////// Oval 155 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval155Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval155Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval155Path.lineWidth = 1;
        [oval155Path stroke];

        CGContextRestoreGState(context);


        //// Oval 166 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 289.73, 123.96);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval166Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23, 22)];
        [color17 setFill];
        [oval166Path fill];

        ////// Oval 166 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval166Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval166Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval166Path.lineWidth = 1;
        [oval166Path stroke];

        CGContextRestoreGState(context);


        //// Oval 167 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 307.61, 130.39);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval167Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 16, 16)];
        [color17 setFill];
        [oval167Path fill];

        ////// Oval 167 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval167Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval167Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval167Path.lineWidth = 1;
        [oval167Path stroke];

        CGContextRestoreGState(context);


        //// Oval 168 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 316.13, 125.85);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval168Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23, 21)];
        [color17 setFill];
        [oval168Path fill];

        ////// Oval 168 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval168Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval168Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval168Path.lineWidth = 1;
        [oval168Path stroke];

        CGContextRestoreGState(context);


        //// Oval 169 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 330.45, 127.67);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval169Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21, 20)];
        [color17 setFill];
        [oval169Path fill];

        ////// Oval 169 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval169Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval169Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval169Path.lineWidth = 1;
        [oval169Path stroke];

        CGContextRestoreGState(context);


        //// Oval 170 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 342.97, 118.62);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval170Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 16, 19)];
        [color17 setFill];
        [oval170Path fill];

        ////// Oval 170 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval170Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval170Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval170Path.lineWidth = 1;
        [oval170Path stroke];

        CGContextRestoreGState(context);


        //// Oval 171 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 346.28, 125.27);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval171Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 17, 18)];
        [color17 setFill];
        [oval171Path fill];

        ////// Oval 171 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval171Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval171Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval171Path.lineWidth = 1;
        [oval171Path stroke];

        CGContextRestoreGState(context);


        //// Oval 172 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 288.84, 116.52);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval172Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23, 20)];
        [color17 setFill];
        [oval172Path fill];

        ////// Oval 172 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval172Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval172Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval172Path.lineWidth = 1;
        [oval172Path stroke];

        CGContextRestoreGState(context);


        //// Oval 173 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 305.72, 114.5);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval173Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21, 20)];
        [color17 setFill];
        [oval173Path fill];

        ////// Oval 173 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval173Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval173Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval173Path.lineWidth = 1;
        [oval173Path stroke];

        CGContextRestoreGState(context);


        //// Oval 174 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 321.57, 108.08);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval174Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22, 22)];
        [color17 setFill];
        [oval174Path fill];

        ////// Oval 174 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval174Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval174Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval174Path.lineWidth = 1;
        [oval174Path stroke];

        CGContextRestoreGState(context);


        //// Oval 175 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 333.06, 115.77);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval175Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 17, 20)];
        [color17 setFill];
        [oval175Path fill];

        ////// Oval 175 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval175Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval175Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval175Path.lineWidth = 1;
        [oval175Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas10
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color17 = [UIColor colorWithRed: 0.333 green: 0.333 blue: 0.333 alpha: 0.86];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 13
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 176 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 170.2, 82.96);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval176Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.7, 0.68, 20.99, 13.05)];
        [color17 setFill];
        [oval176Path fill];

        ////// Oval 176 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval176Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval176Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval176Path.lineWidth = 1;
        [oval176Path stroke];

        CGContextRestoreGState(context);


        //// Oval 177 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 152.01, 72.98);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval177Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.98, 0.81, 25.14, 18.55)];
        [color17 setFill];
        [oval177Path fill];

        ////// Oval 177 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval177Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval177Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval177Path.lineWidth = 1;
        [oval177Path stroke];

        CGContextRestoreGState(context);


        //// Oval 178 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 138.71, 68.3);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval178Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.84, 0.78, 24.13, 15.66)];
        [color17 setFill];
        [oval178Path fill];

        ////// Oval 178 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval178Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval178Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval178Path.lineWidth = 1;
        [oval178Path stroke];

        CGContextRestoreGState(context);


        //// Oval 179 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 81.22, 75.9);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval179Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.76, 0.64, 19.91, 14.26)];
        [color17 setFill];
        [oval179Path fill];

        ////// Oval 179 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval179Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval179Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval179Path.lineWidth = 1;
        [oval179Path stroke];

        CGContextRestoreGState(context);


        //// Oval 180 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 0.9, 76.94);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval180Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.99, 0.88, 27.26, 18.52)];
        [color17 setFill];
        [oval180Path fill];

        ////// Oval 180 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval180Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval180Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval180Path.lineWidth = 1;
        [oval180Path stroke];

        CGContextRestoreGState(context);


        //// Oval 181 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 15.24, 82.86);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval181Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.76, 0.71, 22.03, 14.24)];
        [color17 setFill];
        [oval181Path fill];

        ////// Oval 181 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval181Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval181Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval181Path.lineWidth = 1;
        [oval181Path stroke];

        CGContextRestoreGState(context);


        //// Oval 182 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 28.46, 78.11);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval182Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.91, 0.84, 26.23, 17.09)];
        [color17 setFill];
        [oval182Path fill];

        ////// Oval 182 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval182Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval182Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval182Path.lineWidth = 1;
        [oval182Path stroke];

        CGContextRestoreGState(context);


        //// Oval 183 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 60.32, 80.2);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval183Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.84, 0.92, 28.37, 15.61)];
        [color17 setFill];
        [oval183Path fill];

        ////// Oval 183 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval183Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval183Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval183Path.lineWidth = 1;
        [oval183Path stroke];

        CGContextRestoreGState(context);


        //// Oval 184 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 79.03, 84.89);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval184Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.77, 0.81, 25.21, 14.2)];
        [color17 setFill];
        [oval184Path fill];

        ////// Oval 184 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval184Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval184Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval184Path.lineWidth = 1;
        [oval184Path stroke];

        CGContextRestoreGState(context);


        //// Oval 185 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 96.24, 79.16);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval185Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.76, 0.64, 19.91, 14.26)];
        [color17 setFill];
        [oval185Path fill];

        ////// Oval 185 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval185Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval185Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval185Path.lineWidth = 1;
        [oval185Path stroke];

        CGContextRestoreGState(context);


        //// Oval 186 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 117.77, 81.05);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval186Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.91, 0.84, 26.23, 17.09)];
        [color17 setFill];
        [oval186Path fill];

        ////// Oval 186 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval186Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval186Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval186Path.lineWidth = 1;
        [oval186Path stroke];

        CGContextRestoreGState(context);


        //// Oval 187 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 106.11, 84.36);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval187Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.79, 0.64, 19.9, 14.98)];
        [color17 setFill];
        [oval187Path fill];

        ////// Oval 187 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval187Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval187Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval187Path.lineWidth = 1;
        [oval187Path stroke];

        CGContextRestoreGState(context);


        //// Oval 188 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 22.35, 71.74);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval188Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.95, 0.84, 26.21, 17.81)];
        [color17 setFill];
        [oval188Path fill];

        ////// Oval 188 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval188Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval188Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval188Path.lineWidth = 1;
        [oval188Path stroke];

        CGContextRestoreGState(context);


        //// Oval 189 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 45.61, 71.98);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval189Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.87, 0.74, 23.06, 16.4)];
        [color17 setFill];
        [oval189Path fill];

        ////// Oval 189 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval189Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval189Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval189Path.lineWidth = 1;
        [oval189Path stroke];

        CGContextRestoreGState(context);


        //// Oval 190 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 106.05, 72.77);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval190Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.79, 0.64, 19.9, 14.98)];
        [color17 setFill];
        [oval190Path fill];

        ////// Oval 190 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval190Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval190Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval190Path.lineWidth = 1;
        [oval190Path stroke];

        CGContextRestoreGState(context);


        //// Oval 191 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 115.98, 65.84);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval191Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.95, 0.91, 28.33, 17.79)];
        [color17 setFill];
        [oval191Path fill];

        ////// Oval 191 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval191Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval191Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval191Path.lineWidth = 1;
        [oval191Path stroke];

        CGContextRestoreGState(context);


        //// Oval 192 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 126.33, 74.01);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval192Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.84, 0.78, 24.13, 15.66)];
        [color17 setFill];
        [oval192Path fill];

        ////// Oval 192 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval192Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval192Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval192Path.lineWidth = 1;
        [oval192Path stroke];

        CGContextRestoreGState(context);


        //// Oval 193 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 140, 80.95);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval193Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.87, 0.74, 23.06, 16.4)];
        [color17 setFill];
        [oval193Path fill];

        ////// Oval 193 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval193Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval193Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval193Path.lineWidth = 1;
        [oval193Path stroke];

        CGContextRestoreGState(context);


        //// Oval 194 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 45.03, 84.32);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval194Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.76, 0.71, 22.03, 14.24)];
        [color17 setFill];
        [oval194Path fill];

        ////// Oval 194 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval194Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval194Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval194Path.lineWidth = 1;
        [oval194Path stroke];

        CGContextRestoreGState(context);


        //// Oval 195 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 157.41, 83.7);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval195Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.62, 0.61, 18.89, 11.62)];
        [color17 setFill];
        [oval195Path fill];

        ////// Oval 195 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval195Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval195Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval195Path.lineWidth = 1;
        [oval195Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 104 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -19.35, 170);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval104Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.21, 18.71)];
        [color17 setFill];
        [oval104Path fill];

        ////// Oval 104 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval104Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval104Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval104Path.lineWidth = 1;
        [oval104Path stroke];

        CGContextRestoreGState(context);


        //// Oval 105 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -4.42, 155.97);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval105Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.66, 26.51)];
        [color17 setFill];
        [oval105Path fill];

        ////// Oval 105 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval105Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval105Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval105Path.lineWidth = 1;
        [oval105Path stroke];

        CGContextRestoreGState(context);


        //// Oval 138 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 10.39, 149.4);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval138Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.54, 22.44)];
        [color17 setFill];
        [oval138Path fill];

        ////// Oval 138 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval138Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval138Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval138Path.lineWidth = 1;
        [oval138Path stroke];

        CGContextRestoreGState(context);


        //// Oval 97 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 74.75, 160.1);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval97Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21.1, 20.4)];
        [color17 setFill];
        [oval97Path fill];

        ////// Oval 97 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval97Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval97Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval97Path.lineWidth = 1;
        [oval97Path stroke];

        CGContextRestoreGState(context);


        //// Oval 86 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 151.14, 161.51);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval86Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.88, 26.52)];
        [color17 setFill];
        [oval86Path fill];

        ////// Oval 86 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval86Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval86Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval86Path.lineWidth = 1;
        [oval86Path stroke];

        CGContextRestoreGState(context);


        //// Oval 87 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 141.42, 169.86);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval87Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.32, 20.4)];
        [color17 setFill];
        [oval87Path fill];

        ////// Oval 87 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval87Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval87Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval87Path.lineWidth = 1;
        [oval87Path stroke];

        CGContextRestoreGState(context);


        //// Oval 88 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 123.38, 163.17);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval88Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.76, 24.48)];
        [color17 setFill];
        [oval88Path fill];

        ////// Oval 88 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval88Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval88Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval88Path.lineWidth = 1;
        [oval88Path stroke];

        CGContextRestoreGState(context);


        //// Oval 90 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 87.81, 166.09);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval90Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.97, 22.46)];
        [color17 setFill];
        [oval90Path fill];

        ////// Oval 90 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval90Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval90Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval90Path.lineWidth = 1;
        [oval90Path stroke];

        CGContextRestoreGState(context);


        //// Oval 91 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 71.5, 172.69);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval91Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.64, 20.41)];
        [color17 setFill];
        [oval91Path fill];

        ////// Oval 91 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval91Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval91Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval91Path.lineWidth = 1;
        [oval91Path stroke];

        CGContextRestoreGState(context);


        //// Oval 92 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 59.06, 164.68);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval92Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21.1, 20.4)];
        [color17 setFill];
        [oval92Path fill];

        ////// Oval 92 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval92Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval92Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval92Path.lineWidth = 1;
        [oval92Path stroke];

        CGContextRestoreGState(context);


        //// Oval 93 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 30.13, 167.29);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval93Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.76, 24.48)];
        [color17 setFill];
        [oval93Path fill];

        ////// Oval 93 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval93Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval93Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval93Path.lineWidth = 1;
        [oval93Path stroke];

        CGContextRestoreGState(context);


        //// Oval 94 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 48.8, 171.98);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval94Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21.11, 21.41)];
        [color17 setFill];
        [oval94Path fill];

        ////// Oval 94 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval94Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval94Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval94Path.lineWidth = 1;
        [oval94Path stroke];

        CGContextRestoreGState(context);


        //// Oval 95 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 129.81, 154.22);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval95Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.77, 25.5)];
        [color17 setFill];
        [oval95Path fill];

        ////// Oval 95 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval95Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval95Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval95Path.lineWidth = 1;
        [oval95Path stroke];

        CGContextRestoreGState(context);


        //// Oval 96 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 108.75, 154.57);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval96Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.44, 23.46)];
        [color17 setFill];
        [oval96Path fill];

        ////// Oval 96 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval96Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval96Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval96Path.lineWidth = 1;
        [oval96Path stroke];

        CGContextRestoreGState(context);


        //// Oval 99 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 48.87, 155.7);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval99Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21.11, 21.41)];
        [color17 setFill];
        [oval99Path fill];

        ////// Oval 99 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval99Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval99Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval99Path.lineWidth = 1;
        [oval99Path stroke];

        CGContextRestoreGState(context);


        //// Oval 100 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 29.83, 145.91);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval100Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.98, 25.51)];
        [color17 setFill];
        [oval100Path fill];

        ////// Oval 100 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval100Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval100Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval100Path.lineWidth = 1;
        [oval100Path stroke];

        CGContextRestoreGState(context);


        //// Oval 102 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 23.31, 157.41);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval102Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.54, 22.44)];
        [color17 setFill];
        [oval102Path fill];

        ////// Oval 102 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval102Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval102Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval102Path.lineWidth = 1;
        [oval102Path stroke];

        CGContextRestoreGState(context);


        //// Oval 103 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 10.19, 167.17);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval103Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.44, 23.46)];
        [color17 setFill];
        [oval103Path fill];

        ////// Oval 103 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval103Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval103Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval103Path.lineWidth = 1;
        [oval103Path stroke];

        CGContextRestoreGState(context);


        //// Oval 89 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 110.31, 171.92);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval89Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.32, 20.4)];
        [color17 setFill];
        [oval89Path fill];

        ////// Oval 89 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval89Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval89Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval89Path.lineWidth = 1;
        [oval89Path stroke];

        CGContextRestoreGState(context);


        //// Oval 139 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -3.87, 171.06);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval139Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19.99, 16.67)];
        [color17 setFill];
        [oval139Path fill];

        ////// Oval 139 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval139Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval139Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval139Path.lineWidth = 1;
        [oval139Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 9
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 109 Drawing
        UIBezierPath* oval109Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(385, 88, 22, 19)];
        [color3 setFill];
        [oval109Path fill];

        ////// Oval 109 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval109Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval109Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval109Path.lineWidth = 1;
        [oval109Path stroke];


        //// Oval 110 Drawing
        UIBezierPath* oval110Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(400.5, 79.5, 22, 19)];
        [color3 setFill];
        [oval110Path fill];

        ////// Oval 110 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval110Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval110Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval110Path.lineWidth = 1;
        [oval110Path stroke];


        //// Oval 111 Drawing
        UIBezierPath* oval111Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(385, 78, 22, 17)];
        [color3 setFill];
        [oval111Path fill];

        ////// Oval 111 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval111Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval111Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval111Path.lineWidth = 1;
        [oval111Path stroke];


        //// Oval 112 Drawing
        UIBezierPath* oval112Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(365, 80.5, 22, 18)];
        [color3 setFill];
        [oval112Path fill];

        ////// Oval 112 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval112Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval112Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval112Path.lineWidth = 1;
        [oval112Path stroke];


        //// Oval 113 Drawing
        UIBezierPath* oval113Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(343, 90, 22, 18)];
        [color3 setFill];
        [oval113Path fill];

        ////// Oval 113 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval113Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval113Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval113Path.lineWidth = 1;
        [oval113Path stroke];


        //// Oval 114 Drawing
        UIBezierPath* oval114Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(351.5, 87.5, 23, 19)];
        [color3 setFill];
        [oval114Path fill];

        ////// Oval 114 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval114Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval114Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval114Path.lineWidth = 1;
        [oval114Path stroke];


        //// Oval 115 Drawing
        UIBezierPath* oval115Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(367.5, 87, 26, 18)];
        [color3 setFill];
        [oval115Path fill];

        ////// Oval 115 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval115Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval115Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval115Path.lineWidth = 1;
        [oval115Path stroke];


        //// Oval 116 Drawing
        UIBezierPath* oval116Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(407, 87, 23, 20)];
        [color3 setFill];
        [oval116Path fill];

        ////// Oval 116 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval116Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval116Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval116Path.lineWidth = 1;
        [oval116Path stroke];


        //// Oval 117 Drawing
        UIBezierPath* oval117Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(393.5, 83.5, 22, 16)];
        [color3 setFill];
        [oval117Path fill];

        ////// Oval 117 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval117Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval117Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval117Path.lineWidth = 1;
        [oval117Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 76 Drawing
        UIBezierPath* oval76Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(348, 76, 21, 21)];
        [color3 setFill];
        [oval76Path fill];

        ////// Oval 76 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval76Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval76Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval76Path.lineWidth = 1;
        [oval76Path stroke];


        //// Oval 77 Drawing
        UIBezierPath* oval77Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(363.5, 67.5, 21, 21)];
        [color3 setFill];
        [oval77Path fill];

        ////// Oval 77 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval77Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval77Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval77Path.lineWidth = 1;
        [oval77Path stroke];


        //// Oval 79 Drawing
        UIBezierPath* oval79Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(348, 66, 21, 18)];
        [color3 setFill];
        [oval79Path fill];

        ////// Oval 79 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval79Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval79Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval79Path.lineWidth = 1;
        [oval79Path stroke];


        //// Oval 80 Drawing
        UIBezierPath* oval80Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(329, 68.5, 21, 20)];
        [color3 setFill];
        [oval80Path fill];

        ////// Oval 80 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval80Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval80Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval80Path.lineWidth = 1;
        [oval80Path stroke];


        //// Oval 81 Drawing
        UIBezierPath* oval81Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(308, 77, 21, 19)];
        [color3 setFill];
        [oval81Path fill];

        ////// Oval 81 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval81Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval81Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval81Path.lineWidth = 1;
        [oval81Path stroke];


        //// Oval 82 Drawing
        UIBezierPath* oval82Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(315.5, 74.5, 22, 21)];
        [color3 setFill];
        [oval82Path fill];

        ////// Oval 82 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval82Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval82Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval82Path.lineWidth = 1;
        [oval82Path stroke];


        //// Oval 83 Drawing
        UIBezierPath* oval83Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(331.5, 75, 24, 20)];
        [color3 setFill];
        [oval83Path fill];

        ////// Oval 83 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval83Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval83Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval83Path.lineWidth = 1;
        [oval83Path stroke];


        //// Oval 84 Drawing
        UIBezierPath* oval84Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(369, 75, 22, 22)];
        [color3 setFill];
        [oval84Path fill];

        ////// Oval 84 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval84Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval84Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval84Path.lineWidth = 1;
        [oval84Path stroke];


        //// Oval 85 Drawing
        UIBezierPath* oval85Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(355.5, 72.5, 21, 17)];
        [color3 setFill];
        [oval85Path fill];

        ////// Oval 85 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval85Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval85Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval85Path.lineWidth = 1;
        [oval85Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 10
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 118 Drawing
        UIBezierPath* oval118Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(385, 67, 22, 21)];
        [color3 setFill];
        [oval118Path fill];

        ////// Oval 118 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval118Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval118Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval118Path.lineWidth = 1;
        [oval118Path stroke];


        //// Oval 119 Drawing
        UIBezierPath* oval119Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(400.5, 58.5, 22, 21)];
        [color3 setFill];
        [oval119Path fill];

        ////// Oval 119 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval119Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval119Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval119Path.lineWidth = 1;
        [oval119Path stroke];


        //// Oval 120 Drawing
        UIBezierPath* oval120Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(385, 57, 22, 18)];
        [color3 setFill];
        [oval120Path fill];

        ////// Oval 120 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval120Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval120Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval120Path.lineWidth = 1;
        [oval120Path stroke];


        //// Oval 121 Drawing
        UIBezierPath* oval121Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(365, 59.5, 22, 20)];
        [color3 setFill];
        [oval121Path fill];

        ////// Oval 121 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval121Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval121Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval121Path.lineWidth = 1;
        [oval121Path stroke];


        //// Oval 122 Drawing
        UIBezierPath* oval122Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(343, 70, 22, 19)];
        [color3 setFill];
        [oval122Path fill];

        ////// Oval 122 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval122Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval122Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval122Path.lineWidth = 1;
        [oval122Path stroke];


        //// Oval 123 Drawing
        UIBezierPath* oval123Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(351.5, 66.5, 23, 21)];
        [color3 setFill];
        [oval123Path fill];

        ////// Oval 123 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval123Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval123Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval123Path.lineWidth = 1;
        [oval123Path stroke];


        //// Oval 124 Drawing
        UIBezierPath* oval124Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(367.5, 66, 26, 20)];
        [color3 setFill];
        [oval124Path fill];

        ////// Oval 124 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval124Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval124Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval124Path.lineWidth = 1;
        [oval124Path stroke];


        //// Oval 125 Drawing
        UIBezierPath* oval125Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(407, 66, 23, 22)];
        [color3 setFill];
        [oval125Path fill];

        ////// Oval 125 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval125Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval125Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval125Path.lineWidth = 1;
        [oval125Path stroke];


        //// Oval 126 Drawing
        UIBezierPath* oval126Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(393.5, 63.5, 22, 17)];
        [color3 setFill];
        [oval126Path fill];

        ////// Oval 126 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval126Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval126Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval126Path.lineWidth = 1;
        [oval126Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 41 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 194.34, 66.98);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval41Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.69, 0.68, 20.67, 18.32)];
        [color17 setFill];
        [oval41Path fill];

        ////// Oval 41 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval41Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval41Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval41Path.lineWidth = 1;
        [oval41Path stroke];

        CGContextRestoreGState(context);


        //// Oval 42 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 176.53, 53.2);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval42Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.97, 0.81, 24.8, 25.97)];
        [color17 setFill];
        [oval42Path fill];

        ////// Oval 42 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval42Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval42Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval42Path.lineWidth = 1;
        [oval42Path stroke];

        CGContextRestoreGState(context);


        //// Oval 43 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 163.59, 46.73);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval43Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.82, 0.78, 23.77, 21.97)];
        [color17 setFill];
        [oval43Path fill];

        ////// Oval 43 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval43Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval43Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval43Path.lineWidth = 1;
        [oval43Path stroke];

        CGContextRestoreGState(context);


        //// Oval 44 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 107.53, 57.24);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval44Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.75, 0.64, 19.63, 19.98)];
        [color17 setFill];
        [oval44Path fill];

        ////// Oval 44 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval44Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval44Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval44Path.lineWidth = 1;
        [oval44Path stroke];

        CGContextRestoreGState(context);


        //// Oval 45 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 29.12, 58.66);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval45Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.97, 0.88, 26.87, 25.97)];
        [color17 setFill];
        [oval45Path fill];

        ////// Oval 45 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval45Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval45Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval45Path.lineWidth = 1;
        [oval45Path stroke];

        CGContextRestoreGState(context);


        //// Oval 46 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 43.17, 66.85);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval46Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.75, 0.71, 21.7, 19.98)];
        [color17 setFill];
        [oval46Path fill];

        ////// Oval 46 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval46Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval46Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval46Path.lineWidth = 1;
        [oval46Path stroke];

        CGContextRestoreGState(context);


        //// Oval 47 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 56.03, 60.28);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval47Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.9, 0.84, 25.84, 23.97)];
        [color17 setFill];
        [oval47Path fill];

        ////// Oval 47 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval47Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval47Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval47Path.lineWidth = 1;
        [oval47Path stroke];

        CGContextRestoreGState(context);


        //// Oval 48 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 87.12, 63.17);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval48Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.83, 0.92, 27.91, 21.97)];
        [color17 setFill];
        [oval48Path fill];

        ////// Oval 48 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval48Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval48Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval48Path.lineWidth = 1;
        [oval48Path stroke];

        CGContextRestoreGState(context);


        //// Oval 49 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 105.4, 69.65);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval49Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.75, 0.81, 24.81, 19.97)];
        [color17 setFill];
        [oval49Path fill];

        ////// Oval 49 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval49Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval49Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval49Path.lineWidth = 1;
        [oval49Path stroke];

        CGContextRestoreGState(context);


        //// Oval 50 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 122.19, 61.75);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval50Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.75, 0.64, 19.63, 19.98)];
        [color17 setFill];
        [oval50Path fill];

        ////// Oval 50 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval50Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval50Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval50Path.lineWidth = 1;
        [oval50Path stroke];

        CGContextRestoreGState(context);


        //// Oval 51 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 143.14, 64.34);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval51Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.9, 0.84, 25.84, 23.97)];
        [color17 setFill];
        [oval51Path fill];

        ////// Oval 51 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval51Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval51Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval51Path.lineWidth = 1;
        [oval51Path stroke];

        CGContextRestoreGState(context);


        //// Oval 52 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 131.8, 68.93);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval52Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.78, 0.64, 19.63, 20.98)];
        [color17 setFill];
        [oval52Path fill];

        ////// Oval 52 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval52Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval52Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval52Path.lineWidth = 1;
        [oval52Path stroke];

        CGContextRestoreGState(context);


        //// Oval 53 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 50.05, 51.48);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval53Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.94, 0.84, 25.84, 24.97)];
        [color17 setFill];
        [oval53Path fill];

        ////// Oval 53 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval53Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval53Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval53Path.lineWidth = 1;
        [oval53Path stroke];

        CGContextRestoreGState(context);


        //// Oval 60 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 72.76, 51.81);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval60Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.86, 0.74, 22.74, 22.97)];
        [color17 setFill];
        [oval60Path fill];

        ////// Oval 60 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval60Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval60Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval60Path.lineWidth = 1;
        [oval60Path stroke];

        CGContextRestoreGState(context);


        //// Oval 61 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 131.74, 52.92);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval61Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.78, 0.64, 19.63, 20.98)];
        [color17 setFill];
        [oval61Path fill];

        ////// Oval 61 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval61Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval61Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval61Path.lineWidth = 1;
        [oval61Path stroke];

        CGContextRestoreGState(context);


        //// Oval 62 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 141.39, 43.32);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval62Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.94, 0.91, 27.91, 24.97)];
        [color17 setFill];
        [oval62Path fill];

        ////// Oval 62 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval62Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval62Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval62Path.lineWidth = 1;
        [oval62Path stroke];

        CGContextRestoreGState(context);


        //// Oval 65 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 151.52, 54.62);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval65Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.82, 0.78, 23.77, 21.97)];
        [color17 setFill];
        [oval65Path fill];

        ////// Oval 65 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval65Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval65Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval65Path.lineWidth = 1;
        [oval65Path stroke];

        CGContextRestoreGState(context);


        //// Oval 68 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 164.84, 64.21);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval68Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.86, 0.74, 22.74, 22.97)];
        [color17 setFill];
        [oval68Path fill];

        ////// Oval 68 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval68Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval68Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval68Path.lineWidth = 1;
        [oval68Path stroke];

        CGContextRestoreGState(context);


        //// Oval 69 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 72.23, 68.87);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval69Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.75, 0.71, 21.7, 19.98)];
        [color17 setFill];
        [oval69Path fill];

        ////// Oval 69 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval69Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval69Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval69Path.lineWidth = 1;
        [oval69Path stroke];

        CGContextRestoreGState(context);


        //// Oval 70 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 181.89, 68.02);
        CGContextRotateCTM(context, -2.01 * M_PI / 180);

        UIBezierPath* oval70Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.61, 0.61, 18.6, 16.32)];
        [color17 setFill];
        [oval70Path fill];

        ////// Oval 70 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval70Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval70Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval70Path.lineWidth = 1;
        [oval70Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 21 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 31.69, 155.54);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 22.57, 19.85)];
        [color17 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];

        CGContextRestoreGState(context);


        //// Oval 22 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 46.89, 140.64);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.09, 28.13)];
        [color17 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];

        CGContextRestoreGState(context);


        //// Oval 23 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 61.95, 133.65);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval23Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.95, 23.8)];
        [color17 setFill];
        [oval23Path fill];

        ////// Oval 23 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval23Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval23Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval23Path.lineWidth = 1;
        [oval23Path stroke];

        CGContextRestoreGState(context);


        //// Oval 24 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 127.43, 145.01);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21.44, 21.64)];
        [color17 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];

        CGContextRestoreGState(context);


        //// Oval 25 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 208.21, 149.64);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.05, 22.12)];
        [color17 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];

        CGContextRestoreGState(context);


        //// Oval 26 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 195.27, 155.39);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.7, 21.64)];
        [color17 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];

        CGContextRestoreGState(context);


        //// Oval 27 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 176.92, 148.28);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.21, 25.97)];
        [color17 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];

        CGContextRestoreGState(context);


        //// Oval 28 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 143.77, 149.5);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.17, 17.8)];
        [color17 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];

        CGContextRestoreGState(context);


        //// Oval 29 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 124.13, 158.4);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.08, 21.64)];
        [color17 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];

        CGContextRestoreGState(context);


        //// Oval 30 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 111.47, 149.88);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval30Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21.44, 21.64)];
        [color17 setFill];
        [oval30Path fill];

        ////// Oval 30 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval30Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval30Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval30Path.lineWidth = 1;
        [oval30Path stroke];

        CGContextRestoreGState(context);


        //// Oval 31 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 82.04, 152.67);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval31Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.21, 25.97)];
        [color17 setFill];
        [oval31Path fill];

        ////// Oval 31 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval31Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval31Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval31Path.lineWidth = 1;
        [oval31Path stroke];

        CGContextRestoreGState(context);


        //// Oval 32 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 101.04, 157.64);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21.44, 22.72)];
        [color17 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];

        CGContextRestoreGState(context);


        //// Oval 33 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 183.47, 138.78);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.21, 27.05)];
        [color17 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];

        CGContextRestoreGState(context);


        //// Oval 34 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 162.03, 139.14);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.83, 24.88)];
        [color17 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];

        CGContextRestoreGState(context);


        //// Oval 35 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 101.1, 140.35);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 21.44, 22.72)];
        [color17 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];

        CGContextRestoreGState(context);


        //// Oval 36 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 81.74, 129.95);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval36Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.47, 27.05)];
        [color17 setFill];
        [oval36Path fill];

        ////// Oval 36 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval36Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval36Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval36Path.lineWidth = 1;
        [oval36Path stroke];

        CGContextRestoreGState(context);


        //// Oval 37 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 75.1, 142.17);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.95, 23.8)];
        [color17 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];

        CGContextRestoreGState(context);


        //// Oval 38 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 61.75, 152.53);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.83, 24.88)];
        [color17 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];

        CGContextRestoreGState(context);


        //// Oval 39 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 163.62, 157.57);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval39Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.7, 21.64)];
        [color17 setFill];
        [oval39Path fill];

        ////// Oval 39 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval39Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval39Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval39Path.lineWidth = 1;
        [oval39Path stroke];

        CGContextRestoreGState(context);


        //// Oval 40 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 47.43, 156.66);
        CGContextRotateCTM(context, 2.01 * M_PI / 180);

        UIBezierPath* oval40Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 20.31, 17.68)];
        [color17 setFill];
        [oval40Path fill];

        ////// Oval 40 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval40Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval40Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval40Path.lineWidth = 1;
        [oval40Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 12
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 140 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 46.03, 135.61);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval140Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.76, 20.83)];
        [color17 setFill];
        [oval140Path fill];

        ////// Oval 140 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval140Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval140Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval140Path.lineWidth = 1;
        [oval140Path stroke];

        CGContextRestoreGState(context);


        //// Oval 141 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 64.22, 136.7);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval141Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.94, 19.87)];
        [color17 setFill];
        [oval141Path fill];

        ////// Oval 141 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval141Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval141Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval141Path.lineWidth = 1;
        [oval141Path stroke];

        CGContextRestoreGState(context);


        //// Oval 142 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 84.72, 142.5);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval142Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 18.02, 14.47)];
        [color17 setFill];
        [oval142Path fill];

        ////// Oval 142 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval142Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval142Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval142Path.lineWidth = 1;
        [oval142Path stroke];

        CGContextRestoreGState(context);


        //// Oval 143 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 94.73, 138.46);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval143Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.96, 18.94)];
        [color17 setFill];
        [oval143Path fill];

        ////// Oval 143 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval143Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval143Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval143Path.lineWidth = 1;
        [oval143Path stroke];

        CGContextRestoreGState(context);


        //// Oval 144 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 111.26, 140.09);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval144Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.68, 18.06)];
        [color17 setFill];
        [oval144Path fill];

        ////// Oval 144 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval144Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval144Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval144Path.lineWidth = 1;
        [oval144Path stroke];

        CGContextRestoreGState(context);


        //// Oval 145 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 125.69, 131.57);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval145Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 17.94, 17.26)];
        [color17 setFill];
        [oval145Path fill];

        ////// Oval 145 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval145Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval145Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval145Path.lineWidth = 1;
        [oval145Path stroke];

        CGContextRestoreGState(context);


        //// Oval 146 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 136.83, 138.77);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval146Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19.12, 16.31)];
        [color17 setFill];
        [oval146Path fill];

        ////// Oval 146 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval146Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval146Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval146Path.lineWidth = 1;
        [oval146Path stroke];

        CGContextRestoreGState(context);


        //// Oval 147 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 63.13, 129.8);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval147Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.99, 18.01)];
        [color17 setFill];
        [oval147Path fill];

        ////// Oval 147 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval147Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval147Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval147Path.lineWidth = 1;
        [oval147Path stroke];

        CGContextRestoreGState(context);


        //// Oval 148 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 82.65, 127.88);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval148Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.68, 18.06)];
        [color17 setFill];
        [oval148Path fill];

        ////// Oval 148 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval148Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval148Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval148Path.lineWidth = 1;
        [oval148Path stroke];

        CGContextRestoreGState(context);


        //// Oval 149 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 101.04, 121.94);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval149Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.78, 19.9)];
        [color17 setFill];
        [oval149Path fill];

        ////// Oval 149 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval149Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval149Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval149Path.lineWidth = 1;
        [oval149Path stroke];

        CGContextRestoreGState(context);


        //// Oval 150 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 114.26, 128.95);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval150Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19.07, 18.17)];
        [color17 setFill];
        [oval150Path fill];

        ////// Oval 150 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval150Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval150Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval150Path.lineWidth = 1;
        [oval150Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 7
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 71 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 108.31, 126.99);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval71Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.56, 23.29)];
        [color17 setFill];
        [oval71Path fill];

        ////// Oval 71 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval71Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval71Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval71Path.lineWidth = 1;
        [oval71Path stroke];

        CGContextRestoreGState(context);


        //// Oval 72 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 126.11, 128.17);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval72Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.71, 22.25)];
        [color17 setFill];
        [oval72Path fill];

        ////// Oval 72 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval72Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval72Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval72Path.lineWidth = 1;
        [oval72Path stroke];

        CGContextRestoreGState(context);


        //// Oval 73 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 146.26, 134.67);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval73Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 17.87, 16.19)];
        [color17 setFill];
        [oval73Path fill];

        ////// Oval 73 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval73Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval73Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval73Path.lineWidth = 1;
        [oval73Path stroke];

        CGContextRestoreGState(context);


        //// Oval 74 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 155.97, 130.11);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval74Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.72, 21.23)];
        [color17 setFill];
        [oval74Path fill];

        ////// Oval 74 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval74Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval74Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval74Path.lineWidth = 1;
        [oval74Path stroke];

        CGContextRestoreGState(context);


        //// Oval 75 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 172.15, 131.94);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval75Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.47, 20.23)];
        [color17 setFill];
        [oval75Path fill];

        ////// Oval 75 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval75Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval75Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval75Path.lineWidth = 1;
        [oval75Path stroke];

        CGContextRestoreGState(context);


        //// Oval 78 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 186.29, 122.62);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval78Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 17.84, 19.27)];
        [color17 setFill];
        [oval78Path fill];

        ////// Oval 78 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval78Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval78Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval78Path.lineWidth = 1;
        [oval78Path stroke];

        CGContextRestoreGState(context);


        //// Oval 107 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 190.03, 129.45);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval107Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 18.98, 18.23)];
        [color17 setFill];
        [oval107Path fill];

        ////// Oval 107 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval107Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval107Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval107Path.lineWidth = 1;
        [oval107Path stroke];

        CGContextRestoreGState(context);


        //// Oval 108 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 125.08, 120.56);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval108Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.73, 20.2)];
        [color17 setFill];
        [oval108Path fill];

        ////// Oval 108 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval108Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval108Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval108Path.lineWidth = 1;
        [oval108Path stroke];

        CGContextRestoreGState(context);


        //// Oval 127 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 144.17, 118.47);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval127Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 23.47, 20.23)];
        [color17 setFill];
        [oval127Path fill];

        ////// Oval 127 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval127Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval127Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval127Path.lineWidth = 1;
        [oval127Path stroke];

        CGContextRestoreGState(context);


        //// Oval 128 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 162.13, 111.91);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval128Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.58, 22.26)];
        [color17 setFill];
        [oval128Path fill];

        ////// Oval 128 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval128Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval128Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval128Path.lineWidth = 1;
        [oval128Path stroke];

        CGContextRestoreGState(context);


        //// Oval 129 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 175.1, 119.72);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval129Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 18.95, 20.28)];
        [color17 setFill];
        [oval129Path fill];

        ////// Oval 129 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval129Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval129Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval129Path.lineWidth = 1;
        [oval129Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 98 Drawing
        UIBezierPath* oval98Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(408.5, 154.5, 18, 16)];
        [color17 setFill];
        [oval98Path fill];

        ////// Oval 98 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval98Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval98Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval98Path.lineWidth = 1;
        [oval98Path stroke];


        //// Oval 16 Drawing
        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(388.5, 151.5, 24, 22)];
        [color17 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];


        //// Oval 19 Drawing
        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(401.5, 164.5, 22, 19)];
        [color17 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(249.5, 164.5, 28, 23)];
        [color17 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(264, 172, 23, 18)];
        [color17 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(277.5, 166, 27, 22)];
        [color17 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(294, 174, 23, 18)];
        [color17 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(309.5, 170, 29, 20)];
        [color17 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(326, 174, 30, 22)];
        [color17 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(346.5, 169.5, 20, 18)];
        [color17 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(366.5, 172, 29, 23)];
        [color17 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(356, 176, 21, 19)];
        [color17 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(272, 158, 26, 23)];
        [color17 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(294, 158, 26, 23)];
        [color17 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(318.5, 154.5, 28, 22)];
        [color17 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];


        //// Oval 13 Drawing
        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(338.5, 162.5, 22, 21)];
        [color17 setFill];
        [oval13Path fill];

        ////// Oval 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];


        //// Oval 14 Drawing
        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(356, 162, 21, 19)];
        [color17 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];


        //// Oval 15 Drawing
        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(366.5, 154, 29, 22)];
        [color17 setFill];
        [oval15Path fill];

        ////// Oval 15 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval15Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval15Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(377, 164.5, 24, 19)];
        [color17 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];


        //// Oval 18 Drawing
        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(390.5, 173.5, 23, 20)];
        [color17 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];


        //// Oval 20 Drawing
        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(407.5, 175.5, 21, 17)];
        [color17 setFill];
        [oval20Path fill];

        ////// Oval 20 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval20Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval20Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 8
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 130 Drawing
        UIBezierPath* oval130Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(390.5, 137, 17, 16)];
        [color17 setFill];
        [oval130Path fill];

        ////// Oval 130 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval130Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval130Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval130Path.lineWidth = 1;
        [oval130Path stroke];


        //// Oval 131 Drawing
        UIBezierPath* oval131Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(370.5, 134, 24, 22)];
        [color17 setFill];
        [oval131Path fill];

        ////// Oval 131 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval131Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval131Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval131Path.lineWidth = 1;
        [oval131Path stroke];


        //// Oval 132 Drawing
        UIBezierPath* oval132Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(383.5, 147, 21, 20)];
        [color17 setFill];
        [oval132Path fill];

        ////// Oval 132 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval132Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval132Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval132Path.lineWidth = 1;
        [oval132Path stroke];


        //// Oval 135 Drawing
        UIBezierPath* oval135Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(262.5, 149.5, 26, 22)];
        [color17 setFill];
        [oval135Path fill];

        ////// Oval 135 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval135Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval135Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval135Path.lineWidth = 1;
        [oval135Path stroke];


        //// Oval 136 Drawing
        UIBezierPath* oval136Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(279, 157.5, 22, 18)];
        [color17 setFill];
        [oval136Path fill];

        ////// Oval 136 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval136Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval136Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval136Path.lineWidth = 1;
        [oval136Path stroke];


        //// Oval 137 Drawing
        UIBezierPath* oval137Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(293.5, 152.5, 29, 21)];
        [color17 setFill];
        [oval137Path fill];

        ////// Oval 137 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval137Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval137Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval137Path.lineWidth = 1;
        [oval137Path stroke];


        //// Oval 151 Drawing
        UIBezierPath* oval151Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(310, 157.5, 29, 22)];
        [color17 setFill];
        [oval151Path fill];

        ////// Oval 151 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval151Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval151Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval151Path.lineWidth = 1;
        [oval151Path stroke];


        //// Oval 152 Drawing
        UIBezierPath* oval152Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(329.5, 152, 20, 19)];
        [color17 setFill];
        [oval152Path fill];

        ////// Oval 152 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval152Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval152Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval152Path.lineWidth = 1;
        [oval152Path stroke];


        //// Oval 153 Drawing
        UIBezierPath* oval153Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(349.5, 154.5, 28, 24)];
        [color17 setFill];
        [oval153Path fill];

        ////// Oval 153 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval153Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval153Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval153Path.lineWidth = 1;
        [oval153Path stroke];


        //// Oval 154 Drawing
        UIBezierPath* oval154Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(339, 159.5, 20, 19)];
        [color17 setFill];
        [oval154Path fill];

        ////// Oval 154 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval154Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval154Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval154Path.lineWidth = 1;
        [oval154Path stroke];


        //// Oval 156 Drawing
        UIBezierPath* oval156Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(279, 140.5, 25, 23)];
        [color17 setFill];
        [oval156Path fill];

        ////// Oval 156 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval156Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval156Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval156Path.lineWidth = 1;
        [oval156Path stroke];


        //// Oval 157 Drawing
        UIBezierPath* oval157Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(302.5, 137, 27, 23)];
        [color17 setFill];
        [oval157Path fill];

        ////// Oval 157 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval157Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval157Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval157Path.lineWidth = 1;
        [oval157Path stroke];


        //// Oval 158 Drawing
        UIBezierPath* oval158Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(322.5, 145, 21, 22)];
        [color17 setFill];
        [oval158Path fill];

        ////// Oval 158 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval158Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval158Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval158Path.lineWidth = 1;
        [oval158Path stroke];


        //// Oval 159 Drawing
        UIBezierPath* oval159Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(339, 144.5, 20, 19)];
        [color17 setFill];
        [oval159Path fill];

        ////// Oval 159 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval159Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval159Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval159Path.lineWidth = 1;
        [oval159Path stroke];


        //// Oval 160 Drawing
        UIBezierPath* oval160Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(349.5, 136.5, 28, 23)];
        [color17 setFill];
        [oval160Path fill];

        ////// Oval 160 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval160Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval160Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval160Path.lineWidth = 1;
        [oval160Path stroke];


        //// Oval 161 Drawing
        UIBezierPath* oval161Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(359, 147, 24, 20)];
        [color17 setFill];
        [oval161Path fill];

        ////// Oval 161 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval161Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval161Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval161Path.lineWidth = 1;
        [oval161Path stroke];


        //// Oval 162 Drawing
        UIBezierPath* oval162Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(372.5, 156, 23, 21)];
        [color17 setFill];
        [oval162Path fill];

        ////// Oval 162 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval162Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval162Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval162Path.lineWidth = 1;
        [oval162Path stroke];


        //// Oval 163 Drawing
        UIBezierPath* oval163Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(389.5, 159, 21, 17)];
        [color17 setFill];
        [oval163Path fill];

        ////// Oval 163 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval163Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval163Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval163Path.lineWidth = 1;
        [oval163Path stroke];


        //// Oval 164 Drawing
        UIBezierPath* oval164Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(401, 147, 19, 18)];
        [color17 setFill];
        [oval164Path fill];

        ////// Oval 164 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval164Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval164Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval164Path.lineWidth = 1;
        [oval164Path stroke];


        //// Oval 165 Drawing
        UIBezierPath* oval165Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(403, 161, 17, 13)];
        [color17 setFill];
        [oval165Path fill];

        ////// Oval 165 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval165Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval165Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval165Path.lineWidth = 1;
        [oval165Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 11
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 155 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 294.07, 132.67);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval155Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.27, 22.17)];
        [color17 setFill];
        [oval155Path fill];

        ////// Oval 155 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval155Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval155Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval155Path.lineWidth = 1;
        [oval155Path stroke];

        CGContextRestoreGState(context);


        //// Oval 166 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 313.36, 133.83);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval166Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.52, 21.15)];
        [color17 setFill];
        [oval166Path fill];

        ////// Oval 166 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval166Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval166Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval166Path.lineWidth = 1;
        [oval166Path stroke];

        CGContextRestoreGState(context);


        //// Oval 167 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 335.12, 140);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval167Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19.13, 15.4)];
        [color17 setFill];
        [oval167Path fill];

        ////// Oval 167 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval167Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval167Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval167Path.lineWidth = 1;
        [oval167Path stroke];

        CGContextRestoreGState(context);


        //// Oval 168 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 345.74, 135.69);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval168Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.55, 20.16)];
        [color17 setFill];
        [oval168Path fill];

        ////// Oval 168 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval168Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval168Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval168Path.lineWidth = 1;
        [oval168Path stroke];

        CGContextRestoreGState(context);


        //// Oval 169 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 363.26, 137.43);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval169Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.13, 19.23)];
        [color17 setFill];
        [oval169Path fill];

        ////// Oval 169 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval169Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval169Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval169Path.lineWidth = 1;
        [oval169Path stroke];

        CGContextRestoreGState(context);


        //// Oval 170 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 378.57, 128.36);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval170Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 19.04, 18.38)];
        [color17 setFill];
        [oval170Path fill];

        ////// Oval 170 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval170Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval170Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval170Path.lineWidth = 1;
        [oval170Path stroke];

        CGContextRestoreGState(context);


        //// Oval 171 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 382.61, 134.97);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval171Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 20.29, 17.36)];
        [color17 setFill];
        [oval171Path fill];

        ////// Oval 171 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval171Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval171Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval171Path.lineWidth = 1;
        [oval171Path stroke];

        CGContextRestoreGState(context);


        //// Oval 172 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 312.22, 126.48);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval172Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.58, 19.17)];
        [color17 setFill];
        [oval172Path fill];

        ////// Oval 172 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval172Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval172Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval172Path.lineWidth = 1;
        [oval172Path stroke];

        CGContextRestoreGState(context);


        //// Oval 173 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 332.92, 124.44);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval173Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.13, 19.23)];
        [color17 setFill];
        [oval173Path fill];

        ////// Oval 173 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval173Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval173Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval173Path.lineWidth = 1;
        [oval173Path stroke];

        CGContextRestoreGState(context);


        //// Oval 174 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 352.43, 118.11);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval174Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.3, 21.18)];
        [color17 setFill];
        [oval174Path fill];

        ////// Oval 174 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval174Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval174Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval174Path.lineWidth = 1;
        [oval174Path stroke];

        CGContextRestoreGState(context);


        //// Oval 175 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 366.45, 125.58);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval175Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 20.24, 19.34)];
        [color17 setFill];
        [oval175Path fill];

        ////// Oval 175 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval175Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval175Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval175Path.lineWidth = 1;
        [oval175Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas11
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* nightSkySnowGradientColor = [UIColor colorWithRed: 0.076 green: 0.016 blue: 0.169 alpha: 1];
    UIColor* nightSkySnowGradientColor2 = [UIColor colorWithRed: 0.989 green: 0.989 blue: 0.989 alpha: 1];

    //// Gradient Declarations
    CGFloat nightSkySnowGradientLocations[] = {0, 0.18, 0.51, 0.84, 1};
    CGGradientRef nightSkySnowGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)UIColor.blackColor.CGColor, (id)[UIColor.blackColor blendedColorWithFraction: 0.5 ofColor: nightSkySnowGradientColor].CGColor, (id)nightSkySnowGradientColor.CGColor, (id)[nightSkySnowGradientColor blendedColorWithFraction: 0.5 ofColor: nightSkySnowGradientColor2].CGColor, (id)nightSkySnowGradientColor2.CGColor], nightSkySnowGradientLocations);

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 414, 736)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, nightSkySnowGradient, CGPointMake(207, -0), CGPointMake(207, 736), 0);
    CGContextRestoreGState(context);


    //// Cleanup
    CGGradientRelease(nightSkySnowGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas13
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 56 Drawing
        UIBezierPath* oval56Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(110, 96.5, 30, 19)];
        [color10 setFill];
        [oval56Path fill];

        ////// Oval 56 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval56Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval56Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval56Path.lineWidth = 1;
        [oval56Path stroke];


        //// Oval 240 Drawing
        UIBezierPath* oval240Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(203.5, 88, 34.5, 18)];
        [color10 setFill];
        [oval240Path fill];

        ////// Oval 240 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval240Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval240Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval240Path.lineWidth = 1;
        [oval240Path stroke];


        //// Oval 242 Drawing
        UIBezierPath* oval242Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(156.5, 90, 35, 20)];
        [color10 setFill];
        [oval242Path fill];

        ////// Oval 242 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval242Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval242Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval242Path.lineWidth = 1;
        [oval242Path stroke];


        //// Oval 243 Drawing
        UIBezierPath* oval243Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(126.5, 97.5, 30, 19)];
        [color10 setFill];
        [oval243Path fill];

        ////// Oval 243 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval243Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval243Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval243Path.lineWidth = 1;
        [oval243Path stroke];


        //// Oval 244 Drawing
        UIBezierPath* oval244Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(141, 100, 29, 18)];
        [color10 setFill];
        [oval244Path fill];

        ////// Oval 244 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval244Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval244Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval244Path.lineWidth = 1;
        [oval244Path stroke];


        //// Oval 245 Drawing
        UIBezierPath* oval245Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(163, 97.5, 36, 21)];
        [color10 setFill];
        [oval245Path fill];

        ////// Oval 245 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval245Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval245Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval245Path.lineWidth = 1;
        [oval245Path stroke];


        //// Oval 246 Drawing
        UIBezierPath* oval246Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(210.5, 96.5, 32, 20)];
        [color10 setFill];
        [oval246Path fill];

        ////// Oval 246 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval246Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval246Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval246Path.lineWidth = 1;
        [oval246Path stroke];


        //// Oval 239 Drawing
        UIBezierPath* oval239Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(187.5, 93.5, 30, 22)];
        [color10 setFill];
        [oval239Path fill];

        ////// Oval 239 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval239Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval239Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval239Path.lineWidth = 1;
        [oval239Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(65.5, 150.5, 31, 18)];
        [color10 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(71.5, 156.5, 37, 24)];
        [color10 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(38.5, 151.5, 37, 23)];
        [color10 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(11.5, 169.5, 40, 24)];
        [color10 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-27, 153, 37, 25)];
        [color10 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(9.5, 153.5, 39, 22)];
        [color10 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 13 Drawing
        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-13.5, 170.5, 34, 23)];
        [color10 setFill];
        [oval13Path fill];

        ////// Oval 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];


        //// Oval 14 Drawing
        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-2, 161, 35, 20)];
        [color10 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];


        //// Oval 238 Drawing
        UIBezierPath* oval238Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(28.5, 166.5, 37, 18)];
        [color10 setFill];
        [oval238Path fill];

        ////// Oval 238 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval238Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval238Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval238Path.lineWidth = 1;
        [oval238Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(51.5, 163.5, 31, 18)];
        [color10 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 22
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 242.51, 180.42);
        CGContextRotateCTM(context, 1.52 * M_PI / 180);

        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 249 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 33.47, -16.53);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval249Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 33.48, 20.48)];
        [color10 setFill];
        [oval249Path fill];

        ////// Oval 249 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval249Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval249Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval249Path.lineWidth = 1;
        [oval249Path stroke];

        CGContextRestoreGState(context);


        //// Oval 251 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -74.62, -14.51);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval251Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 34.74, 22.45)];
        [color10 setFill];
        [oval251Path fill];

        ////// Oval 251 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval251Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval251Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval251Path.lineWidth = 1;
        [oval251Path stroke];

        CGContextRestoreGState(context);


        //// Oval 252 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -69.18, -0.11);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval252Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 32.42, 19.2)];
        [color10 setFill];
        [oval252Path fill];

        ////// Oval 252 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval252Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval252Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval252Path.lineWidth = 1;
        [oval252Path stroke];

        CGContextRestoreGState(context);


        //// Oval 254 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 11.2, -18.69);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval254Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 33.48, 20.48)];
        [color10 setFill];
        [oval254Path fill];

        ////// Oval 254 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval254Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval254Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval254Path.lineWidth = 1;
        [oval254Path stroke];

        CGContextRestoreGState(context);


        //// Oval 256 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 71.01, -7.74);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval256Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.3, 21.56)];
        [color10 setFill];
        [oval256Path fill];

        ////// Oval 256 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval256Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval256Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval256Path.lineWidth = 1;
        [oval256Path stroke];

        CGContextRestoreGState(context);


        //// Oval 258 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -18.18, -18.54);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval258Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 33.96, 22.29)];
        [color10 setFill];
        [oval258Path fill];

        ////// Oval 258 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval258Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval258Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval258Path.lineWidth = 1;
        [oval258Path stroke];

        CGContextRestoreGState(context);


        //// Oval 259 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -47.49, -18.1);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval259Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 36.02, 23.97)];
        [color10 setFill];
        [oval259Path fill];

        ////// Oval 259 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval259Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval259Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval259Path.lineWidth = 1;
        [oval259Path stroke];

        CGContextRestoreGState(context);


        //// Oval 260 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -92.95, 7.75);
        CGContextRotateCTM(context, -2.05 * M_PI / 180);

        UIBezierPath* oval260Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-16.24, -9.9, 32.49, 19.8)];
        [color10 setFill];
        [oval260Path fill];

        ////// Oval 260 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval260Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval260Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval260Path.lineWidth = 1;
        [oval260Path stroke];

        CGContextRestoreGState(context);


        //// Oval 261 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -45.46, -3.83);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval261Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 34.72, 20.57)];
        [color10 setFill];
        [oval261Path fill];

        ////// Oval 261 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval261Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval261Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval261Path.lineWidth = 1;
        [oval261Path stroke];

        CGContextRestoreGState(context);


        //// Oval 263 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -72.05, 7.29);
        CGContextRotateCTM(context, -2.72 * M_PI / 180);

        UIBezierPath* oval263Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-17.7, -10.49, 35.4, 20.97)];
        [color10 setFill];
        [oval263Path fill];

        ////// Oval 263 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval263Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval263Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval263Path.lineWidth = 1;
        [oval263Path stroke];

        CGContextRestoreGState(context);


        //// Oval 264 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -16.14, -7.75);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval264Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 33.36, 23.66)];
        [color10 setFill];
        [oval264Path fill];

        ////// Oval 264 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval264Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval264Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval264Path.lineWidth = 1;
        [oval264Path stroke];

        CGContextRestoreGState(context);


        //// Oval 265 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 12.04, -4.51);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval265Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.04, 21.08)];
        [color10 setFill];
        [oval265Path fill];

        ////// Oval 265 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval265Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval265Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval265Path.lineWidth = 1;
        [oval265Path stroke];

        CGContextRestoreGState(context);


        //// Oval 266 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 54.2, -8.35);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval266Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 33.36, 23.66)];
        [color10 setFill];
        [oval266Path fill];

        ////// Oval 266 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval266Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval266Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval266Path.lineWidth = 1;
        [oval266Path stroke];

        CGContextRestoreGState(context);


        //// Oval 255 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 31.93, -6.52);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval255Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 32.91, 20.93)];
        [color10 setFill];
        [oval255Path fill];

        ////// Oval 255 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval255Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval255Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval255Path.lineWidth = 1;
        [oval255Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Group 28
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 322 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 346.67, 76.55);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval322Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 38.86, 24.51)];
        [color3 setFill];
        [oval322Path fill];

        ////// Oval 322 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval322Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval322Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval322Path.lineWidth = 1;
        [oval322Path stroke];

        CGContextRestoreGState(context);


        //// Oval 329 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 393.27, 63.82);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval329Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 32.26, 19.65)];
        [color3 setFill];
        [oval329Path fill];

        ////// Oval 329 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval329Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval329Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval329Path.lineWidth = 1;
        [oval329Path stroke];

        CGContextRestoreGState(context);


        //// Oval 330 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 366.58, 68.87);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval330Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 35.09, 21.68)];
        [color3 setFill];
        [oval330Path fill];

        ////// Oval 330 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval330Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval330Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval330Path.lineWidth = 1;
        [oval330Path stroke];

        CGContextRestoreGState(context);


        //// Oval 335 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 411.41, 92.69);
        CGContextRotateCTM(context, -1.17 * M_PI / 180);

        UIBezierPath* oval335Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-17.96, -12.72, 35.92, 25.43)];
        [color3 setFill];
        [oval335Path fill];

        ////// Oval 335 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval335Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval335Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval335Path.lineWidth = 1;
        [oval335Path stroke];

        CGContextRestoreGState(context);


        //// Oval 332 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 381.36, 92.33);
        CGContextRotateCTM(context, -0.43 * M_PI / 180);

        UIBezierPath* oval332Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-17.09, -10.1, 34.18, 20.2)];
        [color3 setFill];
        [oval332Path fill];

        ////// Oval 332 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval332Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval332Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval332Path.lineWidth = 1;
        [oval332Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 30
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 220.63, 161.5);
        CGContextRotateCTM(context, 1.29 * M_PI / 180);

        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 24 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 11.53, -8.6);
        CGContextRotateCTM(context, 0.9 * M_PI / 180);

        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-15.87, -9.78, 31.74, 19.56)];
        [color10 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];

        CGContextRestoreGState(context);


        //// Oval 23 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -50.09, -9.38);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval23Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.74, 17.56)];
        [color10 setFill];
        [oval23Path fill];

        ////// Oval 23 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval23Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval23Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval23Path.lineWidth = 1;
        [oval23Path stroke];

        CGContextRestoreGState(context);


        //// Oval 352 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -11.1, -5.66);
        CGContextRotateCTM(context, 0.84 * M_PI / 180);

        UIBezierPath* oval352Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-14.87, -8.78, 29.74, 17.56)];
        [color10 setFill];
        [oval352Path fill];

        ////// Oval 352 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval352Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval352Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval352Path.lineWidth = 1;
        [oval352Path stroke];

        CGContextRestoreGState(context);


        //// Oval 351 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 19.42, -11.84);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval351Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.13, 22.02)];
        [color10 setFill];
        [oval351Path fill];

        ////// Oval 351 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval351Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval351Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval351Path.lineWidth = 1;
        [oval351Path stroke];

        CGContextRestoreGState(context);


        //// Oval 358 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 39, -4.42);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval358Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.46, 20.93)];
        [color10 setFill];
        [oval358Path fill];

        ////// Oval 358 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval358Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval358Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval358Path.lineWidth = 1;
        [oval358Path stroke];

        CGContextRestoreGState(context);


        //// Oval 355 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -26.97, -1.44);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval355Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.26, 19.55)];
        [color10 setFill];
        [oval355Path fill];

        ////// Oval 355 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval355Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval355Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval355Path.lineWidth = 1;
        [oval355Path stroke];

        CGContextRestoreGState(context);


        //// Oval 356 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -10.28, -2.1);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval356Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 38.48, 22.76)];
        [color10 setFill];
        [oval356Path fill];

        ////// Oval 356 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval356Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval356Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval356Path.lineWidth = 1;
        [oval356Path stroke];

        CGContextRestoreGState(context);


        //// Oval 357 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 16.4, -0.33);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval357Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.74, 19.56)];
        [color10 setFill];
        [oval357Path fill];

        ////// Oval 357 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval357Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval357Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval357Path.lineWidth = 1;
        [oval357Path stroke];

        CGContextRestoreGState(context);


        //// Oval 360 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -49.49, 8.55);
        CGContextRotateCTM(context, -3.5 * M_PI / 180);

        UIBezierPath* oval360Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-17.23, -9.67, 34.47, 19.35)];
        [color10 setFill];
        [oval360Path fill];

        ////// Oval 360 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval360Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval360Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval360Path.lineWidth = 1;
        [oval360Path stroke];

        CGContextRestoreGState(context);


        //// Oval 354 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -51.26, -0.35);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval354Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.74, 19.56)];
        [color10 setFill];
        [oval354Path fill];

        ////// Oval 354 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval354Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval354Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval354Path.lineWidth = 1;
        [oval354Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Group 32
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 379 Drawing
        UIBezierPath* oval379Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(203, 38, 30, 17)];
        [color10 setFill];
        [oval379Path fill];

        ////// Oval 379 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval379Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval379Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval379Path.lineWidth = 1;
        [oval379Path stroke];


        //// Oval 50 Drawing
        UIBezierPath* oval50Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(131.5, 37.5, 32, 16)];
        [color10 setFill];
        [oval50Path fill];

        ////// Oval 50 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval50Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval50Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval50Path.lineWidth = 1;
        [oval50Path stroke];


        //// Oval 42 Drawing
        UIBezierPath* oval42Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(212.5, 29, 37, 20)];
        [color10 setFill];
        [oval42Path fill];

        ////// Oval 42 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval42Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval42Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval42Path.lineWidth = 1;
        [oval42Path stroke];


        //// Oval 44 Drawing
        UIBezierPath* oval44Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(164.5, 36, 34, 18)];
        [color10 setFill];
        [oval44Path fill];

        ////// Oval 44 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval44Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval44Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval44Path.lineWidth = 1;
        [oval44Path stroke];


        //// Oval 378 Drawing
        UIBezierPath* oval378Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(187, 35.5, 25, 12)];
        [color10 setFill];
        [oval378Path fill];

        ////// Oval 378 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval378Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval378Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval378Path.lineWidth = 1;
        [oval378Path stroke];


        //// Oval 381 Drawing
        UIBezierPath* oval381Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(238.5, 31.5, 22, 16)];
        [color10 setFill];
        [oval381Path fill];

        ////// Oval 381 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval381Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval381Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval381Path.lineWidth = 1;
        [oval381Path stroke];


        //// Oval 15 Drawing
        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(250.5, 36.5, 20, 14)];
        [color10 setFill];
        [oval15Path fill];

        ////// Oval 15 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval15Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval15Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];


        //// Oval 21 Drawing
        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(124.5, 44.5, 18, 12)];
        [color10 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];


        //// Oval 46 Drawing
        UIBezierPath* oval46Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(150.5, 28.5, 34, 18)];
        [color10 setFill];
        [oval46Path fill];

        ////// Oval 46 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval46Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval46Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval46Path.lineWidth = 1;
        [oval46Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 33
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 29.71, 82.05);
        CGContextRotateCTM(context, 3.47 * M_PI / 180);

        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 54 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -34.38, -13.09);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval54Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 34.55, 21.64)];
        [color3 setFill];
        [oval54Path fill];

        ////// Oval 54 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval54Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval54Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval54Path.lineWidth = 1;
        [oval54Path stroke];

        CGContextRestoreGState(context);


        //// Oval 386 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 35.87, -1.3);
        CGContextRotateCTM(context, -4.01 * M_PI / 180);

        UIBezierPath* oval386Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-17.36, -9.33, 34.73, 18.67)];
        [color3 setFill];
        [oval386Path fill];

        ////// Oval 386 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval386Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval386Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval386Path.lineWidth = 1;
        [oval386Path stroke];

        CGContextRestoreGState(context);


        //// Oval 387 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 16.46, 1.61);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval387Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31, 17.94)];
        [color3 setFill];
        [oval387Path fill];

        ////// Oval 387 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval387Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval387Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval387Path.lineWidth = 1;
        [oval387Path stroke];

        CGContextRestoreGState(context);


        //// Oval 388 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -11.79, -11.38);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval388Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 36, 20.21)];
        [color3 setFill];
        [oval388Path fill];

        ////// Oval 388 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval388Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval388Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval388Path.lineWidth = 1;
        [oval388Path stroke];

        CGContextRestoreGState(context);


        //// Oval 389 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -54.24, -11.6);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval389Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.44, 18.25)];
        [color3 setFill];
        [oval389Path fill];

        ////// Oval 389 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval389Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval389Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval389Path.lineWidth = 1;
        [oval389Path stroke];

        CGContextRestoreGState(context);


        //// Oval 391 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -58.1, 4.16);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval391Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 35.4, 18.89)];
        [color3 setFill];
        [oval391Path fill];

        ////// Oval 391 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval391Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval391Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval391Path.lineWidth = 1;
        [oval391Path stroke];

        CGContextRestoreGState(context);


        //// Oval 394 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -34.19, 2.03);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval394Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 32.09, 19.86)];
        [color3 setFill];
        [oval394Path fill];

        ////// Oval 394 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval394Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval394Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval394Path.lineWidth = 1;
        [oval394Path stroke];

        CGContextRestoreGState(context);


        //// Oval 395 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -6.47, 3.67);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval395Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 32.02, 17.7)];
        [color3 setFill];
        [oval395Path fill];

        ////// Oval 395 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval395Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval395Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval395Path.lineWidth = 1;
        [oval395Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Group 31
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 45.17, 71.4);
        CGContextRotateCTM(context, -5.16 * M_PI / 180);

        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 372 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -2.23, -13.59);
        CGContextRotateCTM(context, 6.8 * M_PI / 180);

        UIBezierPath* oval372Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.78, -4.36, 34.81, 19.27)];
        [color3 setFill];
        [oval372Path fill];

        ////// Oval 372 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval372Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval372Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval372Path.lineWidth = 1;
        [oval372Path stroke];

        CGContextRestoreGState(context);


        //// Oval 363 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -53.48, -16.67);
        CGContextRotateCTM(context, 6.8 * M_PI / 180);

        UIBezierPath* oval363Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.74, -4, 31.83, 18.62)];
        [color3 setFill];
        [oval363Path fill];

        ////// Oval 363 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval363Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval363Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval363Path.lineWidth = 1;
        [oval363Path stroke];

        CGContextRestoreGState(context);


        //// Oval 369 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -32.58, -13.16);
        CGContextRotateCTM(context, 6.8 * M_PI / 180);

        UIBezierPath* oval369Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.78, -4.24, 33.73, 19.13)];
        [color3 setFill];
        [oval369Path fill];

        ////// Oval 369 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval369Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval369Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval369Path.lineWidth = 1;
        [oval369Path stroke];

        CGContextRestoreGState(context);


        //// Oval 365 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 22.37, -7.89);
        CGContextRotateCTM(context, 6.8 * M_PI / 180);

        UIBezierPath* oval365Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.77, -4.14, 32.94, 18.97)];
        [color3 setFill];
        [oval365Path fill];

        ////// Oval 365 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval365Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval365Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval365Path.lineWidth = 1;
        [oval365Path stroke];

        CGContextRestoreGState(context);


        //// Oval 367 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -37.39, -1.83);
        CGContextRotateCTM(context, 6.8 * M_PI / 180);

        UIBezierPath* oval367Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.48, -3.53, 28.11, 15.93)];
        [color3 setFill];
        [oval367Path fill];

        ////// Oval 367 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval367Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval367Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval367Path.lineWidth = 1;
        [oval367Path stroke];

        CGContextRestoreGState(context);


        //// Oval 43 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 10.55, -0.1);
        CGContextRotateCTM(context, 6.8 * M_PI / 180);

        UIBezierPath* oval43Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.74, -4, 31.83, 18.62)];
        [color3 setFill];
        [oval43Path fill];

        ////// Oval 43 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval43Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval43Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval43Path.lineWidth = 1;
        [oval43Path stroke];

        CGContextRestoreGState(context);


        //// Oval 366 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -12.38, -0.99);
        CGContextRotateCTM(context, 6.8 * M_PI / 180);

        UIBezierPath* oval366Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.74, -4, 31.83, 18.62)];
        [color3 setFill];
        [oval366Path fill];

        ////// Oval 366 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval366Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval366Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval366Path.lineWidth = 1;
        [oval366Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 2 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 379.88, 52.33);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.11, 18.72)];
        [color3 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];

        CGContextRestoreGState(context);


        //// Oval 6 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 371.7, 61.37);
        CGContextRotateCTM(context, 3.04 * M_PI / 180);

        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-16.87, -11.33, 33.73, 22.66)];
        [color3 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];

        CGContextRestoreGState(context);


        //// Oval 17 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 357.23, 70.14);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.99, 18.64)];
        [color3 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];

        CGContextRestoreGState(context);


        //// Oval 18 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 392.8, 75.08);
        CGContextRotateCTM(context, 0.46 * M_PI / 180);

        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-18.02, -10.86, 36.04, 21.72)];
        [color3 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];

        CGContextRestoreGState(context);


        //// Oval 20 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 402.07, 55.17);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.8, 19.95)];
        [color3 setFill];
        [oval20Path fill];

        ////// Oval 20 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval20Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval20Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];

        CGContextRestoreGState(context);


        //// Oval 22 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 325.23, 56.04);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.86, 18.45)];
        [color3 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];

        CGContextRestoreGState(context);


        //// Oval 16 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 352.79, 73.56);
        CGContextRotateCTM(context, -3.15 * M_PI / 180);

        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-14.87, -9.33, 29.73, 18.66)];
        [color3 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];

        CGContextRestoreGState(context);


        //// Oval 19 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 398.58, 69.16);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.73, 18.66)];
        [color3 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(105, 145, 32, 20)];
        [color3 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 33 Drawing
        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(77, 139, 35, 22)];
        [color3 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];


        //// Oval 34 Drawing
        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(49.5, 138.5, 33, 22)];
        [color3 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];


        //// Oval 35 Drawing
        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(18.5, 142, 36, 21)];
        [color3 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];


        //// Oval 36 Drawing
        UIBezierPath* oval36Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-4.5, 140.5, 28, 20)];
        [color3 setFill];
        [oval36Path fill];

        ////// Oval 36 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval36Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval36Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval36Path.lineWidth = 1;
        [oval36Path stroke];


        //// Oval 37 Drawing
        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(3, 144, 33, 21)];
        [color3 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];


        //// Oval 38 Drawing
        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(24, 149.5, 34, 21)];
        [color3 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];


        //// Oval 39 Drawing
        UIBezierPath* oval39Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(80.5, 147.5, 36, 24)];
        [color3 setFill];
        [oval39Path fill];

        ////// Oval 39 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval39Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval39Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval39Path.lineWidth = 1;
        [oval39Path stroke];


        //// Oval 40 Drawing
        UIBezierPath* oval40Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(52, 150, 35, 19)];
        [color3 setFill];
        [oval40Path fill];

        ////// Oval 40 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval40Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval40Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval40Path.lineWidth = 1;
        [oval40Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 5
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 29 Drawing
        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(384.5, 171.5, 35, 23)];
        [color10 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];


        //// Oval 26 Drawing
        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(369.5, 159.5, 31, 22)];
        [color10 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];


        //// Oval 27 Drawing
        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(392, 157.5, 35, 25)];
        [color10 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];


        //// Oval 31 Drawing
        UIBezierPath* oval31Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(358, 149.5, 32, 21)];
        [color10 setFill];
        [oval31Path fill];

        ////// Oval 31 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval31Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval31Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval31Path.lineWidth = 1;
        [oval31Path stroke];


        //// Oval 32 Drawing
        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(385.5, 151, 32, 18)];
        [color10 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 38
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 448 Drawing
        UIBezierPath* oval448Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(327.5, 138, 25, 20)];
        [color10 setFill];
        [oval448Path fill];

        ////// Oval 448 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval448Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval448Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval448Path.lineWidth = 1;
        [oval448Path stroke];


        //// Oval 446 Drawing
        UIBezierPath* oval446Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(384.5, 134, 31, 22)];
        [color10 setFill];
        [oval446Path fill];

        ////// Oval 446 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval446Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval446Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval446Path.lineWidth = 1;
        [oval446Path stroke];


        //// Oval 447 Drawing
        UIBezierPath* oval447Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(358.5, 133.5, 33, 21)];
        [color10 setFill];
        [oval447Path fill];

        ////// Oval 447 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval447Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval447Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval447Path.lineWidth = 1;
        [oval447Path stroke];


        //// Oval 449 Drawing
        UIBezierPath* oval449Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(341, 138.5, 28, 21)];
        [color10 setFill];
        [oval449Path fill];

        ////// Oval 449 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval449Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval449Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval449Path.lineWidth = 1;
        [oval449Path stroke];


        //// Oval 450 Drawing
        UIBezierPath* oval450Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(364, 141, 32, 21)];
        [color10 setFill];
        [oval450Path fill];

        ////// Oval 450 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval450Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval450Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval450Path.lineWidth = 1;
        [oval450Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 7
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(173, 77, 30, 16)];
        [color10 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 57 Drawing
        UIBezierPath* oval57Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(148.5, 76, 30, 16)];
        [color10 setFill];
        [oval57Path fill];

        ////// Oval 57 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval57Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval57Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval57Path.lineWidth = 1;
        [oval57Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(190.5, 81, 32, 17)];
        [color10 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 60 Drawing
        UIBezierPath* oval60Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(132, 85, 30, 17)];
        [color10 setFill];
        [oval60Path fill];

        ////// Oval 60 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval60Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval60Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval60Path.lineWidth = 1;
        [oval60Path stroke];


        //// Oval 61 Drawing
        UIBezierPath* oval61Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(153, 81.5, 33, 19)];
        [color10 setFill];
        [oval61Path fill];

        ////// Oval 61 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval61Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval61Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval61Path.lineWidth = 1;
        [oval61Path stroke];


        //// Oval 63 Drawing
        UIBezierPath* oval63Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(176.5, 88.5, 25, 12)];
        [color10 setFill];
        [oval63Path fill];

        ////// Oval 63 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval63Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval63Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval63Path.lineWidth = 1;
        [oval63Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas18
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* color2 = [UIColor colorWithRed: 0.733 green: 0.73 blue: 0.73 alpha: 1];
    UIColor* color7 = [UIColor colorWithRed: 0.644 green: 0.169 blue: 0.012 alpha: 1];
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* shadow2Color = [UIColor colorWithRed: 1 green: 0.799 blue: 0.229 alpha: 1];
    UIColor* moonGradientColor = [UIColor colorWithRed: 1 green: 0.945 blue: 0.698 alpha: 1];
    UIColor* moonGradientColor2 = [UIColor colorWithRed: 0.538 green: 0.507 blue: 0.337 alpha: 1];
    UIColor* darkSideMoonGradientColor = [UIColor colorWithRed: 0.723 green: 0.715 blue: 0.715 alpha: 1];
    UIColor* darkSideMoonGradientColor2 = [UIColor colorWithRed: 0.189 green: 0.184 blue: 0.184 alpha: 1];
    UIColor* sunBallGradientColor = [UIColor colorWithRed: 0.989 green: 0.508 blue: 0.012 alpha: 0.733];
    UIColor* sunBallGradientColor2 = [UIColor colorWithRed: 0.938 green: 0.137 blue: 0 alpha: 0.834];
    UIColor* sunStarDradientColor = [UIColor colorWithRed: 1 green: 0.765 blue: 0 alpha: 0.841];
    UIColor* sunStarDradientColor2 = [UIColor colorWithRed: 1 green: 0.386 blue: 0 alpha: 0.94];
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* color13 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.525];
    UIColor* lightningShadowColor = [UIColor colorWithRed: 1 green: 0.979 blue: 0.615 alpha: 1];
    UIColor* dayLightningGradientColor = [UIColor colorWithRed: 0.993 green: 0.357 blue: 0 alpha: 0.853];
    UIColor* dayLightningGradientColor2 = [UIColor colorWithRed: 1 green: 0.952 blue: 0.162 alpha: 0.822];
    UIColor* tableViewGradientColor = [UIColor colorWithRed: 0.004 green: 0.167 blue: 0.631 alpha: 1];
    UIColor* tableViewGradientColor3 = [UIColor colorWithRed: 0.003 green: 0.014 blue: 0.024 alpha: 1];
    UIColor* tableViewGradientColor4 = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* gradientColor3 = [UIColor colorWithRed: 0.235 green: 0.908 blue: 0.577 alpha: 1];
    UIColor* gradientColor4 = [UIColor colorWithRed: 0.132 green: 0.959 blue: 0.961 alpha: 1];
    UIColor* gradientColor5 = [UIColor colorWithRed: 0.162 green: 0.396 blue: 0.951 alpha: 1];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* innerMoonShadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Gradient Declarations
    CGFloat lightSideMoonGradientLocations[] = {0, 0.77, 1};
    CGGradientRef lightSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)moonGradientColor.CGColor, (id)[moonGradientColor blendedColorWithFraction: 0.5 ofColor: moonGradientColor2].CGColor, (id)moonGradientColor2.CGColor], lightSideMoonGradientLocations);
    CGFloat darkSideMoonGradientLocations[] = {0, 0.55, 1};
    CGGradientRef darkSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)darkSideMoonGradientColor.CGColor, (id)[darkSideMoonGradientColor blendedColorWithFraction: 0.5 ofColor: darkSideMoonGradientColor2].CGColor, (id)darkSideMoonGradientColor2.CGColor], darkSideMoonGradientLocations);
    CGFloat sunBallGradientLocations[] = {0, 0.75, 1};
    CGGradientRef sunBallGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunBallGradientColor.CGColor, (id)[sunBallGradientColor blendedColorWithFraction: 0.5 ofColor: sunBallGradientColor2].CGColor, (id)sunBallGradientColor2.CGColor], sunBallGradientLocations);
    CGFloat sunStarDradientLocations[] = {0, 1};
    CGGradientRef sunStarDradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunStarDradientColor.CGColor, (id)sunStarDradientColor2.CGColor], sunStarDradientLocations);
    CGFloat dayLightningGradientLocations[] = {0, 0.67, 1};
    CGGradientRef dayLightningGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)dayLightningGradientColor.CGColor, (id)[dayLightningGradientColor blendedColorWithFraction: 0.5 ofColor: dayLightningGradientColor2].CGColor, (id)dayLightningGradientColor2.CGColor], dayLightningGradientLocations);
    CGFloat tableViewGradientLocations[] = {0, 0.3, 0.42, 0.86, 1};
    CGGradientRef tableViewGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)tableViewGradientColor4.CGColor, (id)[tableViewGradientColor4 blendedColorWithFraction: 0.5 ofColor: tableViewGradientColor3].CGColor, (id)tableViewGradientColor3.CGColor, (id)[tableViewGradientColor3 blendedColorWithFraction: 0.5 ofColor: tableViewGradientColor].CGColor, (id)tableViewGradientColor.CGColor], tableViewGradientLocations);
    CGFloat earthGradientLocations[] = {0.03, 0.27, 0.57, 0.83, 1};
    CGGradientRef earthGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)gradientColor5.CGColor, (id)[gradientColor5 blendedColorWithFraction: 0.5 ofColor: gradientColor3].CGColor, (id)gradientColor3.CGColor, (id)[gradientColor3 blendedColorWithFraction: 0.5 ofColor: gradientColor4].CGColor, (id)gradientColor4.CGColor], earthGradientLocations);

    //// Shadow Declarations
    NSShadow* moonShadow = [[NSShadow alloc] init];
    [moonShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.63]];
    [moonShadow setShadowOffset: CGSizeMake(28.1, -14.1)];
    [moonShadow setShadowBlurRadius: 20];
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* moonFrontShadow = [[NSShadow alloc] init];
    [moonFrontShadow setShadowColor: [moonFrontShadowColor colorWithAlphaComponent: CGColorGetAlpha(moonFrontShadowColor.CGColor) * 0.17]];
    [moonFrontShadow setShadowOffset: CGSizeMake(-33.1, 66.1)];
    [moonFrontShadow setShadowBlurRadius: 57];
    NSShadow* lightningShadow = [[NSShadow alloc] init];
    [lightningShadow setShadowColor: lightningShadowColor];
    [lightningShadow setShadowOffset: CGSizeMake(0.1, 16.1)];
    [lightningShadow setShadowBlurRadius: 11];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];
    NSShadow* innerMoonLightSideShadow = [[NSShadow alloc] init];
    [innerMoonLightSideShadow setShadowColor: [innerMoonShadowColor colorWithAlphaComponent: CGColorGetAlpha(innerMoonShadowColor.CGColor) * 0.5]];
    [innerMoonLightSideShadow setShadowOffset: CGSizeMake(-1.1, -1.1)];
    [innerMoonLightSideShadow setShadowBlurRadius: 2];
    NSShadow* innerMoonDarksideShadow = [[NSShadow alloc] init];
    [innerMoonDarksideShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.43]];
    [innerMoonDarksideShadow setShadowOffset: CGSizeMake(-9.1, 1.1)];
    [innerMoonDarksideShadow setShadowBlurRadius: 10];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 414, 736)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, tableViewGradient, CGPointMake(207, -0), CGPointMake(207, 736), 0);
    CGContextRestoreGState(context);


    //// Group 33
    {
        //// Star 5 Drawing
        UIBezierPath* star5Path = [UIBezierPath bezierPath];
        [star5Path moveToPoint: CGPointMake(176, 38.5)];
        [star5Path addLineToPoint: CGPointMake(178.82, 42.62)];
        [star5Path addLineToPoint: CGPointMake(183.61, 44.03)];
        [star5Path addLineToPoint: CGPointMake(180.57, 47.98)];
        [star5Path addLineToPoint: CGPointMake(180.7, 52.97)];
        [star5Path addLineToPoint: CGPointMake(176, 51.3)];
        [star5Path addLineToPoint: CGPointMake(171.3, 52.97)];
        [star5Path addLineToPoint: CGPointMake(171.43, 47.98)];
        [star5Path addLineToPoint: CGPointMake(168.39, 44.03)];
        [star5Path addLineToPoint: CGPointMake(173.18, 42.62)];
        [star5Path closePath];
        [color11 setFill];
        [star5Path fill];
        [shadow2Color setStroke];
        star5Path.lineWidth = 1;
        [star5Path stroke];


        //// Star 23 Drawing
        UIBezierPath* star23Path = [UIBezierPath bezierPath];
        [star23Path moveToPoint: CGPointMake(220.5, 58)];
        [star23Path addLineToPoint: CGPointMake(222.97, 61.6)];
        [star23Path addLineToPoint: CGPointMake(227.16, 62.84)];
        [star23Path addLineToPoint: CGPointMake(224.49, 66.3)];
        [star23Path addLineToPoint: CGPointMake(224.61, 70.66)];
        [star23Path addLineToPoint: CGPointMake(220.5, 69.2)];
        [star23Path addLineToPoint: CGPointMake(216.39, 70.66)];
        [star23Path addLineToPoint: CGPointMake(216.51, 66.3)];
        [star23Path addLineToPoint: CGPointMake(213.84, 62.84)];
        [star23Path addLineToPoint: CGPointMake(218.03, 61.6)];
        [star23Path closePath];
        [color11 setFill];
        [star23Path fill];
        [shadow2Color setStroke];
        star23Path.lineWidth = 1;
        [star23Path stroke];


        //// Star 24 Drawing
        UIBezierPath* star24Path = [UIBezierPath bezierPath];
        [star24Path moveToPoint: CGPointMake(220.5, 17)];
        [star24Path addLineToPoint: CGPointMake(223.32, 21.12)];
        [star24Path addLineToPoint: CGPointMake(228.11, 22.53)];
        [star24Path addLineToPoint: CGPointMake(225.07, 26.48)];
        [star24Path addLineToPoint: CGPointMake(225.2, 31.47)];
        [star24Path addLineToPoint: CGPointMake(220.5, 29.8)];
        [star24Path addLineToPoint: CGPointMake(215.8, 31.47)];
        [star24Path addLineToPoint: CGPointMake(215.93, 26.48)];
        [star24Path addLineToPoint: CGPointMake(212.89, 22.53)];
        [star24Path addLineToPoint: CGPointMake(217.68, 21.12)];
        [star24Path closePath];
        [color11 setFill];
        [star24Path fill];
        [shadow2Color setStroke];
        star24Path.lineWidth = 1;
        [star24Path stroke];


        //// Star 25 Drawing
        UIBezierPath* star25Path = [UIBezierPath bezierPath];
        [star25Path moveToPoint: CGPointMake(275.5, 27)];
        [star25Path addLineToPoint: CGPointMake(277.26, 29.57)];
        [star25Path addLineToPoint: CGPointMake(280.26, 30.45)];
        [star25Path addLineToPoint: CGPointMake(278.35, 32.93)];
        [star25Path addLineToPoint: CGPointMake(278.44, 36.05)];
        [star25Path addLineToPoint: CGPointMake(275.5, 35)];
        [star25Path addLineToPoint: CGPointMake(272.56, 36.05)];
        [star25Path addLineToPoint: CGPointMake(272.65, 32.93)];
        [star25Path addLineToPoint: CGPointMake(270.74, 30.45)];
        [star25Path addLineToPoint: CGPointMake(273.74, 29.57)];
        [star25Path closePath];
        [color11 setFill];
        [star25Path fill];
        [shadow2Color setStroke];
        star25Path.lineWidth = 1;
        [star25Path stroke];


        //// Star 26 Drawing
        UIBezierPath* star26Path = [UIBezierPath bezierPath];
        [star26Path moveToPoint: CGPointMake(263, 51.5)];
        [star26Path addLineToPoint: CGPointMake(266.17, 56.13)];
        [star26Path addLineToPoint: CGPointMake(271.56, 57.72)];
        [star26Path addLineToPoint: CGPointMake(268.14, 62.17)];
        [star26Path addLineToPoint: CGPointMake(268.29, 67.78)];
        [star26Path addLineToPoint: CGPointMake(263, 65.9)];
        [star26Path addLineToPoint: CGPointMake(257.71, 67.78)];
        [star26Path addLineToPoint: CGPointMake(257.86, 62.17)];
        [star26Path addLineToPoint: CGPointMake(254.44, 57.72)];
        [star26Path addLineToPoint: CGPointMake(259.83, 56.13)];
        [star26Path closePath];
        [color11 setFill];
        [star26Path fill];
        [shadow2Color setStroke];
        star26Path.lineWidth = 1;
        [star26Path stroke];


        //// Star 27 Drawing
        UIBezierPath* star27Path = [UIBezierPath bezierPath];
        [star27Path moveToPoint: CGPointMake(220.5, 123.5)];
        [star27Path addLineToPoint: CGPointMake(223.67, 128.13)];
        [star27Path addLineToPoint: CGPointMake(229.06, 129.72)];
        [star27Path addLineToPoint: CGPointMake(225.64, 134.17)];
        [star27Path addLineToPoint: CGPointMake(225.79, 139.78)];
        [star27Path addLineToPoint: CGPointMake(220.5, 137.9)];
        [star27Path addLineToPoint: CGPointMake(215.21, 139.78)];
        [star27Path addLineToPoint: CGPointMake(215.36, 134.17)];
        [star27Path addLineToPoint: CGPointMake(211.94, 129.72)];
        [star27Path addLineToPoint: CGPointMake(217.33, 128.13)];
        [star27Path closePath];
        [color11 setFill];
        [star27Path fill];
        [shadow2Color setStroke];
        star27Path.lineWidth = 1;
        [star27Path stroke];


        //// Star 28 Drawing
        UIBezierPath* star28Path = [UIBezierPath bezierPath];
        [star28Path moveToPoint: CGPointMake(111.5, 7.5)];
        [star28Path addLineToPoint: CGPointMake(114.67, 12.13)];
        [star28Path addLineToPoint: CGPointMake(120.06, 13.72)];
        [star28Path addLineToPoint: CGPointMake(116.64, 18.17)];
        [star28Path addLineToPoint: CGPointMake(116.79, 23.78)];
        [star28Path addLineToPoint: CGPointMake(111.5, 21.9)];
        [star28Path addLineToPoint: CGPointMake(106.21, 23.78)];
        [star28Path addLineToPoint: CGPointMake(106.36, 18.17)];
        [star28Path addLineToPoint: CGPointMake(102.94, 13.72)];
        [star28Path addLineToPoint: CGPointMake(108.33, 12.13)];
        [star28Path closePath];
        [color11 setFill];
        [star28Path fill];
        [shadow2Color setStroke];
        star28Path.lineWidth = 1;
        [star28Path stroke];


        //// Star 29 Drawing
        UIBezierPath* star29Path = [UIBezierPath bezierPath];
        [star29Path moveToPoint: CGPointMake(189, 72)];
        [star29Path addLineToPoint: CGPointMake(191.12, 75.09)];
        [star29Path addLineToPoint: CGPointMake(194.71, 76.15)];
        [star29Path addLineToPoint: CGPointMake(192.42, 79.11)];
        [star29Path addLineToPoint: CGPointMake(192.53, 82.85)];
        [star29Path addLineToPoint: CGPointMake(189, 81.6)];
        [star29Path addLineToPoint: CGPointMake(185.47, 82.85)];
        [star29Path addLineToPoint: CGPointMake(185.58, 79.11)];
        [star29Path addLineToPoint: CGPointMake(183.29, 76.15)];
        [star29Path addLineToPoint: CGPointMake(186.88, 75.09)];
        [star29Path closePath];
        [color11 setFill];
        [star29Path fill];
        [shadow2Color setStroke];
        star29Path.lineWidth = 1;
        [star29Path stroke];


        //// Star 30 Drawing
        UIBezierPath* star30Path = [UIBezierPath bezierPath];
        [star30Path moveToPoint: CGPointMake(169.5, 97.5)];
        [star30Path addLineToPoint: CGPointMake(172.67, 102.13)];
        [star30Path addLineToPoint: CGPointMake(178.06, 103.72)];
        [star30Path addLineToPoint: CGPointMake(174.64, 108.17)];
        [star30Path addLineToPoint: CGPointMake(174.79, 113.78)];
        [star30Path addLineToPoint: CGPointMake(169.5, 111.9)];
        [star30Path addLineToPoint: CGPointMake(164.21, 113.78)];
        [star30Path addLineToPoint: CGPointMake(164.36, 108.17)];
        [star30Path addLineToPoint: CGPointMake(160.94, 103.72)];
        [star30Path addLineToPoint: CGPointMake(166.33, 102.13)];
        [star30Path closePath];
        [color11 setFill];
        [star30Path fill];
        [shadow2Color setStroke];
        star30Path.lineWidth = 1;
        [star30Path stroke];


        //// Star 31 Drawing
        UIBezierPath* star31Path = [UIBezierPath bezierPath];
        [star31Path moveToPoint: CGPointMake(391.5, 203.5)];
        [star31Path addLineToPoint: CGPointMake(395.38, 209.16)];
        [star31Path addLineToPoint: CGPointMake(401.96, 211.1)];
        [star31Path addLineToPoint: CGPointMake(397.78, 216.54)];
        [star31Path addLineToPoint: CGPointMake(397.97, 223.4)];
        [star31Path addLineToPoint: CGPointMake(391.5, 221.1)];
        [star31Path addLineToPoint: CGPointMake(385.03, 223.4)];
        [star31Path addLineToPoint: CGPointMake(385.22, 216.54)];
        [star31Path addLineToPoint: CGPointMake(381.04, 211.1)];
        [star31Path addLineToPoint: CGPointMake(387.62, 209.16)];
        [star31Path closePath];
        [color11 setFill];
        [star31Path fill];
        [shadow2Color setStroke];
        star31Path.lineWidth = 1;
        [star31Path stroke];


        //// Star 32 Drawing
        UIBezierPath* star32Path = [UIBezierPath bezierPath];
        [star32Path moveToPoint: CGPointMake(183, 171.5)];
        [star32Path addLineToPoint: CGPointMake(187.58, 178.19)];
        [star32Path addLineToPoint: CGPointMake(195.36, 180.48)];
        [star32Path addLineToPoint: CGPointMake(190.42, 186.91)];
        [star32Path addLineToPoint: CGPointMake(190.64, 195.02)];
        [star32Path addLineToPoint: CGPointMake(183, 192.3)];
        [star32Path addLineToPoint: CGPointMake(175.36, 195.02)];
        [star32Path addLineToPoint: CGPointMake(175.58, 186.91)];
        [star32Path addLineToPoint: CGPointMake(170.64, 180.48)];
        [star32Path addLineToPoint: CGPointMake(178.42, 178.19)];
        [star32Path closePath];
        [color11 setFill];
        [star32Path fill];
        [shadow2Color setStroke];
        star32Path.lineWidth = 1;
        [star32Path stroke];


        //// Star 33 Drawing
        UIBezierPath* star33Path = [UIBezierPath bezierPath];
        [star33Path moveToPoint: CGPointMake(198, 65.5)];
        [star33Path addLineToPoint: CGPointMake(199.06, 67.04)];
        [star33Path addLineToPoint: CGPointMake(200.85, 67.57)];
        [star33Path addLineToPoint: CGPointMake(199.71, 69.06)];
        [star33Path addLineToPoint: CGPointMake(199.76, 70.93)];
        [star33Path addLineToPoint: CGPointMake(198, 70.3)];
        [star33Path addLineToPoint: CGPointMake(196.24, 70.93)];
        [star33Path addLineToPoint: CGPointMake(196.29, 69.06)];
        [star33Path addLineToPoint: CGPointMake(195.15, 67.57)];
        [star33Path addLineToPoint: CGPointMake(196.94, 67.04)];
        [star33Path closePath];
        [color11 setFill];
        [star33Path fill];
        [shadow2Color setStroke];
        star33Path.lineWidth = 1;
        [star33Path stroke];


        //// Star 34 Drawing
        UIBezierPath* star34Path = [UIBezierPath bezierPath];
        [star34Path moveToPoint: CGPointMake(207, 59.5)];
        [star34Path addLineToPoint: CGPointMake(208.06, 61.04)];
        [star34Path addLineToPoint: CGPointMake(209.85, 61.57)];
        [star34Path addLineToPoint: CGPointMake(208.71, 63.06)];
        [star34Path addLineToPoint: CGPointMake(208.76, 64.93)];
        [star34Path addLineToPoint: CGPointMake(207, 64.3)];
        [star34Path addLineToPoint: CGPointMake(205.24, 64.93)];
        [star34Path addLineToPoint: CGPointMake(205.29, 63.06)];
        [star34Path addLineToPoint: CGPointMake(204.15, 61.57)];
        [star34Path addLineToPoint: CGPointMake(205.94, 61.04)];
        [star34Path closePath];
        [color11 setFill];
        [star34Path fill];
        [shadow2Color setStroke];
        star34Path.lineWidth = 1;
        [star34Path stroke];


        //// Star Drawing
        UIBezierPath* starPath = [UIBezierPath bezierPath];
        [starPath moveToPoint: CGPointMake(29, 148.5)];
        [starPath addLineToPoint: CGPointMake(33.58, 155.19)];
        [starPath addLineToPoint: CGPointMake(41.36, 157.48)];
        [starPath addLineToPoint: CGPointMake(36.42, 163.91)];
        [starPath addLineToPoint: CGPointMake(36.64, 172.02)];
        [starPath addLineToPoint: CGPointMake(29, 169.3)];
        [starPath addLineToPoint: CGPointMake(21.36, 172.02)];
        [starPath addLineToPoint: CGPointMake(21.58, 163.91)];
        [starPath addLineToPoint: CGPointMake(16.64, 157.48)];
        [starPath addLineToPoint: CGPointMake(24.42, 155.19)];
        [starPath closePath];
        [color11 setFill];
        [starPath fill];
        [shadow2Color setStroke];
        starPath.lineWidth = 1;
        [starPath stroke];


        //// Star 2 Drawing
        UIBezierPath* star2Path = [UIBezierPath bezierPath];
        [star2Path moveToPoint: CGPointMake(18.5, 26)];
        [star2Path addLineToPoint: CGPointMake(21.32, 30.12)];
        [star2Path addLineToPoint: CGPointMake(26.11, 31.53)];
        [star2Path addLineToPoint: CGPointMake(23.07, 35.48)];
        [star2Path addLineToPoint: CGPointMake(23.2, 40.47)];
        [star2Path addLineToPoint: CGPointMake(18.5, 38.8)];
        [star2Path addLineToPoint: CGPointMake(13.8, 40.47)];
        [star2Path addLineToPoint: CGPointMake(13.93, 35.48)];
        [star2Path addLineToPoint: CGPointMake(10.89, 31.53)];
        [star2Path addLineToPoint: CGPointMake(15.68, 30.12)];
        [star2Path closePath];
        [color11 setFill];
        [star2Path fill];
        [shadow2Color setStroke];
        star2Path.lineWidth = 1;
        [star2Path stroke];


        //// Star 3 Drawing
        UIBezierPath* star3Path = [UIBezierPath bezierPath];
        [star3Path moveToPoint: CGPointMake(50, 16)];
        [star3Path addLineToPoint: CGPointMake(52.12, 19.09)];
        [star3Path addLineToPoint: CGPointMake(55.71, 20.15)];
        [star3Path addLineToPoint: CGPointMake(53.42, 23.11)];
        [star3Path addLineToPoint: CGPointMake(53.53, 26.85)];
        [star3Path addLineToPoint: CGPointMake(50, 25.6)];
        [star3Path addLineToPoint: CGPointMake(46.47, 26.85)];
        [star3Path addLineToPoint: CGPointMake(46.58, 23.11)];
        [star3Path addLineToPoint: CGPointMake(44.29, 20.15)];
        [star3Path addLineToPoint: CGPointMake(47.88, 19.09)];
        [star3Path closePath];
        [color11 setFill];
        [star3Path fill];
        [shadow2Color setStroke];
        star3Path.lineWidth = 1;
        [star3Path stroke];


        //// Star 11 Drawing
        UIBezierPath* star11Path = [UIBezierPath bezierPath];
        [star11Path moveToPoint: CGPointMake(138.5, 45)];
        [star11Path addLineToPoint: CGPointMake(140.62, 48.09)];
        [star11Path addLineToPoint: CGPointMake(144.21, 49.15)];
        [star11Path addLineToPoint: CGPointMake(141.92, 52.11)];
        [star11Path addLineToPoint: CGPointMake(142.03, 55.85)];
        [star11Path addLineToPoint: CGPointMake(138.5, 54.6)];
        [star11Path addLineToPoint: CGPointMake(134.97, 55.85)];
        [star11Path addLineToPoint: CGPointMake(135.08, 52.11)];
        [star11Path addLineToPoint: CGPointMake(132.79, 49.15)];
        [star11Path addLineToPoint: CGPointMake(136.38, 48.09)];
        [star11Path closePath];
        [color11 setFill];
        [star11Path fill];
        [shadow2Color setStroke];
        star11Path.lineWidth = 1;
        [star11Path stroke];


        //// Star 6 Drawing
        UIBezierPath* star6Path = [UIBezierPath bezierPath];
        [star6Path moveToPoint: CGPointMake(71.5, 191.5)];
        [star6Path addLineToPoint: CGPointMake(75.03, 196.65)];
        [star6Path addLineToPoint: CGPointMake(81.01, 198.41)];
        [star6Path addLineToPoint: CGPointMake(77.21, 203.35)];
        [star6Path addLineToPoint: CGPointMake(77.38, 209.59)];
        [star6Path addLineToPoint: CGPointMake(71.5, 207.5)];
        [star6Path addLineToPoint: CGPointMake(65.62, 209.59)];
        [star6Path addLineToPoint: CGPointMake(65.79, 203.35)];
        [star6Path addLineToPoint: CGPointMake(61.99, 198.41)];
        [star6Path addLineToPoint: CGPointMake(67.97, 196.65)];
        [star6Path closePath];
        [color11 setFill];
        [star6Path fill];
        [shadow2Color setStroke];
        star6Path.lineWidth = 1;
        [star6Path stroke];


        //// Star 9 Drawing
        UIBezierPath* star9Path = [UIBezierPath bezierPath];
        [star9Path moveToPoint: CGPointMake(13.5, 110.5)];
        [star9Path addLineToPoint: CGPointMake(15.97, 114.1)];
        [star9Path addLineToPoint: CGPointMake(20.16, 115.34)];
        [star9Path addLineToPoint: CGPointMake(17.49, 118.8)];
        [star9Path addLineToPoint: CGPointMake(17.61, 123.16)];
        [star9Path addLineToPoint: CGPointMake(13.5, 121.7)];
        [star9Path addLineToPoint: CGPointMake(9.39, 123.16)];
        [star9Path addLineToPoint: CGPointMake(9.51, 118.8)];
        [star9Path addLineToPoint: CGPointMake(6.84, 115.34)];
        [star9Path addLineToPoint: CGPointMake(11.03, 114.1)];
        [star9Path closePath];
        [color11 setFill];
        [star9Path fill];
        [shadow2Color setStroke];
        star9Path.lineWidth = 1;
        [star9Path stroke];


        //// Star 19 Drawing
        UIBezierPath* star19Path = [UIBezierPath bezierPath];
        [star19Path moveToPoint: CGPointMake(25.5, 214.5)];
        [star19Path addLineToPoint: CGPointMake(30.08, 221.19)];
        [star19Path addLineToPoint: CGPointMake(37.86, 223.48)];
        [star19Path addLineToPoint: CGPointMake(32.92, 229.91)];
        [star19Path addLineToPoint: CGPointMake(33.14, 238.02)];
        [star19Path addLineToPoint: CGPointMake(25.5, 235.3)];
        [star19Path addLineToPoint: CGPointMake(17.86, 238.02)];
        [star19Path addLineToPoint: CGPointMake(18.08, 229.91)];
        [star19Path addLineToPoint: CGPointMake(13.14, 223.48)];
        [star19Path addLineToPoint: CGPointMake(20.92, 221.19)];
        [star19Path closePath];
        [color11 setFill];
        [star19Path fill];
        [shadow2Color setStroke];
        star19Path.lineWidth = 1;
        [star19Path stroke];


        //// Star 21 Drawing
        UIBezierPath* star21Path = [UIBezierPath bezierPath];
        [star21Path moveToPoint: CGPointMake(126.5, 204)];
        [star21Path addLineToPoint: CGPointMake(130.03, 209.15)];
        [star21Path addLineToPoint: CGPointMake(136.01, 210.91)];
        [star21Path addLineToPoint: CGPointMake(132.21, 215.85)];
        [star21Path addLineToPoint: CGPointMake(132.38, 222.09)];
        [star21Path addLineToPoint: CGPointMake(126.5, 220)];
        [star21Path addLineToPoint: CGPointMake(120.62, 222.09)];
        [star21Path addLineToPoint: CGPointMake(120.79, 215.85)];
        [star21Path addLineToPoint: CGPointMake(116.99, 210.91)];
        [star21Path addLineToPoint: CGPointMake(122.97, 209.15)];
        [star21Path closePath];
        [color11 setFill];
        [star21Path fill];
        [shadow2Color setStroke];
        star21Path.lineWidth = 1;
        [star21Path stroke];


        //// Group 2
        {
            //// Star 22 Drawing
            UIBezierPath* star22Path = [UIBezierPath bezierPath];
            [star22Path moveToPoint: CGPointMake(347.5, 184)];
            [star22Path addLineToPoint: CGPointMake(346.44, 182.46)];
            [star22Path addLineToPoint: CGPointMake(344.65, 181.93)];
            [star22Path addLineToPoint: CGPointMake(345.79, 180.44)];
            [star22Path addLineToPoint: CGPointMake(345.74, 178.57)];
            [star22Path addLineToPoint: CGPointMake(347.5, 179.2)];
            [star22Path addLineToPoint: CGPointMake(349.26, 178.57)];
            [star22Path addLineToPoint: CGPointMake(349.21, 180.44)];
            [star22Path addLineToPoint: CGPointMake(350.35, 181.93)];
            [star22Path addLineToPoint: CGPointMake(348.56, 182.46)];
            [star22Path closePath];
            [color11 setFill];
            [star22Path fill];


            //// Star 35 Drawing
            UIBezierPath* star35Path = [UIBezierPath bezierPath];
            [star35Path moveToPoint: CGPointMake(327, 181)];
            [star35Path addLineToPoint: CGPointMake(325.94, 179.46)];
            [star35Path addLineToPoint: CGPointMake(324.15, 178.93)];
            [star35Path addLineToPoint: CGPointMake(325.29, 177.44)];
            [star35Path addLineToPoint: CGPointMake(325.24, 175.57)];
            [star35Path addLineToPoint: CGPointMake(327, 176.2)];
            [star35Path addLineToPoint: CGPointMake(328.76, 175.57)];
            [star35Path addLineToPoint: CGPointMake(328.71, 177.44)];
            [star35Path addLineToPoint: CGPointMake(329.85, 178.93)];
            [star35Path addLineToPoint: CGPointMake(328.06, 179.46)];
            [star35Path closePath];
            [color11 setFill];
            [star35Path fill];


            //// Star 36 Drawing
            UIBezierPath* star36Path = [UIBezierPath bezierPath];
            [star36Path moveToPoint: CGPointMake(347.5, 189)];
            [star36Path addLineToPoint: CGPointMake(347.15, 188.49)];
            [star36Path addLineToPoint: CGPointMake(346.55, 188.31)];
            [star36Path addLineToPoint: CGPointMake(346.93, 187.81)];
            [star36Path addLineToPoint: CGPointMake(346.91, 187.19)];
            [star36Path addLineToPoint: CGPointMake(347.5, 187.4)];
            [star36Path addLineToPoint: CGPointMake(348.09, 187.19)];
            [star36Path addLineToPoint: CGPointMake(348.07, 187.81)];
            [star36Path addLineToPoint: CGPointMake(348.45, 188.31)];
            [star36Path addLineToPoint: CGPointMake(347.85, 188.49)];
            [star36Path closePath];
            [color11 setFill];
            [star36Path fill];


            //// Star 37 Drawing
            UIBezierPath* star37Path = [UIBezierPath bezierPath];
            [star37Path moveToPoint: CGPointMake(347, 194)];
            [star37Path addLineToPoint: CGPointMake(346.65, 193.49)];
            [star37Path addLineToPoint: CGPointMake(346.05, 193.31)];
            [star37Path addLineToPoint: CGPointMake(346.43, 192.81)];
            [star37Path addLineToPoint: CGPointMake(346.41, 192.19)];
            [star37Path addLineToPoint: CGPointMake(347, 192.4)];
            [star37Path addLineToPoint: CGPointMake(347.59, 192.19)];
            [star37Path addLineToPoint: CGPointMake(347.57, 192.81)];
            [star37Path addLineToPoint: CGPointMake(347.95, 193.31)];
            [star37Path addLineToPoint: CGPointMake(347.35, 193.49)];
            [star37Path closePath];
            [color11 setFill];
            [star37Path fill];


            //// Star 38 Drawing
            UIBezierPath* star38Path = [UIBezierPath bezierPath];
            [star38Path moveToPoint: CGPointMake(345.5, 198)];
            [star38Path addLineToPoint: CGPointMake(345.15, 197.49)];
            [star38Path addLineToPoint: CGPointMake(344.55, 197.31)];
            [star38Path addLineToPoint: CGPointMake(344.93, 196.81)];
            [star38Path addLineToPoint: CGPointMake(344.91, 196.19)];
            [star38Path addLineToPoint: CGPointMake(345.5, 196.4)];
            [star38Path addLineToPoint: CGPointMake(346.09, 196.19)];
            [star38Path addLineToPoint: CGPointMake(346.07, 196.81)];
            [star38Path addLineToPoint: CGPointMake(346.45, 197.31)];
            [star38Path addLineToPoint: CGPointMake(345.85, 197.49)];
            [star38Path closePath];
            [color11 setFill];
            [star38Path fill];


            //// Star 39 Drawing
            UIBezierPath* star39Path = [UIBezierPath bezierPath];
            [star39Path moveToPoint: CGPointMake(327.5, 186.5)];
            [star39Path addLineToPoint: CGPointMake(326.79, 185.47)];
            [star39Path addLineToPoint: CGPointMake(325.6, 185.12)];
            [star39Path addLineToPoint: CGPointMake(326.36, 184.13)];
            [star39Path addLineToPoint: CGPointMake(326.32, 182.88)];
            [star39Path addLineToPoint: CGPointMake(327.5, 183.3)];
            [star39Path addLineToPoint: CGPointMake(328.68, 182.88)];
            [star39Path addLineToPoint: CGPointMake(328.64, 184.13)];
            [star39Path addLineToPoint: CGPointMake(329.4, 185.12)];
            [star39Path addLineToPoint: CGPointMake(328.21, 185.47)];
            [star39Path closePath];
            [color11 setFill];
            [star39Path fill];


            //// Star 40 Drawing
            UIBezierPath* star40Path = [UIBezierPath bezierPath];
            [star40Path moveToPoint: CGPointMake(333.5, 177)];
            [star40Path addLineToPoint: CGPointMake(333.15, 176.49)];
            [star40Path addLineToPoint: CGPointMake(332.55, 176.31)];
            [star40Path addLineToPoint: CGPointMake(332.93, 175.81)];
            [star40Path addLineToPoint: CGPointMake(332.91, 175.19)];
            [star40Path addLineToPoint: CGPointMake(333.5, 175.4)];
            [star40Path addLineToPoint: CGPointMake(334.09, 175.19)];
            [star40Path addLineToPoint: CGPointMake(334.07, 175.81)];
            [star40Path addLineToPoint: CGPointMake(334.45, 176.31)];
            [star40Path addLineToPoint: CGPointMake(333.85, 176.49)];
            [star40Path closePath];
            [color11 setFill];
            [star40Path fill];


            //// Star 41 Drawing
            UIBezierPath* star41Path = [UIBezierPath bezierPath];
            [star41Path moveToPoint: CGPointMake(327.5, 191.5)];
            [star41Path addLineToPoint: CGPointMake(327.15, 190.99)];
            [star41Path addLineToPoint: CGPointMake(326.55, 190.81)];
            [star41Path addLineToPoint: CGPointMake(326.93, 190.31)];
            [star41Path addLineToPoint: CGPointMake(326.91, 189.69)];
            [star41Path addLineToPoint: CGPointMake(327.5, 189.9)];
            [star41Path addLineToPoint: CGPointMake(328.09, 189.69)];
            [star41Path addLineToPoint: CGPointMake(328.07, 190.31)];
            [star41Path addLineToPoint: CGPointMake(328.45, 190.81)];
            [star41Path addLineToPoint: CGPointMake(327.85, 190.99)];
            [star41Path closePath];
            [color11 setFill];
            [star41Path fill];


            //// Star 42 Drawing
            UIBezierPath* star42Path = [UIBezierPath bezierPath];
            [star42Path moveToPoint: CGPointMake(354.5, 184.5)];
            [star42Path addLineToPoint: CGPointMake(353.79, 183.47)];
            [star42Path addLineToPoint: CGPointMake(352.6, 183.12)];
            [star42Path addLineToPoint: CGPointMake(353.36, 182.13)];
            [star42Path addLineToPoint: CGPointMake(353.32, 180.88)];
            [star42Path addLineToPoint: CGPointMake(354.5, 181.3)];
            [star42Path addLineToPoint: CGPointMake(355.68, 180.88)];
            [star42Path addLineToPoint: CGPointMake(355.64, 182.13)];
            [star42Path addLineToPoint: CGPointMake(356.4, 183.12)];
            [star42Path addLineToPoint: CGPointMake(355.21, 183.47)];
            [star42Path closePath];
            [color11 setFill];
            [star42Path fill];


            //// Star 43 Drawing
            UIBezierPath* star43Path = [UIBezierPath bezierPath];
            [star43Path moveToPoint: CGPointMake(319.5, 180)];
            [star43Path addLineToPoint: CGPointMake(318.79, 178.97)];
            [star43Path addLineToPoint: CGPointMake(317.6, 178.62)];
            [star43Path addLineToPoint: CGPointMake(318.36, 177.63)];
            [star43Path addLineToPoint: CGPointMake(318.32, 176.38)];
            [star43Path addLineToPoint: CGPointMake(319.5, 176.8)];
            [star43Path addLineToPoint: CGPointMake(320.68, 176.38)];
            [star43Path addLineToPoint: CGPointMake(320.64, 177.63)];
            [star43Path addLineToPoint: CGPointMake(321.4, 178.62)];
            [star43Path addLineToPoint: CGPointMake(320.21, 178.97)];
            [star43Path closePath];
            [color11 setFill];
            [star43Path fill];


            //// Star 44 Drawing
            UIBezierPath* star44Path = [UIBezierPath bezierPath];
            [star44Path moveToPoint: CGPointMake(325.5, 198.5)];
            [star44Path addLineToPoint: CGPointMake(324.79, 197.47)];
            [star44Path addLineToPoint: CGPointMake(323.6, 197.12)];
            [star44Path addLineToPoint: CGPointMake(324.36, 196.13)];
            [star44Path addLineToPoint: CGPointMake(324.32, 194.88)];
            [star44Path addLineToPoint: CGPointMake(325.5, 195.3)];
            [star44Path addLineToPoint: CGPointMake(326.68, 194.88)];
            [star44Path addLineToPoint: CGPointMake(326.64, 196.13)];
            [star44Path addLineToPoint: CGPointMake(327.4, 197.12)];
            [star44Path addLineToPoint: CGPointMake(326.21, 197.47)];
            [star44Path closePath];
            [color11 setFill];
            [star44Path fill];


            //// Star 45 Drawing
            UIBezierPath* star45Path = [UIBezierPath bezierPath];
            [star45Path moveToPoint: CGPointMake(320.5, 198)];
            [star45Path addLineToPoint: CGPointMake(320.15, 197.49)];
            [star45Path addLineToPoint: CGPointMake(319.55, 197.31)];
            [star45Path addLineToPoint: CGPointMake(319.93, 196.81)];
            [star45Path addLineToPoint: CGPointMake(319.91, 196.19)];
            [star45Path addLineToPoint: CGPointMake(320.5, 196.4)];
            [star45Path addLineToPoint: CGPointMake(321.09, 196.19)];
            [star45Path addLineToPoint: CGPointMake(321.07, 196.81)];
            [star45Path addLineToPoint: CGPointMake(321.45, 197.31)];
            [star45Path addLineToPoint: CGPointMake(320.85, 197.49)];
            [star45Path closePath];
            [color11 setFill];
            [star45Path fill];


            //// Star 46 Drawing
            UIBezierPath* star46Path = [UIBezierPath bezierPath];
            [star46Path moveToPoint: CGPointMake(318.5, 194)];
            [star46Path addLineToPoint: CGPointMake(318.15, 193.49)];
            [star46Path addLineToPoint: CGPointMake(317.55, 193.31)];
            [star46Path addLineToPoint: CGPointMake(317.93, 192.81)];
            [star46Path addLineToPoint: CGPointMake(317.91, 192.19)];
            [star46Path addLineToPoint: CGPointMake(318.5, 192.4)];
            [star46Path addLineToPoint: CGPointMake(319.09, 192.19)];
            [star46Path addLineToPoint: CGPointMake(319.07, 192.81)];
            [star46Path addLineToPoint: CGPointMake(319.45, 193.31)];
            [star46Path addLineToPoint: CGPointMake(318.85, 193.49)];
            [star46Path closePath];
            [color11 setFill];
            [star46Path fill];


            //// Star 47 Drawing
            UIBezierPath* star47Path = [UIBezierPath bezierPath];
            [star47Path moveToPoint: CGPointMake(359, 188)];
            [star47Path addLineToPoint: CGPointMake(358.29, 186.97)];
            [star47Path addLineToPoint: CGPointMake(357.1, 186.62)];
            [star47Path addLineToPoint: CGPointMake(357.86, 185.63)];
            [star47Path addLineToPoint: CGPointMake(357.82, 184.38)];
            [star47Path addLineToPoint: CGPointMake(359, 184.8)];
            [star47Path addLineToPoint: CGPointMake(360.18, 184.38)];
            [star47Path addLineToPoint: CGPointMake(360.14, 185.63)];
            [star47Path addLineToPoint: CGPointMake(360.9, 186.62)];
            [star47Path addLineToPoint: CGPointMake(359.71, 186.97)];
            [star47Path closePath];
            [color11 setFill];
            [star47Path fill];


            //// Star 48 Drawing
            UIBezierPath* star48Path = [UIBezierPath bezierPath];
            [star48Path moveToPoint: CGPointMake(357.5, 192.5)];
            [star48Path addLineToPoint: CGPointMake(357.15, 191.99)];
            [star48Path addLineToPoint: CGPointMake(356.55, 191.81)];
            [star48Path addLineToPoint: CGPointMake(356.93, 191.31)];
            [star48Path addLineToPoint: CGPointMake(356.91, 190.69)];
            [star48Path addLineToPoint: CGPointMake(357.5, 190.9)];
            [star48Path addLineToPoint: CGPointMake(358.09, 190.69)];
            [star48Path addLineToPoint: CGPointMake(358.07, 191.31)];
            [star48Path addLineToPoint: CGPointMake(358.45, 191.81)];
            [star48Path addLineToPoint: CGPointMake(357.85, 191.99)];
            [star48Path closePath];
            [color10 setFill];
            [star48Path fill];


            //// Star 49 Drawing
            UIBezierPath* star49Path = [UIBezierPath bezierPath];
            [star49Path moveToPoint: CGPointMake(352.5, 192.5)];
            [star49Path addLineToPoint: CGPointMake(352.15, 191.99)];
            [star49Path addLineToPoint: CGPointMake(351.55, 191.81)];
            [star49Path addLineToPoint: CGPointMake(351.93, 191.31)];
            [star49Path addLineToPoint: CGPointMake(351.91, 190.69)];
            [star49Path addLineToPoint: CGPointMake(352.5, 190.9)];
            [star49Path addLineToPoint: CGPointMake(353.09, 190.69)];
            [star49Path addLineToPoint: CGPointMake(353.07, 191.31)];
            [star49Path addLineToPoint: CGPointMake(353.45, 191.81)];
            [star49Path addLineToPoint: CGPointMake(352.85, 191.99)];
            [star49Path closePath];
            [color10 setFill];
            [star49Path fill];


            //// Star 50 Drawing
            UIBezierPath* star50Path = [UIBezierPath bezierPath];
            [star50Path moveToPoint: CGPointMake(342, 203.5)];
            [star50Path addLineToPoint: CGPointMake(341.29, 202.47)];
            [star50Path addLineToPoint: CGPointMake(340.1, 202.12)];
            [star50Path addLineToPoint: CGPointMake(340.86, 201.13)];
            [star50Path addLineToPoint: CGPointMake(340.82, 199.88)];
            [star50Path addLineToPoint: CGPointMake(342, 200.3)];
            [star50Path addLineToPoint: CGPointMake(343.18, 199.88)];
            [star50Path addLineToPoint: CGPointMake(343.14, 201.13)];
            [star50Path addLineToPoint: CGPointMake(343.9, 202.12)];
            [star50Path addLineToPoint: CGPointMake(342.71, 202.47)];
            [star50Path closePath];
            [color11 setFill];
            [star50Path fill];


            //// Star 51 Drawing
            UIBezierPath* star51Path = [UIBezierPath bezierPath];
            [star51Path moveToPoint: CGPointMake(352.5, 198)];
            [star51Path addLineToPoint: CGPointMake(351.79, 196.97)];
            [star51Path addLineToPoint: CGPointMake(350.6, 196.62)];
            [star51Path addLineToPoint: CGPointMake(351.36, 195.63)];
            [star51Path addLineToPoint: CGPointMake(351.32, 194.38)];
            [star51Path addLineToPoint: CGPointMake(352.5, 194.8)];
            [star51Path addLineToPoint: CGPointMake(353.68, 194.38)];
            [star51Path addLineToPoint: CGPointMake(353.64, 195.63)];
            [star51Path addLineToPoint: CGPointMake(354.4, 196.62)];
            [star51Path addLineToPoint: CGPointMake(353.21, 196.97)];
            [star51Path closePath];
            [color10 setFill];
            [star51Path fill];


            //// Star 52 Drawing
            UIBezierPath* star52Path = [UIBezierPath bezierPath];
            [star52Path moveToPoint: CGPointMake(353.5, 202.5)];
            [star52Path addLineToPoint: CGPointMake(353.15, 201.99)];
            [star52Path addLineToPoint: CGPointMake(352.55, 201.81)];
            [star52Path addLineToPoint: CGPointMake(352.93, 201.31)];
            [star52Path addLineToPoint: CGPointMake(352.91, 200.69)];
            [star52Path addLineToPoint: CGPointMake(353.5, 200.9)];
            [star52Path addLineToPoint: CGPointMake(354.09, 200.69)];
            [star52Path addLineToPoint: CGPointMake(354.07, 201.31)];
            [star52Path addLineToPoint: CGPointMake(354.45, 201.81)];
            [star52Path addLineToPoint: CGPointMake(353.85, 201.99)];
            [star52Path closePath];
            [color10 setFill];
            [star52Path fill];


            //// Oval 12 Drawing
            UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(335, 185, 6, 6)];
            CGContextSaveGState(context);
            [oval12Path addClip];
            CGContextDrawLinearGradient(context, earthGradient, CGPointMake(338, 185), CGPointMake(338, 191), 0);
            CGContextRestoreGState(context);


            //// Star 16 Drawing
            UIBezierPath* star16Path = [UIBezierPath bezierPath];
            [star16Path moveToPoint: CGPointMake(353.5, 207.5)];
            [star16Path addLineToPoint: CGPointMake(353.15, 206.99)];
            [star16Path addLineToPoint: CGPointMake(352.55, 206.81)];
            [star16Path addLineToPoint: CGPointMake(352.93, 206.31)];
            [star16Path addLineToPoint: CGPointMake(352.91, 205.69)];
            [star16Path addLineToPoint: CGPointMake(353.5, 205.9)];
            [star16Path addLineToPoint: CGPointMake(354.09, 205.69)];
            [star16Path addLineToPoint: CGPointMake(354.07, 206.31)];
            [star16Path addLineToPoint: CGPointMake(354.45, 206.81)];
            [star16Path addLineToPoint: CGPointMake(353.85, 206.99)];
            [star16Path closePath];
            [color10 setFill];
            [star16Path fill];
        }
    }


    //// Group 16
    {
        //// Group 18
        {
            //// Bezier 11 Drawing
            UIBezierPath* bezier11Path = [UIBezierPath bezierPath];
            [UIColor.blackColor setStroke];
            bezier11Path.lineWidth = 1;
            [bezier11Path stroke];
        }
    }


    //// Group 24
    {
        //// Bezier 42 Drawing
        UIBezierPath* bezier42Path = [UIBezierPath bezierPath];
        [UIColor.blackColor setStroke];
        bezier42Path.lineWidth = 1;
        [bezier42Path stroke];


        //// Group 22
        {
            //// Group 20
            {
                //// Group 21
                {
                    //// Bezier 43 Drawing
                    UIBezierPath* bezier43Path = [UIBezierPath bezierPath];
                    [bezier43Path moveToPoint: CGPointMake(401, 339.58)];
                    [bezier43Path addCurveToPoint: CGPointMake(388.57, 350.67) controlPoint1: CGPointMake(399.39, 339.9) controlPoint2: CGPointMake(389.57, 353.06)];
                    [bezier43Path addCurveToPoint: CGPointMake(388.57, 330.71) controlPoint1: CGPointMake(387.22, 347.45) controlPoint2: CGPointMake(390.48, 331.23)];
                    [bezier43Path addCurveToPoint: CGPointMake(382.87, 350.67) controlPoint1: CGPointMake(387.18, 330.34) controlPoint2: CGPointMake(384.25, 351.88)];
                    [bezier43Path addCurveToPoint: CGPointMake(379.24, 330.71) controlPoint1: CGPointMake(381.21, 349.21) controlPoint2: CGPointMake(380.86, 331.36)];
                    [bezier43Path addCurveToPoint: CGPointMake(375.61, 348.45) controlPoint1: CGPointMake(377.92, 330.19) controlPoint2: CGPointMake(376.81, 349.36)];
                    [bezier43Path addCurveToPoint: CGPointMake(375.61, 330.71) controlPoint1: CGPointMake(373.73, 347.02) controlPoint2: CGPointMake(377.55, 331.7)];
                    [bezier43Path addCurveToPoint: CGPointMake(365.25, 328.5) controlPoint1: CGPointMake(373, 329.39) controlPoint2: CGPointMake(367.2, 328.4)];
                    [bezier43Path addCurveToPoint: CGPointMake(368.88, 339.58) controlPoint1: CGPointMake(363.05, 328.61) controlPoint2: CGPointMake(370.68, 337.71)];
                    [bezier43Path addCurveToPoint: CGPointMake(371.47, 348.45) controlPoint1: CGPointMake(368.15, 340.35) controlPoint2: CGPointMake(371.14, 344.44)];
                    [bezier43Path addCurveToPoint: CGPointMake(368.88, 355.84) controlPoint1: CGPointMake(371.74, 351.66) controlPoint2: CGPointMake(369.37, 354.87)];
                    [bezier43Path addCurveToPoint: CGPointMake(365.25, 350.67) controlPoint1: CGPointMake(368.4, 356.79) controlPoint2: CGPointMake(368.36, 345.49)];
                    [bezier43Path addCurveToPoint: CGPointMake(357.48, 350.67) controlPoint1: CGPointMake(361.44, 357.01) controlPoint2: CGPointMake(357.77, 348.81)];
                    [bezier43Path addCurveToPoint: CGPointMake(365.25, 361.01) controlPoint1: CGPointMake(357.02, 353.66) controlPoint2: CGPointMake(365.34, 356.85)];
                    [bezier43Path addCurveToPoint: CGPointMake(365.25, 411.26) controlPoint1: CGPointMake(364.22, 411.26) controlPoint2: CGPointMake(365.25, 411.26)];
                    [bezier43Path addLineToPoint: CGPointMake(371.47, 403.13)];
                    [bezier43Path addLineToPoint: CGPointMake(365.25, 440.08)];
                    [bezier43Path addLineToPoint: CGPointMake(371.47, 440.08)];
                    [bezier43Path addLineToPoint: CGPointMake(365.25, 478.5)];
                    [bezier43Path addLineToPoint: CGPointMake(388.57, 427.51)];
                    [bezier43Path addLineToPoint: CGPointMake(379.24, 427.51)];
                    [bezier43Path addLineToPoint: CGPointMake(397.37, 380.96)];
                    [bezier43Path addLineToPoint: CGPointMake(382.87, 386.13)];
                    [bezier43Path addLineToPoint: CGPointMake(397.37, 350.67)];
                    [bezier43Path addCurveToPoint: CGPointMake(401, 339.58) controlPoint1: CGPointMake(397.37, 350.67) controlPoint2: CGPointMake(403.32, 339.12)];
                    [bezier43Path closePath];
                    CGContextSaveGState(context);
                    CGContextSetShadowWithColor(context, lightningShadow.shadowOffset, lightningShadow.shadowBlurRadius, [lightningShadow.shadowColor CGColor]);
                    CGContextBeginTransparencyLayer(context, NULL);
                    [bezier43Path addClip];
                    CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(379.5, 328.49), CGPointMake(379.5, 478.5), 0);
                    CGContextEndTransparencyLayer(context);
                    CGContextRestoreGState(context);

                    [UIColor.blackColor setStroke];
                    bezier43Path.lineWidth = 1;
                    [bezier43Path stroke];


                    //// Bezier 44 Drawing
                    UIBezierPath* bezier44Path = [UIBezierPath bezierPath];
                    [bezier44Path moveToPoint: CGPointMake(382.61, 392.41)];
                    [bezier44Path addLineToPoint: CGPointMake(370.69, 433.79)];
                    CGContextSaveGState(context);
                    [bezier44Path addClip];
                    CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(376.65, 392.41), CGPointMake(376.65, 433.79), 0);
                    CGContextRestoreGState(context);
                    [color13 setStroke];
                    bezier44Path.lineWidth = 2;
                    [bezier44Path stroke];


                    //// Bezier 45 Drawing
                    UIBezierPath* bezier45Path = [UIBezierPath bezierPath];
                    [bezier45Path moveToPoint: CGPointMake(378.98, 431.58)];
                    [bezier45Path addLineToPoint: CGPointMake(371.73, 456.7)];
                    CGContextSaveGState(context);
                    [bezier45Path addClip];
                    CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(375.36, 431.58), CGPointMake(375.36, 456.7), 0);
                    CGContextRestoreGState(context);
                    [color13 setStroke];
                    bezier45Path.lineWidth = 2;
                    [bezier45Path stroke];


                    //// Bezier 46 Drawing
                    UIBezierPath* bezier46Path = [UIBezierPath bezierPath];
                    [bezier46Path moveToPoint: CGPointMake(371.21, 396.85)];
                    [bezier46Path addLineToPoint: CGPointMake(382.61, 392.41)];
                    CGContextSaveGState(context);
                    [bezier46Path addClip];
                    CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(376.91, 392.41), CGPointMake(376.91, 396.85), 0);
                    CGContextRestoreGState(context);
                    [color13 setStroke];
                    bezier46Path.lineWidth = 2;
                    [bezier46Path stroke];


                    //// Bezier 47 Drawing
                    UIBezierPath* bezier47Path = [UIBezierPath bezierPath];
                    [bezier47Path moveToPoint: CGPointMake(370.69, 433.79)];
                    [bezier47Path addLineToPoint: CGPointMake(378.98, 431.58)];
                    CGContextSaveGState(context);
                    [bezier47Path addClip];
                    CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(374.84, 431.58), CGPointMake(374.84, 433.79), 0);
                    CGContextRestoreGState(context);
                    [color13 setStroke];
                    bezier47Path.lineWidth = 2;
                    [bezier47Path stroke];


                    //// Bezier 53 Drawing
                    UIBezierPath* bezier53Path = [UIBezierPath bezierPath];
                    [bezier53Path moveToPoint: CGPointMake(374.38, 364.23)];
                    [bezier53Path addLineToPoint: CGPointMake(371.21, 396.85)];
                    CGContextSaveGState(context);
                    [bezier53Path addClip];
                    CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(372.8, 364.23), CGPointMake(372.8, 396.85), 0);
                    CGContextRestoreGState(context);
                    [color13 setStroke];
                    bezier53Path.lineWidth = 2;
                    [bezier53Path stroke];
                }
            }
        }


        //// Group 23
        {
            //// Oval 167 Drawing
            UIBezierPath* oval167Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(378, 359.5, 7, 18)];
            [UIColor.whiteColor setFill];
            [oval167Path fill];
            [color setStroke];
            oval167Path.lineWidth = 1;
            [oval167Path stroke];


            //// Oval 168 Drawing
            UIBezierPath* oval168Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(370, 356.5, 8.5, 21)];
            [UIColor.whiteColor setFill];
            [oval168Path fill];
            [color setStroke];
            oval168Path.lineWidth = 1;
            [oval168Path stroke];


            //// Oval 169 Drawing
            UIBezierPath* oval169Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(369.5, 363.5, 3.5, 10)];
            [UIColor.blackColor setFill];
            [oval169Path fill];
            [color setStroke];
            oval169Path.lineWidth = 1;
            [oval169Path stroke];


            //// Oval 170 Drawing
            UIBezierPath* oval170Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(378.5, 365.5, 2.5, 8.5)];
            [UIColor.blackColor setFill];
            [oval170Path fill];
            [color setStroke];
            oval170Path.lineWidth = 1;
            [oval170Path stroke];
        }


        //// Bezier 54 Drawing
        UIBezierPath* bezier54Path = [UIBezierPath bezierPath];
        [bezier54Path moveToPoint: CGPointMake(384.1, 352.87)];
        [bezier54Path addLineToPoint: CGPointMake(387.17, 358.5)];
        [UIColor.blackColor setStroke];
        bezier54Path.lineWidth = 1;
        [bezier54Path stroke];


        //// Bezier 55 Drawing
        UIBezierPath* bezier55Path = [UIBezierPath bezierPath];
        [bezier55Path moveToPoint: CGPointMake(377.97, 350.06)];
        [bezier55Path addLineToPoint: CGPointMake(371.83, 353.81)];
        [UIColor.blackColor setStroke];
        bezier55Path.lineWidth = 1;
        [bezier55Path stroke];


        //// Bezier 14 Drawing
        UIBezierPath* bezier14Path = [UIBezierPath bezierPath];
        [bezier14Path moveToPoint: CGPointMake(370.37, 384.28)];
        [bezier14Path addCurveToPoint: CGPointMake(373.27, 389.44) controlPoint1: CGPointMake(370.83, 388.7) controlPoint2: CGPointMake(372.11, 388.9)];
        [bezier14Path addCurveToPoint: CGPointMake(380.33, 384.28) controlPoint1: CGPointMake(376.3, 390.83) controlPoint2: CGPointMake(380.33, 384.28)];
        [UIColor.whiteColor setFill];
        [bezier14Path fill];
        [UIColor.blackColor setStroke];
        bezier14Path.lineWidth = 1;
        [bezier14Path stroke];


        //// Bezier 16 Drawing
        UIBezierPath* bezier16Path = [UIBezierPath bezierPath];
        [bezier16Path moveToPoint: CGPointMake(370.37, 384.28)];
        [bezier16Path addLineToPoint: CGPointMake(374.93, 382.87)];
        [bezier16Path addLineToPoint: CGPointMake(379.5, 384.28)];
        [UIColor.whiteColor setFill];
        [bezier16Path fill];
        [UIColor.blackColor setStroke];
        bezier16Path.lineWidth = 1;
        [bezier16Path stroke];
    }


    //// Group 27
    {
        //// Bezier 49 Drawing
        UIBezierPath* bezier49Path = [UIBezierPath bezierPath];
        [bezier49Path moveToPoint: CGPointMake(30.19, 336.02)];
        [bezier49Path addLineToPoint: CGPointMake(35.5, 347.05)];
        [bezier49Path addLineToPoint: CGPointMake(35.5, 331.51)];
        [bezier49Path addLineToPoint: CGPointMake(40.82, 326.5)];
        [bezier49Path addLineToPoint: CGPointMake(38.4, 344.55)];
        [bezier49Path addLineToPoint: CGPointMake(43.23, 336.02)];
        [bezier49Path addLineToPoint: CGPointMake(49.99, 344.55)];
        [bezier49Path addLineToPoint: CGPointMake(49.99, 326.5)];
        [bezier49Path addLineToPoint: CGPointMake(56.75, 343.04)];
        [bezier49Path addLineToPoint: CGPointMake(64.54, 329.86)];
        [bezier49Path addLineToPoint: CGPointMake(58.98, 348.65)];
        [bezier49Path addLineToPoint: CGPointMake(51.35, 424.51)];
        [bezier49Path addLineToPoint: CGPointMake(43.71, 416.46)];
        [bezier49Path addLineToPoint: CGPointMake(35.5, 478.9)];
        [bezier49Path addLineToPoint: CGPointMake(26.81, 463.86)];
        [bezier49Path addLineToPoint: CGPointMake(21.5, 518.5)];
        [bezier49Path addLineToPoint: CGPointMake(21.5, 444.31)];
        [bezier49Path addLineToPoint: CGPointMake(30.19, 456.34)];
        [bezier49Path addLineToPoint: CGPointMake(27.05, 391.62)];
        [bezier49Path addLineToPoint: CGPointMake(36.77, 400.35)];
        [bezier49Path addLineToPoint: CGPointMake(30.19, 344.55)];
        [bezier49Path addLineToPoint: CGPointMake(30.19, 336.02)];
        [bezier49Path closePath];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, lightningShadow.shadowOffset, lightningShadow.shadowBlurRadius, [lightningShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);
        [bezier49Path addClip];
        CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(43.02, 326.5), CGPointMake(43.02, 518.5), 0);
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        bezier49Path.lineWidth = 1;
        [bezier49Path stroke];


        //// Group 26
        {
            //// Bezier 50 Drawing
            UIBezierPath* bezier50Path = [UIBezierPath bezierPath];
            [bezier50Path moveToPoint: CGPointMake(39.67, 362.5)];
            [bezier50Path addCurveToPoint: CGPointMake(48.33, 362.5) controlPoint1: CGPointMake(43.52, 357.5) controlPoint2: CGPointMake(48.33, 362.5)];
            [UIColor.blackColor setStroke];
            bezier50Path.lineWidth = 1;
            [bezier50Path stroke];


            //// Bezier 51 Drawing
            UIBezierPath* bezier51Path = [UIBezierPath bezierPath];
            [bezier51Path moveToPoint: CGPointMake(37.5, 361.39)];
            [bezier51Path addCurveToPoint: CGPointMake(50.5, 361.39) controlPoint1: CGPointMake(43.28, 352.64) controlPoint2: CGPointMake(50.5, 361.39)];
            [UIColor.blackColor setStroke];
            bezier51Path.lineWidth = 1;
            [bezier51Path stroke];
        }


        //// Bezier 52 Drawing
        UIBezierPath* bezier52Path = [UIBezierPath bezierPath];
        [bezier52Path moveToPoint: CGPointMake(45.8, 388.26)];
        [bezier52Path addLineToPoint: CGPointMake(44.41, 409.07)];
        [bezier52Path addLineToPoint: CGPointMake(36.08, 405.72)];
        [bezier52Path addLineToPoint: CGPointMake(32.61, 466.14)];
        [bezier52Path addLineToPoint: CGPointMake(24.97, 456.07)];
        [bezier52Path addLineToPoint: CGPointMake(23.58, 478.22)];
        [color13 setStroke];
        bezier52Path.lineWidth = 1;
        [bezier52Path stroke];


        //// Group 25
        {
            //// Oval 171 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 53.9, 361.82);
            CGContextRotateCTM(context, -2.66 * M_PI / 180);

            UIBezierPath* oval171Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-9.43, 2.24, 7.65, 17.56)];
            [UIColor.whiteColor setFill];
            [oval171Path fill];
            [color setStroke];
            oval171Path.lineWidth = 1;
            [oval171Path stroke];

            CGContextRestoreGState(context);


            //// Oval 172 Drawing
            UIBezierPath* oval172Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(48, 369, 5, 8)];
            [color setFill];
            [oval172Path fill];


            //// Oval 173 Drawing
            UIBezierPath* oval173Path = [UIBezierPath bezierPath];
            [oval173Path moveToPoint: CGPointMake(49.6, 389.66)];
            [oval173Path addCurveToPoint: CGPointMake(53.52, 387.38) controlPoint1: CGPointMake(50.41, 390.26) controlPoint2: CGPointMake(53.52, 386.41)];
            [oval173Path addCurveToPoint: CGPointMake(51.17, 391.37) controlPoint1: CGPointMake(53.52, 388.54) controlPoint2: CGPointMake(54.31, 389.66)];
            [oval173Path addCurveToPoint: CGPointMake(46.47, 392.52) controlPoint1: CGPointMake(50.05, 391.98) controlPoint2: CGPointMake(47.49, 392.52)];
            [oval173Path addCurveToPoint: CGPointMake(42.55, 392.52) controlPoint1: CGPointMake(44.5, 392.52) controlPoint2: CGPointMake(43.93, 392.25)];
            [oval173Path addCurveToPoint: CGPointMake(39.41, 389.66) controlPoint1: CGPointMake(41.2, 392.78) controlPoint2: CGPointMake(39.41, 390.44)];
            [oval173Path addCurveToPoint: CGPointMake(39.41, 387.38) controlPoint1: CGPointMake(39.41, 389.11) controlPoint2: CGPointMake(38.68, 387.86)];
            [oval173Path addCurveToPoint: CGPointMake(42.55, 389.66) controlPoint1: CGPointMake(40.19, 386.87) controlPoint2: CGPointMake(41.03, 389.5)];
            [oval173Path addCurveToPoint: CGPointMake(46.47, 389.66) controlPoint1: CGPointMake(43.03, 389.71) controlPoint2: CGPointMake(45.18, 389.67)];
            [oval173Path addCurveToPoint: CGPointMake(49.6, 389.66) controlPoint1: CGPointMake(48.13, 389.65) controlPoint2: CGPointMake(49, 389.66)];
            [oval173Path addCurveToPoint: CGPointMake(49.6, 389.66) controlPoint1: CGPointMake(51.1, 389.66) controlPoint2: CGPointMake(49.1, 389.29)];
            [oval173Path closePath];
            [UIColor.whiteColor setFill];
            [oval173Path fill];
            [color setStroke];
            oval173Path.lineWidth = 1;
            [oval173Path stroke];


            //// Oval 174 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 41.99, 374.28);
            CGContextRotateCTM(context, -0.43 * M_PI / 180);

            UIBezierPath* oval174Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-4.39, -8.59, 8.78, 17.18)];
            [UIColor.whiteColor setFill];
            [oval174Path fill];
            [color setStroke];
            oval174Path.lineWidth = 1;
            [oval174Path stroke];

            CGContextRestoreGState(context);


            //// Oval 175 Drawing
            UIBezierPath* oval175Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(41, 369, 5, 9)];
            [color setFill];
            [oval175Path fill];
        }
    }


    //// Group 34
    {
        //// Star 7 Drawing
        UIBezierPath* star7Path = [UIBezierPath bezierPath];
        [star7Path moveToPoint: CGPointMake(311.5, 11)];
        [star7Path addLineToPoint: CGPointMake(314.32, 15.12)];
        [star7Path addLineToPoint: CGPointMake(319.11, 16.53)];
        [star7Path addLineToPoint: CGPointMake(316.07, 20.48)];
        [star7Path addLineToPoint: CGPointMake(316.2, 25.47)];
        [star7Path addLineToPoint: CGPointMake(311.5, 23.8)];
        [star7Path addLineToPoint: CGPointMake(306.8, 25.47)];
        [star7Path addLineToPoint: CGPointMake(306.93, 20.48)];
        [star7Path addLineToPoint: CGPointMake(303.89, 16.53)];
        [star7Path addLineToPoint: CGPointMake(308.68, 15.12)];
        [star7Path closePath];
        [color11 setFill];
        [star7Path fill];
        [shadow2Color setStroke];
        star7Path.lineWidth = 1;
        [star7Path stroke];


        //// Star 8 Drawing
        UIBezierPath* star8Path = [UIBezierPath bezierPath];
        [star8Path moveToPoint: CGPointMake(404.5, 20)];
        [star8Path addLineToPoint: CGPointMake(406.26, 22.57)];
        [star8Path addLineToPoint: CGPointMake(409.26, 23.45)];
        [star8Path addLineToPoint: CGPointMake(407.35, 25.93)];
        [star8Path addLineToPoint: CGPointMake(407.44, 29.05)];
        [star8Path addLineToPoint: CGPointMake(404.5, 28)];
        [star8Path addLineToPoint: CGPointMake(401.56, 29.05)];
        [star8Path addLineToPoint: CGPointMake(401.65, 25.93)];
        [star8Path addLineToPoint: CGPointMake(399.74, 23.45)];
        [star8Path addLineToPoint: CGPointMake(402.74, 22.57)];
        [star8Path closePath];
        [color11 setFill];
        [star8Path fill];
        [shadow2Color setStroke];
        star8Path.lineWidth = 1;
        [star8Path stroke];


        //// Star 13 Drawing
        UIBezierPath* star13Path = [UIBezierPath bezierPath];
        [star13Path moveToPoint: CGPointMake(249.5, 82.5)];
        [star13Path addLineToPoint: CGPointMake(252.67, 87.13)];
        [star13Path addLineToPoint: CGPointMake(258.06, 88.72)];
        [star13Path addLineToPoint: CGPointMake(254.64, 93.17)];
        [star13Path addLineToPoint: CGPointMake(254.79, 98.78)];
        [star13Path addLineToPoint: CGPointMake(249.5, 96.9)];
        [star13Path addLineToPoint: CGPointMake(244.21, 98.78)];
        [star13Path addLineToPoint: CGPointMake(244.36, 93.17)];
        [star13Path addLineToPoint: CGPointMake(240.94, 88.72)];
        [star13Path addLineToPoint: CGPointMake(246.33, 87.13)];
        [star13Path closePath];
        [color11 setFill];
        [star13Path fill];
        [shadow2Color setStroke];
        star13Path.lineWidth = 1;
        [star13Path stroke];


        //// Star 14 Drawing
        UIBezierPath* star14Path = [UIBezierPath bezierPath];
        [star14Path moveToPoint: CGPointMake(400, 139.5)];
        [star14Path addLineToPoint: CGPointMake(403.53, 144.65)];
        [star14Path addLineToPoint: CGPointMake(409.51, 146.41)];
        [star14Path addLineToPoint: CGPointMake(405.71, 151.35)];
        [star14Path addLineToPoint: CGPointMake(405.88, 157.59)];
        [star14Path addLineToPoint: CGPointMake(400, 155.5)];
        [star14Path addLineToPoint: CGPointMake(394.12, 157.59)];
        [star14Path addLineToPoint: CGPointMake(394.29, 151.35)];
        [star14Path addLineToPoint: CGPointMake(390.49, 146.41)];
        [star14Path addLineToPoint: CGPointMake(396.47, 144.65)];
        [star14Path closePath];
        [color11 setFill];
        [star14Path fill];
        [shadow2Color setStroke];
        star14Path.lineWidth = 1;
        [star14Path stroke];


        //// Star 15 Drawing
        UIBezierPath* star15Path = [UIBezierPath bezierPath];
        [star15Path moveToPoint: CGPointMake(267, 158.5)];
        [star15Path addLineToPoint: CGPointMake(271.23, 164.68)];
        [star15Path addLineToPoint: CGPointMake(278.41, 166.79)];
        [star15Path addLineToPoint: CGPointMake(273.85, 172.72)];
        [star15Path addLineToPoint: CGPointMake(274.05, 180.21)];
        [star15Path addLineToPoint: CGPointMake(267, 177.7)];
        [star15Path addLineToPoint: CGPointMake(259.95, 180.21)];
        [star15Path addLineToPoint: CGPointMake(260.15, 172.72)];
        [star15Path addLineToPoint: CGPointMake(255.59, 166.79)];
        [star15Path addLineToPoint: CGPointMake(262.77, 164.68)];
        [star15Path closePath];
        [color11 setFill];
        [star15Path fill];
        [shadow2Color setStroke];
        star15Path.lineWidth = 1;
        [star15Path stroke];


        //// Star 18 Drawing
        UIBezierPath* star18Path = [UIBezierPath bezierPath];
        [star18Path moveToPoint: CGPointMake(129, 147.5)];
        [star18Path addLineToPoint: CGPointMake(133.58, 154.19)];
        [star18Path addLineToPoint: CGPointMake(141.36, 156.48)];
        [star18Path addLineToPoint: CGPointMake(136.42, 162.91)];
        [star18Path addLineToPoint: CGPointMake(136.64, 171.02)];
        [star18Path addLineToPoint: CGPointMake(129, 168.3)];
        [star18Path addLineToPoint: CGPointMake(121.36, 171.02)];
        [star18Path addLineToPoint: CGPointMake(121.58, 162.91)];
        [star18Path addLineToPoint: CGPointMake(116.64, 156.48)];
        [star18Path addLineToPoint: CGPointMake(124.42, 154.19)];
        [star18Path closePath];
        [color11 setFill];
        [star18Path fill];
        [shadow2Color setStroke];
        star18Path.lineWidth = 1;
        [star18Path stroke];


        //// Star 20 Drawing
        UIBezierPath* star20Path = [UIBezierPath bezierPath];
        [star20Path moveToPoint: CGPointMake(160, 7)];
        [star20Path addLineToPoint: CGPointMake(162.12, 10.09)];
        [star20Path addLineToPoint: CGPointMake(165.71, 11.15)];
        [star20Path addLineToPoint: CGPointMake(163.42, 14.11)];
        [star20Path addLineToPoint: CGPointMake(163.53, 17.85)];
        [star20Path addLineToPoint: CGPointMake(160, 16.6)];
        [star20Path addLineToPoint: CGPointMake(156.47, 17.85)];
        [star20Path addLineToPoint: CGPointMake(156.58, 14.11)];
        [star20Path addLineToPoint: CGPointMake(154.29, 11.15)];
        [star20Path addLineToPoint: CGPointMake(157.88, 10.09)];
        [star20Path closePath];
        [color11 setFill];
        [star20Path fill];
        [shadow2Color setStroke];
        star20Path.lineWidth = 1;
        [star20Path stroke];


        //// Star 4 Drawing
        UIBezierPath* star4Path = [UIBezierPath bezierPath];
        [star4Path moveToPoint: CGPointMake(292.5, 124)];
        [star4Path addLineToPoint: CGPointMake(296.38, 129.66)];
        [star4Path addLineToPoint: CGPointMake(302.96, 131.6)];
        [star4Path addLineToPoint: CGPointMake(298.78, 137.04)];
        [star4Path addLineToPoint: CGPointMake(298.97, 143.9)];
        [star4Path addLineToPoint: CGPointMake(292.5, 141.6)];
        [star4Path addLineToPoint: CGPointMake(286.03, 143.9)];
        [star4Path addLineToPoint: CGPointMake(286.22, 137.04)];
        [star4Path addLineToPoint: CGPointMake(282.04, 131.6)];
        [star4Path addLineToPoint: CGPointMake(288.62, 129.66)];
        [star4Path closePath];
        [color11 setFill];
        [star4Path fill];
        [shadow2Color setStroke];
        star4Path.lineWidth = 1;
        [star4Path stroke];


        //// Star 10 Drawing
        UIBezierPath* star10Path = [UIBezierPath bezierPath];
        [star10Path moveToPoint: CGPointMake(300.5, 209.5)];
        [star10Path addLineToPoint: CGPointMake(305.08, 216.19)];
        [star10Path addLineToPoint: CGPointMake(312.86, 218.48)];
        [star10Path addLineToPoint: CGPointMake(307.92, 224.91)];
        [star10Path addLineToPoint: CGPointMake(308.14, 233.02)];
        [star10Path addLineToPoint: CGPointMake(300.5, 230.3)];
        [star10Path addLineToPoint: CGPointMake(292.86, 233.02)];
        [star10Path addLineToPoint: CGPointMake(293.08, 224.91)];
        [star10Path addLineToPoint: CGPointMake(288.14, 218.48)];
        [star10Path addLineToPoint: CGPointMake(295.92, 216.19)];
        [star10Path closePath];
        [color11 setFill];
        [star10Path fill];
        [shadow2Color setStroke];
        star10Path.lineWidth = 1;
        [star10Path stroke];


        //// Star 17 Drawing
        UIBezierPath* star17Path = [UIBezierPath bezierPath];
        [star17Path moveToPoint: CGPointMake(382.5, 13.5)];
        [star17Path addLineToPoint: CGPointMake(384.26, 16.07)];
        [star17Path addLineToPoint: CGPointMake(387.26, 16.95)];
        [star17Path addLineToPoint: CGPointMake(385.35, 19.43)];
        [star17Path addLineToPoint: CGPointMake(385.44, 22.55)];
        [star17Path addLineToPoint: CGPointMake(382.5, 21.5)];
        [star17Path addLineToPoint: CGPointMake(379.56, 22.55)];
        [star17Path addLineToPoint: CGPointMake(379.65, 19.43)];
        [star17Path addLineToPoint: CGPointMake(377.74, 16.95)];
        [star17Path addLineToPoint: CGPointMake(380.74, 16.07)];
        [star17Path closePath];
        [color11 setFill];
        [star17Path fill];
        [shadow2Color setStroke];
        star17Path.lineWidth = 1;
        [star17Path stroke];
    }


    //// Group 3
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(276.5, 21.5, 133, 135)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonFrontShadow.shadowOffset, moonFrontShadow.shadowBlurRadius, [moonFrontShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);
        [ovalPath addClip];
        CGContextDrawLinearGradient(context, darkSideMoonGradient, CGPointMake(343, 21.5), CGPointMake(343, 156.5), 0);
        CGContextEndTransparencyLayer(context);

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([innerMoonDarksideShadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [innerMoonDarksideShadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, innerMoonDarksideShadow.shadowOffset, innerMoonDarksideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [color setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPath];
        [oval2Path moveToPoint: CGPointMake(325, 55)];
        [oval2Path addCurveToPoint: CGPointMake(321.15, 72.53) controlPoint1: CGPointMake(326.89, 57.93) controlPoint2: CGPointMake(323.33, 65.39)];
        [oval2Path addCurveToPoint: CGPointMake(325, 88) controlPoint1: CGPointMake(319.03, 79.47) controlPoint2: CGPointMake(319.39, 83.19)];
        [oval2Path addCurveToPoint: CGPointMake(317.5, 98) controlPoint1: CGPointMake(328.5, 91) controlPoint2: CGPointMake(318.64, 96.11)];
        [oval2Path addCurveToPoint: CGPointMake(313, 117) controlPoint1: CGPointMake(314.5, 103) controlPoint2: CGPointMake(313, 109.13)];
        [oval2Path addCurveToPoint: CGPointMake(343.5, 156) controlPoint1: CGPointMake(313, 154.28) controlPoint2: CGPointMake(380.78, 156)];
        [oval2Path addCurveToPoint: CGPointMake(276, 88.5) controlPoint1: CGPointMake(306.22, 156) controlPoint2: CGPointMake(276, 125.78)];
        [oval2Path addCurveToPoint: CGPointMake(343.5, 21) controlPoint1: CGPointMake(276, 51.22) controlPoint2: CGPointMake(306.22, 21)];
        [oval2Path addCurveToPoint: CGPointMake(325, 55) controlPoint1: CGPointMake(360.25, 21) controlPoint2: CGPointMake(318.54, 45.01)];
        [oval2Path closePath];
        CGContextSaveGState(context);
        [oval2Path addClip];
        CGContextDrawLinearGradient(context, lightSideMoonGradient, CGPointMake(315.35, 21), CGPointMake(315.35, 156), 0);
        CGContextRestoreGState(context);

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([innerMoonLightSideShadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [innerMoonLightSideShadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, innerMoonLightSideShadow.shadowOffset, innerMoonLightSideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];
    }


    //// Group 6
    {
        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(341.5, 60, 14, 20)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
        [UIColor.whiteColor setFill];
        [oval3Path fill];
        CGContextRestoreGState(context);

        [color setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(328.5, 57, 13.5, 23)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
        [UIColor.whiteColor setFill];
        [oval6Path fill];
        CGContextRestoreGState(context);

        [color setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 15 Drawing
        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(329, 64, 3.5, 8.5)];
        [UIColor.blackColor setFill];
        [oval15Path fill];
        [color setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [UIColor.blackColor setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [UIColor.darkGrayColor setFill];
        [bezier3Path fill];
        [color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Oval 16 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 303.45, 62.49);
        CGContextRotateCTM(context, 11.2 * M_PI / 180);

        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-5.75, -4.02, 11.5, 8.04)];
        [UIColor.whiteColor setFill];
        [oval16Path fill];
        [UIColor.darkGrayColor setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];

        CGContextRestoreGState(context);


        //// Oval 17 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 316.56, 68.6);
        CGContextRotateCTM(context, 10.56 * M_PI / 180);

        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6.56, -6.24, 8.23, 6.85)];
        [UIColor.whiteColor setFill];
        [oval17Path fill];
        [UIColor.darkGrayColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];

        CGContextRestoreGState(context);


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [color11 setFill];
        [bezier4Path fill];
        [UIColor.darkGrayColor setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [UIColor.darkGrayColor setStroke];
        bezier5Path.lineWidth = 1;
        [bezier5Path stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [UIColor.darkGrayColor setStroke];
        bezier6Path.lineWidth = 1;
        [bezier6Path stroke];


        //// Oval 18 Drawing
        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(305.5, 61, 4, 4)];
        [color setFill];
        [oval18Path fill];


        //// Oval 19 Drawing
        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(315.5, 63.5, 3.5, 4)];
        [color setFill];
        [oval19Path fill];


        //// Bezier 7 Drawing
        UIBezierPath* bezier7Path = [UIBezierPath bezierPath];
        [bezier7Path moveToPoint: CGPointMake(310, 121.5)];
        [bezier7Path addCurveToPoint: CGPointMake(310.01, 115.61) controlPoint1: CGPointMake(313.87, 119.01) controlPoint2: CGPointMake(312.14, 114)];
        [bezier7Path addCurveToPoint: CGPointMake(291.5, 108.5) controlPoint1: CGPointMake(304.85, 119.52) controlPoint2: CGPointMake(291.5, 108.5)];
        [bezier7Path addCurveToPoint: CGPointMake(310, 121.5) controlPoint1: CGPointMake(291.5, 108.5) controlPoint2: CGPointMake(304.48, 125.05)];
        [bezier7Path closePath];
        [UIColor.whiteColor setFill];
        [bezier7Path fill];
        [color setStroke];
        bezier7Path.lineWidth = 1;
        [bezier7Path stroke];


        //// Bezier 15 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 343.1, 115.37);
        CGContextRotateCTM(context, -9.13 * M_PI / 180);

        UIBezierPath* bezier15Path = [UIBezierPath bezierPath];
        [bezier15Path moveToPoint: CGPointMake(-14.49, -6.25)];
        [bezier15Path addCurveToPoint: CGPointMake(18.65, -6.25) controlPoint1: CGPointMake(-1.66, 10.32) controlPoint2: CGPointMake(18.65, -6.25)];
        [bezier15Path addLineToPoint: CGPointMake(1.69, 11.16)];
        [bezier15Path addLineToPoint: CGPointMake(-6.34, 7.76)];
        [bezier15Path addCurveToPoint: CGPointMake(-14.49, -6.25) controlPoint1: CGPointMake(-6.34, 7.76) controlPoint2: CGPointMake(-27.32, -22.81)];
        [bezier15Path closePath];
        [color2 setFill];
        [bezier15Path fill];
        [UIColor.blackColor setStroke];
        bezier15Path.lineWidth = 1;
        [bezier15Path stroke];

        CGContextRestoreGState(context);


        //// Oval 20 Drawing
        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(342, 66, 3.5, 8.5)];
        [UIColor.blackColor setFill];
        [oval20Path fill];
        [color setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, lightningShadow.shadowOffset, lightningShadow.shadowBlurRadius, [lightningShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(92.69, 58.68)];
        [bezierPath addLineToPoint: CGPointMake(100.8, 43.84)];
        [bezierPath addLineToPoint: CGPointMake(100.8, 63.62)];
        [bezierPath addLineToPoint: CGPointMake(125.12, 27.35)];
        [bezierPath addLineToPoint: CGPointMake(115.39, 68.57)];
        [bezierPath addLineToPoint: CGPointMake(139.71, 58.68)];
        [bezierPath addLineToPoint: CGPointMake(125.12, 76.81)];
        [bezierPath addLineToPoint: CGPointMake(177.01, 63.62)];
        [bezierPath addLineToPoint: CGPointMake(133.23, 96.6)];
        [bezierPath addLineToPoint: CGPointMake(147.82, 101.54)];
        [bezierPath addLineToPoint: CGPointMake(133.23, 109.79)];
        [bezierPath addLineToPoint: CGPointMake(164.03, 139.46)];
        [bezierPath addLineToPoint: CGPointMake(125.12, 124.62)];
        [bezierPath addLineToPoint: CGPointMake(125.36, 139.66)];
        [bezierPath addLineToPoint: CGPointMake(115.39, 134.52)];
        [bezierPath addLineToPoint: CGPointMake(125.36, 166.58)];
        [bezierPath addLineToPoint: CGPointMake(100.8, 139.46)];
        [bezierPath addLineToPoint: CGPointMake(92.4, 156.89)];
        [bezierPath addLineToPoint: CGPointMake(86.2, 139.46)];
        [bezierPath addLineToPoint: CGPointMake(73.72, 175.19)];
        [bezierPath addLineToPoint: CGPointMake(73.23, 139.46)];
        [bezierPath addLineToPoint: CGPointMake(58.64, 144.41)];
        [bezierPath addLineToPoint: CGPointMake(61.88, 127.92)];
        [bezierPath addLineToPoint: CGPointMake(26.21, 151)];
        [bezierPath addLineToPoint: CGPointMake(53.77, 114.73)];
        [bezierPath addLineToPoint: CGPointMake(34.32, 109.79)];
        [bezierPath addLineToPoint: CGPointMake(53.77, 101.54)];
        [bezierPath addLineToPoint: CGPointMake(9.99, 68.57)];
        [bezierPath addLineToPoint: CGPointMake(53.77, 83.41)];
        [bezierPath addLineToPoint: CGPointMake(44.04, 68.57)];
        [bezierPath addLineToPoint: CGPointMake(58.64, 76.81)];
        [bezierPath addLineToPoint: CGPointMake(34.32, 27.35)];
        [bezierPath addLineToPoint: CGPointMake(73.23, 68.57)];
        [bezierPath addLineToPoint: CGPointMake(73.23, 53.73)];
        [bezierPath addLineToPoint: CGPointMake(73.23, 53.73)];
        [bezierPath addLineToPoint: CGPointMake(79.72, 63.62)];
        [bezierPath addLineToPoint: CGPointMake(79.72, 17.46)];
        [bezierPath addLineToPoint: CGPointMake(92.69, 58.68)];
        [bezierPath closePath];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [lightningShadowColor setFill];
        [bezierPath fill];
        CGContextRestoreGState(context);



        //// Bezier 8 Drawing
        UIBezierPath* bezier8Path = [UIBezierPath bezierPath];
        [bezier8Path moveToPoint: CGPointMake(92.64, 55.03)];
        [bezier8Path addLineToPoint: CGPointMake(101.28, 39.18)];
        [bezier8Path addLineToPoint: CGPointMake(101.28, 60.31)];
        [bezier8Path addLineToPoint: CGPointMake(127.2, 21.57)];
        [bezier8Path addLineToPoint: CGPointMake(116.83, 65.6)];
        [bezier8Path addLineToPoint: CGPointMake(142.75, 55.03)];
        [bezier8Path addLineToPoint: CGPointMake(127.2, 74.4)];
        [bezier8Path addLineToPoint: CGPointMake(182.5, 60.31)];
        [bezier8Path addLineToPoint: CGPointMake(135.84, 95.54)];
        [bezier8Path addLineToPoint: CGPointMake(151.39, 100.82)];
        [bezier8Path addLineToPoint: CGPointMake(135.84, 109.63)];
        [bezier8Path addLineToPoint: CGPointMake(168.67, 141.33)];
        [bezier8Path addLineToPoint: CGPointMake(127.2, 125.48)];
        [bezier8Path addLineToPoint: CGPointMake(127.46, 141.54)];
        [bezier8Path addLineToPoint: CGPointMake(116.83, 136.05)];
        [bezier8Path addLineToPoint: CGPointMake(127.46, 170.3)];
        [bezier8Path addLineToPoint: CGPointMake(101.28, 141.33)];
        [bezier8Path addLineToPoint: CGPointMake(92.33, 159.95)];
        [bezier8Path addLineToPoint: CGPointMake(85.72, 141.33)];
        [bezier8Path addLineToPoint: CGPointMake(72.42, 179.5)];
        [bezier8Path addLineToPoint: CGPointMake(71.9, 141.33)];
        [bezier8Path addLineToPoint: CGPointMake(56.34, 146.61)];
        [bezier8Path addLineToPoint: CGPointMake(59.8, 129)];
        [bezier8Path addLineToPoint: CGPointMake(21.78, 153.66)];
        [bezier8Path addLineToPoint: CGPointMake(51.16, 114.91)];
        [bezier8Path addLineToPoint: CGPointMake(30.42, 109.63)];
        [bezier8Path addLineToPoint: CGPointMake(51.16, 100.82)];
        [bezier8Path addLineToPoint: CGPointMake(4.5, 65.6)];
        [bezier8Path addLineToPoint: CGPointMake(51.16, 81.45)];
        [bezier8Path addLineToPoint: CGPointMake(40.79, 65.6)];
        [bezier8Path addLineToPoint: CGPointMake(56.34, 74.4)];
        [bezier8Path addLineToPoint: CGPointMake(30.42, 21.57)];
        [bezier8Path addLineToPoint: CGPointMake(71.9, 65.6)];
        [bezier8Path addLineToPoint: CGPointMake(71.9, 49.75)];
        [bezier8Path addLineToPoint: CGPointMake(71.9, 49.75)];
        [bezier8Path addLineToPoint: CGPointMake(78.81, 60.31)];
        [bezier8Path addLineToPoint: CGPointMake(78.81, 11)];
        [bezier8Path addLineToPoint: CGPointMake(92.64, 55.03)];
        [bezier8Path closePath];
        CGContextSaveGState(context);
        [bezier8Path addClip];
        CGContextDrawLinearGradient(context, sunStarDradient, CGPointMake(93.5, 11), CGPointMake(93.5, 179.5), 0);
        CGContextRestoreGState(context);

        ////// Bezier 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(bezier8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [bezier8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color7 setStroke];
        bezier8Path.lineWidth = 1;
        [bezier8Path stroke];


        //// Oval 4 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 93.14, 100.51);
        CGContextRotateCTM(context, -0.02 * M_PI / 180);

        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-40.77, -41.02, 81.53, 82.03)];
        CGContextSaveGState(context);
        [oval4Path addClip];
        CGContextDrawLinearGradient(context, sunBallGradient, CGPointMake(-0, -41.02), CGPointMake(0, 41.02), 0);
        CGContextRestoreGState(context);

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color7 setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];

        CGContextRestoreGState(context);


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(51.5, 66.5, 71.5, 67)];
        [color7 setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(62.5, 67, 51.5, 54.5)];
        [color7 setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(73.5, 75.5, 39.5, 39)];
        [color7 setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(80.5, 86, 26, 28)];
        [color7 setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(81.5, 92, 15, 17)];
        [color7 setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(85.5, 93, 7, 7.5)];
        [color7 setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 14
    {
        //// Group 50
        {
            //// Group 52
            {
                //// Star 12 Drawing
                UIBezierPath* star12Path = [UIBezierPath bezierPath];
                [star12Path moveToPoint: CGPointMake(217, 229.5)];
                [star12Path addLineToPoint: CGPointMake(222.64, 238.25)];
                [star12Path addLineToPoint: CGPointMake(232.22, 241.25)];
                [star12Path addLineToPoint: CGPointMake(226.13, 249.65)];
                [star12Path addLineToPoint: CGPointMake(226.4, 260.25)];
                [star12Path addLineToPoint: CGPointMake(217, 256.7)];
                [star12Path addLineToPoint: CGPointMake(207.6, 260.25)];
                [star12Path addLineToPoint: CGPointMake(207.87, 249.65)];
                [star12Path addLineToPoint: CGPointMake(201.78, 241.25)];
                [star12Path addLineToPoint: CGPointMake(211.36, 238.25)];
                [star12Path closePath];
                CGContextSaveGState(context);
                CGContextSetShadowWithColor(context, moonShadow.shadowOffset, moonShadow.shadowBlurRadius, [moonShadow.shadowColor CGColor]);
                [color11 setFill];
                [star12Path fill];
                CGContextRestoreGState(context);

                [shadow2Color setStroke];
                star12Path.lineWidth = 1;
                [star12Path stroke];


                //// Bezier 120 Drawing
                UIBezierPath* bezier120Path = [UIBezierPath bezierPath];
                [UIColor.blackColor setStroke];
                bezier120Path.lineWidth = 1;
                [bezier120Path stroke];


                //// Oval 202 Drawing
                UIBezierPath* oval202Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(211, 238.5, 5, 8)];
                [UIColor.whiteColor setFill];
                [oval202Path fill];
                [color setStroke];
                oval202Path.lineWidth = 1;
                [oval202Path stroke];


                //// Oval 203 Drawing
                UIBezierPath* oval203Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(216.5, 238.5, 5, 8)];
                [UIColor.whiteColor setFill];
                [oval203Path fill];
                [color setStroke];
                oval203Path.lineWidth = 1;
                [oval203Path stroke];


                //// Oval 204 Drawing
                UIBezierPath* oval204Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(212, 242.5, 4, 4)];
                [UIColor.blackColor setFill];
                [oval204Path fill];
                [color setStroke];
                oval204Path.lineWidth = 1;
                [oval204Path stroke];


                //// Oval 205 Drawing
                UIBezierPath* oval205Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(217.5, 242.5, 4, 4)];
                [UIColor.blackColor setFill];
                [oval205Path fill];
                [color setStroke];
                oval205Path.lineWidth = 1;
                [oval205Path stroke];


                //// Bezier 121 Drawing
                UIBezierPath* bezier121Path = [UIBezierPath bezierPath];
                [bezier121Path moveToPoint: CGPointMake(211, 249.86)];
                [bezier121Path addCurveToPoint: CGPointMake(222, 249.86) controlPoint1: CGPointMake(218.62, 253.11) controlPoint2: CGPointMake(222, 249.86)];
                [bezier121Path addCurveToPoint: CGPointMake(215.23, 252.7) controlPoint1: CGPointMake(222, 249.86) controlPoint2: CGPointMake(219.46, 255.55)];
                [bezier121Path addCurveToPoint: CGPointMake(211, 249.86) controlPoint1: CGPointMake(211, 249.86) controlPoint2: CGPointMake(211, 249.86)];
                [UIColor.whiteColor setFill];
                [bezier121Path fill];
                [UIColor.blackColor setStroke];
                bezier121Path.lineWidth = 1;
                [bezier121Path stroke];
            }
        }
    }


    //// Cleanup
    CGGradientRelease(lightSideMoonGradient);
    CGGradientRelease(darkSideMoonGradient);
    CGGradientRelease(sunBallGradient);
    CGGradientRelease(sunStarDradient);
    CGGradientRelease(dayLightningGradient);
    CGGradientRelease(tableViewGradient);
    CGGradientRelease(earthGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas20
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* shadow2Color = [UIColor colorWithRed: 1 green: 0.799 blue: 0.229 alpha: 1];
    UIColor* moonGradientColor = [UIColor colorWithRed: 1 green: 0.945 blue: 0.698 alpha: 1];
    UIColor* moonGradientColor2 = [UIColor colorWithRed: 0.538 green: 0.507 blue: 0.337 alpha: 1];
    UIColor* darkSideMoonGradientColor = [UIColor colorWithRed: 0.723 green: 0.715 blue: 0.715 alpha: 1];
    UIColor* darkSideMoonGradientColor2 = [UIColor colorWithRed: 0.189 green: 0.184 blue: 0.184 alpha: 1];
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* innerMoonShadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Gradient Declarations
    CGFloat lightSideMoonGradientLocations[] = {0, 0.77, 1};
    CGGradientRef lightSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)moonGradientColor.CGColor, (id)[moonGradientColor blendedColorWithFraction: 0.5 ofColor: moonGradientColor2].CGColor, (id)moonGradientColor2.CGColor], lightSideMoonGradientLocations);
    CGFloat darkSideMoonGradientLocations[] = {0, 0.55, 1};
    CGGradientRef darkSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)darkSideMoonGradientColor.CGColor, (id)[darkSideMoonGradientColor blendedColorWithFraction: 0.5 ofColor: darkSideMoonGradientColor2].CGColor, (id)darkSideMoonGradientColor2.CGColor], darkSideMoonGradientLocations);

    //// Shadow Declarations
    NSShadow* moonFrontShadow = [[NSShadow alloc] init];
    [moonFrontShadow setShadowColor: [moonFrontShadowColor colorWithAlphaComponent: CGColorGetAlpha(moonFrontShadowColor.CGColor) * 0.17]];
    [moonFrontShadow setShadowOffset: CGSizeMake(-33.1, 66.1)];
    [moonFrontShadow setShadowBlurRadius: 57];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];
    NSShadow* innerMoonLightSideShadow = [[NSShadow alloc] init];
    [innerMoonLightSideShadow setShadowColor: [innerMoonShadowColor colorWithAlphaComponent: CGColorGetAlpha(innerMoonShadowColor.CGColor) * 0.5]];
    [innerMoonLightSideShadow setShadowOffset: CGSizeMake(-1.1, -1.1)];
    [innerMoonLightSideShadow setShadowBlurRadius: 2];
    NSShadow* innerMoonDarksideShadow = [[NSShadow alloc] init];
    [innerMoonDarksideShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.43]];
    [innerMoonDarksideShadow setShadowOffset: CGSizeMake(-9.1, 1.1)];
    [innerMoonDarksideShadow setShadowBlurRadius: 10];

    //// Star 15 Drawing
    UIBezierPath* star15Path = [UIBezierPath bezierPath];
    [star15Path moveToPoint: CGPointMake(297.5, 13.5)];
    [star15Path addLineToPoint: CGPointMake(301.38, 19.16)];
    [star15Path addLineToPoint: CGPointMake(307.96, 21.1)];
    [star15Path addLineToPoint: CGPointMake(303.78, 26.54)];
    [star15Path addLineToPoint: CGPointMake(303.97, 33.4)];
    [star15Path addLineToPoint: CGPointMake(297.5, 31.1)];
    [star15Path addLineToPoint: CGPointMake(291.03, 33.4)];
    [star15Path addLineToPoint: CGPointMake(291.22, 26.54)];
    [star15Path addLineToPoint: CGPointMake(287.04, 21.1)];
    [star15Path addLineToPoint: CGPointMake(293.62, 19.16)];
    [star15Path closePath];
    [color11 setFill];
    [star15Path fill];
    [shadow2Color setStroke];
    star15Path.lineWidth = 1;
    [star15Path stroke];


    //// Bezier 8 Drawing
    UIBezierPath* bezier8Path = [UIBezierPath bezierPath];
    [UIColor.blackColor setStroke];
    bezier8Path.lineWidth = 1;
    [bezier8Path stroke];


    //// Star 5 Drawing
    UIBezierPath* star5Path = [UIBezierPath bezierPath];
    [star5Path moveToPoint: CGPointMake(210, 12)];
    [star5Path addLineToPoint: CGPointMake(214.58, 18.69)];
    [star5Path addLineToPoint: CGPointMake(222.36, 20.98)];
    [star5Path addLineToPoint: CGPointMake(217.42, 27.41)];
    [star5Path addLineToPoint: CGPointMake(217.64, 35.52)];
    [star5Path addLineToPoint: CGPointMake(210, 32.8)];
    [star5Path addLineToPoint: CGPointMake(202.36, 35.52)];
    [star5Path addLineToPoint: CGPointMake(202.58, 27.41)];
    [star5Path addLineToPoint: CGPointMake(197.64, 20.98)];
    [star5Path addLineToPoint: CGPointMake(205.42, 18.69)];
    [star5Path closePath];
    [color11 setFill];
    [star5Path fill];
    [shadow2Color setStroke];
    star5Path.lineWidth = 1;
    [star5Path stroke];


    //// Group 2
    {
        //// Star 18 Drawing
        UIBezierPath* star18Path = [UIBezierPath bezierPath];
        [star18Path moveToPoint: CGPointMake(364.5, 72.5)];
        [star18Path addLineToPoint: CGPointMake(367.32, 76.62)];
        [star18Path addLineToPoint: CGPointMake(372.11, 78.03)];
        [star18Path addLineToPoint: CGPointMake(369.07, 81.98)];
        [star18Path addLineToPoint: CGPointMake(369.2, 86.97)];
        [star18Path addLineToPoint: CGPointMake(364.5, 85.3)];
        [star18Path addLineToPoint: CGPointMake(359.8, 86.97)];
        [star18Path addLineToPoint: CGPointMake(359.93, 81.98)];
        [star18Path addLineToPoint: CGPointMake(356.89, 78.03)];
        [star18Path addLineToPoint: CGPointMake(361.68, 76.62)];
        [star18Path closePath];
        [color11 setFill];
        [star18Path fill];
        [shadow2Color setStroke];
        star18Path.lineWidth = 1;
        [star18Path stroke];


        //// Star 12 Drawing
        UIBezierPath* star12Path = [UIBezierPath bezierPath];
        [star12Path moveToPoint: CGPointMake(344.5, 9.5)];
        [star12Path addLineToPoint: CGPointMake(347.67, 14.13)];
        [star12Path addLineToPoint: CGPointMake(353.06, 15.72)];
        [star12Path addLineToPoint: CGPointMake(349.64, 20.17)];
        [star12Path addLineToPoint: CGPointMake(349.79, 25.78)];
        [star12Path addLineToPoint: CGPointMake(344.5, 23.9)];
        [star12Path addLineToPoint: CGPointMake(339.21, 25.78)];
        [star12Path addLineToPoint: CGPointMake(339.36, 20.17)];
        [star12Path addLineToPoint: CGPointMake(335.94, 15.72)];
        [star12Path addLineToPoint: CGPointMake(341.33, 14.13)];
        [star12Path closePath];
        [color11 setFill];
        [star12Path fill];
        [shadow2Color setStroke];
        star12Path.lineWidth = 1;
        [star12Path stroke];


        //// Star 16 Drawing
        UIBezierPath* star16Path = [UIBezierPath bezierPath];
        [star16Path moveToPoint: CGPointMake(400, 11)];
        [star16Path addLineToPoint: CGPointMake(402.82, 15.12)];
        [star16Path addLineToPoint: CGPointMake(407.61, 16.53)];
        [star16Path addLineToPoint: CGPointMake(404.57, 20.48)];
        [star16Path addLineToPoint: CGPointMake(404.7, 25.47)];
        [star16Path addLineToPoint: CGPointMake(400, 23.8)];
        [star16Path addLineToPoint: CGPointMake(395.3, 25.47)];
        [star16Path addLineToPoint: CGPointMake(395.43, 20.48)];
        [star16Path addLineToPoint: CGPointMake(392.39, 16.53)];
        [star16Path addLineToPoint: CGPointMake(397.18, 15.12)];
        [star16Path closePath];
        [color11 setFill];
        [star16Path fill];
        [shadow2Color setStroke];
        star16Path.lineWidth = 1;
        [star16Path stroke];


        //// Star 19 Drawing
        UIBezierPath* star19Path = [UIBezierPath bezierPath];
        [star19Path moveToPoint: CGPointMake(378.5, 42.5)];
        [star19Path addLineToPoint: CGPointMake(380.26, 45.07)];
        [star19Path addLineToPoint: CGPointMake(383.26, 45.95)];
        [star19Path addLineToPoint: CGPointMake(381.35, 48.43)];
        [star19Path addLineToPoint: CGPointMake(381.44, 51.55)];
        [star19Path addLineToPoint: CGPointMake(378.5, 50.5)];
        [star19Path addLineToPoint: CGPointMake(375.56, 51.55)];
        [star19Path addLineToPoint: CGPointMake(375.65, 48.43)];
        [star19Path addLineToPoint: CGPointMake(373.74, 45.95)];
        [star19Path addLineToPoint: CGPointMake(376.74, 45.07)];
        [star19Path closePath];
        [color11 setFill];
        [star19Path fill];
        [shadow2Color setStroke];
        star19Path.lineWidth = 1;
        [star19Path stroke];


        //// Star 20 Drawing
        UIBezierPath* star20Path = [UIBezierPath bezierPath];
        [star20Path moveToPoint: CGPointMake(400, 100)];
        [star20Path addLineToPoint: CGPointMake(404.94, 107.2)];
        [star20Path addLineToPoint: CGPointMake(413.31, 109.67)];
        [star20Path addLineToPoint: CGPointMake(407.99, 116.6)];
        [star20Path addLineToPoint: CGPointMake(408.23, 125.33)];
        [star20Path addLineToPoint: CGPointMake(400, 122.4)];
        [star20Path addLineToPoint: CGPointMake(391.77, 125.33)];
        [star20Path addLineToPoint: CGPointMake(392.01, 116.6)];
        [star20Path addLineToPoint: CGPointMake(386.69, 109.67)];
        [star20Path addLineToPoint: CGPointMake(395.06, 107.2)];
        [star20Path closePath];
        [color11 setFill];
        [star20Path fill];
        [shadow2Color setStroke];
        star20Path.lineWidth = 1;
        [star20Path stroke];


        //// Star 13 Drawing
        UIBezierPath* star13Path = [UIBezierPath bezierPath];
        [star13Path moveToPoint: CGPointMake(348.5, 150.5)];
        [star13Path addLineToPoint: CGPointMake(352.73, 156.68)];
        [star13Path addLineToPoint: CGPointMake(359.91, 158.79)];
        [star13Path addLineToPoint: CGPointMake(355.35, 164.72)];
        [star13Path addLineToPoint: CGPointMake(355.55, 172.21)];
        [star13Path addLineToPoint: CGPointMake(348.5, 169.7)];
        [star13Path addLineToPoint: CGPointMake(341.45, 172.21)];
        [star13Path addLineToPoint: CGPointMake(341.65, 164.72)];
        [star13Path addLineToPoint: CGPointMake(337.09, 158.79)];
        [star13Path addLineToPoint: CGPointMake(344.27, 156.68)];
        [star13Path closePath];
        [color11 setFill];
        [star13Path fill];
        [shadow2Color setStroke];
        star13Path.lineWidth = 1;
        [star13Path stroke];
    }


    //// Group
    {
        //// Star Drawing
        UIBezierPath* starPath = [UIBezierPath bezierPath];
        [starPath moveToPoint: CGPointMake(44.5, 60.5)];
        [starPath addLineToPoint: CGPointMake(47.32, 64.62)];
        [starPath addLineToPoint: CGPointMake(52.11, 66.03)];
        [starPath addLineToPoint: CGPointMake(49.07, 69.98)];
        [starPath addLineToPoint: CGPointMake(49.2, 74.97)];
        [starPath addLineToPoint: CGPointMake(44.5, 73.3)];
        [starPath addLineToPoint: CGPointMake(39.8, 74.97)];
        [starPath addLineToPoint: CGPointMake(39.93, 69.98)];
        [starPath addLineToPoint: CGPointMake(36.89, 66.03)];
        [starPath addLineToPoint: CGPointMake(41.68, 64.62)];
        [starPath closePath];
        [color11 setFill];
        [starPath fill];
        [shadow2Color setStroke];
        starPath.lineWidth = 1;
        [starPath stroke];


        //// Star 2 Drawing
        UIBezierPath* star2Path = [UIBezierPath bezierPath];
        [star2Path moveToPoint: CGPointMake(106, 58)];
        [star2Path addLineToPoint: CGPointMake(108.47, 61.6)];
        [star2Path addLineToPoint: CGPointMake(112.66, 62.84)];
        [star2Path addLineToPoint: CGPointMake(109.99, 66.3)];
        [star2Path addLineToPoint: CGPointMake(110.11, 70.66)];
        [star2Path addLineToPoint: CGPointMake(106, 69.2)];
        [star2Path addLineToPoint: CGPointMake(101.89, 70.66)];
        [star2Path addLineToPoint: CGPointMake(102.01, 66.3)];
        [star2Path addLineToPoint: CGPointMake(99.34, 62.84)];
        [star2Path addLineToPoint: CGPointMake(103.53, 61.6)];
        [star2Path closePath];
        [color11 setFill];
        [star2Path fill];
        [shadow2Color setStroke];
        star2Path.lineWidth = 1;
        [star2Path stroke];


        //// Star 3 Drawing
        UIBezierPath* star3Path = [UIBezierPath bezierPath];
        [star3Path moveToPoint: CGPointMake(108, 14)];
        [star3Path addLineToPoint: CGPointMake(111.17, 18.63)];
        [star3Path addLineToPoint: CGPointMake(116.56, 20.22)];
        [star3Path addLineToPoint: CGPointMake(113.14, 24.67)];
        [star3Path addLineToPoint: CGPointMake(113.29, 30.28)];
        [star3Path addLineToPoint: CGPointMake(108, 28.4)];
        [star3Path addLineToPoint: CGPointMake(102.71, 30.28)];
        [star3Path addLineToPoint: CGPointMake(102.86, 24.67)];
        [star3Path addLineToPoint: CGPointMake(99.44, 20.22)];
        [star3Path addLineToPoint: CGPointMake(104.83, 18.63)];
        [star3Path closePath];
        [color11 setFill];
        [star3Path fill];
        [shadow2Color setStroke];
        star3Path.lineWidth = 1;
        [star3Path stroke];


        //// Star 4 Drawing
        UIBezierPath* star4Path = [UIBezierPath bezierPath];
        [star4Path moveToPoint: CGPointMake(147, 20)];
        [star4Path addLineToPoint: CGPointMake(148.76, 22.57)];
        [star4Path addLineToPoint: CGPointMake(151.76, 23.45)];
        [star4Path addLineToPoint: CGPointMake(149.85, 25.93)];
        [star4Path addLineToPoint: CGPointMake(149.94, 29.05)];
        [star4Path addLineToPoint: CGPointMake(147, 28)];
        [star4Path addLineToPoint: CGPointMake(144.06, 29.05)];
        [star4Path addLineToPoint: CGPointMake(144.15, 25.93)];
        [star4Path addLineToPoint: CGPointMake(142.24, 23.45)];
        [star4Path addLineToPoint: CGPointMake(145.24, 22.57)];
        [star4Path closePath];
        [color11 setFill];
        [star4Path fill];
        [shadow2Color setStroke];
        star4Path.lineWidth = 1;
        [star4Path stroke];


        //// Star 6 Drawing
        UIBezierPath* star6Path = [UIBezierPath bezierPath];
        [star6Path moveToPoint: CGPointMake(159.5, 64.5)];
        [star6Path addLineToPoint: CGPointMake(163.38, 70.16)];
        [star6Path addLineToPoint: CGPointMake(169.96, 72.1)];
        [star6Path addLineToPoint: CGPointMake(165.78, 77.54)];
        [star6Path addLineToPoint: CGPointMake(165.97, 84.4)];
        [star6Path addLineToPoint: CGPointMake(159.5, 82.1)];
        [star6Path addLineToPoint: CGPointMake(153.03, 84.4)];
        [star6Path addLineToPoint: CGPointMake(153.22, 77.54)];
        [star6Path addLineToPoint: CGPointMake(149.04, 72.1)];
        [star6Path addLineToPoint: CGPointMake(155.62, 70.16)];
        [star6Path closePath];
        [color11 setFill];
        [star6Path fill];
        [shadow2Color setStroke];
        star6Path.lineWidth = 1;
        [star6Path stroke];


        //// Star 7 Drawing
        UIBezierPath* star7Path = [UIBezierPath bezierPath];
        [star7Path moveToPoint: CGPointMake(106, 99)];
        [star7Path addLineToPoint: CGPointMake(109.17, 103.63)];
        [star7Path addLineToPoint: CGPointMake(114.56, 105.22)];
        [star7Path addLineToPoint: CGPointMake(111.14, 109.67)];
        [star7Path addLineToPoint: CGPointMake(111.29, 115.28)];
        [star7Path addLineToPoint: CGPointMake(106, 113.4)];
        [star7Path addLineToPoint: CGPointMake(100.71, 115.28)];
        [star7Path addLineToPoint: CGPointMake(100.86, 109.67)];
        [star7Path addLineToPoint: CGPointMake(97.44, 105.22)];
        [star7Path addLineToPoint: CGPointMake(102.83, 103.63)];
        [star7Path closePath];
        [color11 setFill];
        [star7Path fill];
        [shadow2Color setStroke];
        star7Path.lineWidth = 1;
        [star7Path stroke];


        //// Star 8 Drawing
        UIBezierPath* star8Path = [UIBezierPath bezierPath];
        [star8Path moveToPoint: CGPointMake(25.5, 6.5)];
        [star8Path addLineToPoint: CGPointMake(28.67, 11.13)];
        [star8Path addLineToPoint: CGPointMake(34.06, 12.72)];
        [star8Path addLineToPoint: CGPointMake(30.64, 17.17)];
        [star8Path addLineToPoint: CGPointMake(30.79, 22.78)];
        [star8Path addLineToPoint: CGPointMake(25.5, 20.9)];
        [star8Path addLineToPoint: CGPointMake(20.21, 22.78)];
        [star8Path addLineToPoint: CGPointMake(20.36, 17.17)];
        [star8Path addLineToPoint: CGPointMake(16.94, 12.72)];
        [star8Path addLineToPoint: CGPointMake(22.33, 11.13)];
        [star8Path closePath];
        [color11 setFill];
        [star8Path fill];
        [shadow2Color setStroke];
        star8Path.lineWidth = 1;
        [star8Path stroke];


        //// Star 9 Drawing
        UIBezierPath* star9Path = [UIBezierPath bezierPath];
        [star9Path moveToPoint: CGPointMake(74.5, 72)];
        [star9Path addLineToPoint: CGPointMake(76.62, 75.09)];
        [star9Path addLineToPoint: CGPointMake(80.21, 76.15)];
        [star9Path addLineToPoint: CGPointMake(77.92, 79.11)];
        [star9Path addLineToPoint: CGPointMake(78.03, 82.85)];
        [star9Path addLineToPoint: CGPointMake(74.5, 81.6)];
        [star9Path addLineToPoint: CGPointMake(70.97, 82.85)];
        [star9Path addLineToPoint: CGPointMake(71.08, 79.11)];
        [star9Path addLineToPoint: CGPointMake(68.79, 76.15)];
        [star9Path addLineToPoint: CGPointMake(72.38, 75.09)];
        [star9Path closePath];
        [color11 setFill];
        [star9Path fill];
        [shadow2Color setStroke];
        star9Path.lineWidth = 1;
        [star9Path stroke];


        //// Star 10 Drawing
        UIBezierPath* star10Path = [UIBezierPath bezierPath];
        [star10Path moveToPoint: CGPointMake(25, 83.5)];
        [star10Path addLineToPoint: CGPointMake(28.17, 88.13)];
        [star10Path addLineToPoint: CGPointMake(33.56, 89.72)];
        [star10Path addLineToPoint: CGPointMake(30.14, 94.17)];
        [star10Path addLineToPoint: CGPointMake(30.29, 99.78)];
        [star10Path addLineToPoint: CGPointMake(25, 97.9)];
        [star10Path addLineToPoint: CGPointMake(19.71, 99.78)];
        [star10Path addLineToPoint: CGPointMake(19.86, 94.17)];
        [star10Path addLineToPoint: CGPointMake(16.44, 89.72)];
        [star10Path addLineToPoint: CGPointMake(21.83, 88.13)];
        [star10Path closePath];
        [color11 setFill];
        [star10Path fill];
        [shadow2Color setStroke];
        star10Path.lineWidth = 1;
        [star10Path stroke];


        //// Star 11 Drawing
        UIBezierPath* star11Path = [UIBezierPath bezierPath];
        [star11Path moveToPoint: CGPointMake(185.5, 133.5)];
        [star11Path addLineToPoint: CGPointMake(189.38, 139.16)];
        [star11Path addLineToPoint: CGPointMake(195.96, 141.1)];
        [star11Path addLineToPoint: CGPointMake(191.78, 146.54)];
        [star11Path addLineToPoint: CGPointMake(191.97, 153.4)];
        [star11Path addLineToPoint: CGPointMake(185.5, 151.1)];
        [star11Path addLineToPoint: CGPointMake(179.03, 153.4)];
        [star11Path addLineToPoint: CGPointMake(179.22, 146.54)];
        [star11Path addLineToPoint: CGPointMake(175.04, 141.1)];
        [star11Path addLineToPoint: CGPointMake(181.62, 139.16)];
        [star11Path closePath];
        [color11 setFill];
        [star11Path fill];
        [shadow2Color setStroke];
        star11Path.lineWidth = 1;
        [star11Path stroke];


        //// Star 14 Drawing
        UIBezierPath* star14Path = [UIBezierPath bezierPath];
        [star14Path moveToPoint: CGPointMake(51.5, 146.5)];
        [star14Path addLineToPoint: CGPointMake(56.08, 153.19)];
        [star14Path addLineToPoint: CGPointMake(63.86, 155.48)];
        [star14Path addLineToPoint: CGPointMake(58.92, 161.91)];
        [star14Path addLineToPoint: CGPointMake(59.14, 170.02)];
        [star14Path addLineToPoint: CGPointMake(51.5, 167.3)];
        [star14Path addLineToPoint: CGPointMake(43.86, 170.02)];
        [star14Path addLineToPoint: CGPointMake(44.08, 161.91)];
        [star14Path addLineToPoint: CGPointMake(39.14, 155.48)];
        [star14Path addLineToPoint: CGPointMake(46.92, 153.19)];
        [star14Path closePath];
        [color11 setFill];
        [star14Path fill];
        [shadow2Color setStroke];
        star14Path.lineWidth = 1;
        [star14Path stroke];


        //// Star 17 Drawing
        UIBezierPath* star17Path = [UIBezierPath bezierPath];
        [star17Path moveToPoint: CGPointMake(83.5, 65.5)];
        [star17Path addLineToPoint: CGPointMake(84.56, 67.04)];
        [star17Path addLineToPoint: CGPointMake(86.35, 67.57)];
        [star17Path addLineToPoint: CGPointMake(85.21, 69.06)];
        [star17Path addLineToPoint: CGPointMake(85.26, 70.93)];
        [star17Path addLineToPoint: CGPointMake(83.5, 70.3)];
        [star17Path addLineToPoint: CGPointMake(81.74, 70.93)];
        [star17Path addLineToPoint: CGPointMake(81.79, 69.06)];
        [star17Path addLineToPoint: CGPointMake(80.65, 67.57)];
        [star17Path addLineToPoint: CGPointMake(82.44, 67.04)];
        [star17Path closePath];
        [color11 setFill];
        [star17Path fill];
        [shadow2Color setStroke];
        star17Path.lineWidth = 1;
        [star17Path stroke];


        //// Star 22 Drawing
        UIBezierPath* star22Path = [UIBezierPath bezierPath];
        [star22Path moveToPoint: CGPointMake(92.5, 59.5)];
        [star22Path addLineToPoint: CGPointMake(93.56, 61.04)];
        [star22Path addLineToPoint: CGPointMake(95.35, 61.57)];
        [star22Path addLineToPoint: CGPointMake(94.21, 63.06)];
        [star22Path addLineToPoint: CGPointMake(94.26, 64.93)];
        [star22Path addLineToPoint: CGPointMake(92.5, 64.3)];
        [star22Path addLineToPoint: CGPointMake(90.74, 64.93)];
        [star22Path addLineToPoint: CGPointMake(90.79, 63.06)];
        [star22Path addLineToPoint: CGPointMake(89.65, 61.57)];
        [star22Path addLineToPoint: CGPointMake(91.44, 61.04)];
        [star22Path closePath];
        [color11 setFill];
        [star22Path fill];
        [shadow2Color setStroke];
        star22Path.lineWidth = 1;
        [star22Path stroke];
    }


    //// Group 4
    {
        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(209.5, 34, 133, 135)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonFrontShadow.shadowOffset, moonFrontShadow.shadowBlurRadius, [moonFrontShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);
        [oval4Path addClip];
        CGContextDrawLinearGradient(context, darkSideMoonGradient, CGPointMake(276, 34), CGPointMake(276, 169), 0);
        CGContextEndTransparencyLayer(context);

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([innerMoonDarksideShadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [innerMoonDarksideShadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, innerMoonDarksideShadow.shadowOffset, innerMoonDarksideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [color setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPath];
        [oval5Path moveToPoint: CGPointMake(258, 67.5)];
        [oval5Path addCurveToPoint: CGPointMake(254.15, 85.03) controlPoint1: CGPointMake(259.89, 70.43) controlPoint2: CGPointMake(256.33, 77.89)];
        [oval5Path addCurveToPoint: CGPointMake(258, 100.5) controlPoint1: CGPointMake(252.03, 91.97) controlPoint2: CGPointMake(252.39, 95.69)];
        [oval5Path addCurveToPoint: CGPointMake(250.5, 110.5) controlPoint1: CGPointMake(261.5, 103.5) controlPoint2: CGPointMake(251.64, 108.61)];
        [oval5Path addCurveToPoint: CGPointMake(246, 129.5) controlPoint1: CGPointMake(247.5, 115.5) controlPoint2: CGPointMake(246, 121.63)];
        [oval5Path addCurveToPoint: CGPointMake(276.5, 168.5) controlPoint1: CGPointMake(246, 166.78) controlPoint2: CGPointMake(313.78, 168.5)];
        [oval5Path addCurveToPoint: CGPointMake(209, 101) controlPoint1: CGPointMake(239.22, 168.5) controlPoint2: CGPointMake(209, 138.28)];
        [oval5Path addCurveToPoint: CGPointMake(276.5, 33.5) controlPoint1: CGPointMake(209, 63.72) controlPoint2: CGPointMake(239.22, 33.5)];
        [oval5Path addCurveToPoint: CGPointMake(258, 67.5) controlPoint1: CGPointMake(293.25, 33.5) controlPoint2: CGPointMake(251.54, 57.51)];
        [oval5Path closePath];
        CGContextSaveGState(context);
        [oval5Path addClip];
        CGContextDrawLinearGradient(context, lightSideMoonGradient, CGPointMake(248.35, 33.5), CGPointMake(248.35, 168.5), 0);
        CGContextRestoreGState(context);

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([innerMoonLightSideShadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [innerMoonLightSideShadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, innerMoonLightSideShadow.shadowOffset, innerMoonLightSideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Group 5
        {
            //// Oval 7 Drawing
            UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(274, 74.5, 14, 20)];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
            [UIColor.whiteColor setFill];
            [oval7Path fill];
            CGContextRestoreGState(context);

            [color setStroke];
            oval7Path.lineWidth = 1;
            [oval7Path stroke];


            //// Oval 8 Drawing
            UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(261, 71.5, 13.5, 23)];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
            [UIColor.whiteColor setFill];
            [oval8Path fill];
            CGContextRestoreGState(context);

            [color setStroke];
            oval8Path.lineWidth = 1;
            [oval8Path stroke];


            //// Oval 9 Drawing
            UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(261.5, 78.5, 3.5, 8.5)];
            [UIColor.blackColor setFill];
            [oval9Path fill];
            [color setStroke];
            oval9Path.lineWidth = 1;
            [oval9Path stroke];


            //// Bezier Drawing
            UIBezierPath* bezierPath = [UIBezierPath bezierPath];
            [UIColor.blackColor setStroke];
            bezierPath.lineWidth = 1;
            [bezierPath stroke];


            //// Bezier 9 Drawing
            UIBezierPath* bezier9Path = [UIBezierPath bezierPath];
            [UIColor.darkGrayColor setFill];
            [bezier9Path fill];
            [color setStroke];
            bezier9Path.lineWidth = 1;
            [bezier9Path stroke];


            //// Oval 10 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 235.95, 76.99);
            CGContextRotateCTM(context, 11.2 * M_PI / 180);

            UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-5.75, -4.02, 11.5, 8.04)];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
            [UIColor.whiteColor setFill];
            [oval10Path fill];
            CGContextRestoreGState(context);

            [UIColor.darkGrayColor setStroke];
            oval10Path.lineWidth = 1;
            [oval10Path stroke];

            CGContextRestoreGState(context);


            //// Oval 11 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 249.06, 83.1);
            CGContextRotateCTM(context, 10.56 * M_PI / 180);

            UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6.56, -6.24, 8.23, 6.85)];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
            [UIColor.whiteColor setFill];
            [oval11Path fill];
            CGContextRestoreGState(context);

            [UIColor.darkGrayColor setStroke];
            oval11Path.lineWidth = 1;
            [oval11Path stroke];

            CGContextRestoreGState(context);


            //// Bezier 10 Drawing
            UIBezierPath* bezier10Path = [UIBezierPath bezierPath];
            [color11 setFill];
            [bezier10Path fill];
            [UIColor.darkGrayColor setStroke];
            bezier10Path.lineWidth = 1;
            [bezier10Path stroke];


            //// Bezier 11 Drawing
            UIBezierPath* bezier11Path = [UIBezierPath bezierPath];
            [UIColor.darkGrayColor setStroke];
            bezier11Path.lineWidth = 1;
            [bezier11Path stroke];


            //// Bezier 12 Drawing
            UIBezierPath* bezier12Path = [UIBezierPath bezierPath];
            [UIColor.darkGrayColor setStroke];
            bezier12Path.lineWidth = 1;
            [bezier12Path stroke];


            //// Oval 12 Drawing
            UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(238, 75.5, 4, 4)];
            [color setFill];
            [oval12Path fill];


            //// Oval 13 Drawing
            UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(248, 78, 3.5, 4)];
            [color setFill];
            [oval13Path fill];


            //// Bezier 13 Drawing
            UIBezierPath* bezier13Path = [UIBezierPath bezierPath];
            [bezier13Path moveToPoint: CGPointMake(242.5, 136)];
            [bezier13Path addCurveToPoint: CGPointMake(242.51, 130.11) controlPoint1: CGPointMake(246.37, 133.51) controlPoint2: CGPointMake(244.64, 128.5)];
            [bezier13Path addCurveToPoint: CGPointMake(224, 123) controlPoint1: CGPointMake(237.35, 134.02) controlPoint2: CGPointMake(224, 123)];
            [bezier13Path addCurveToPoint: CGPointMake(242.5, 136) controlPoint1: CGPointMake(224, 123) controlPoint2: CGPointMake(236.98, 139.55)];
            [bezier13Path closePath];
            [UIColor.whiteColor setFill];
            [bezier13Path fill];
            [color setStroke];
            bezier13Path.lineWidth = 1;
            [bezier13Path stroke];


            //// Bezier 14 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 275.6, 129.87);
            CGContextRotateCTM(context, -9.13 * M_PI / 180);

            UIBezierPath* bezier14Path = [UIBezierPath bezierPath];
            [bezier14Path moveToPoint: CGPointMake(-14.49, -6.25)];
            [bezier14Path addCurveToPoint: CGPointMake(18.65, -6.25) controlPoint1: CGPointMake(-1.66, 10.32) controlPoint2: CGPointMake(18.65, -6.25)];
            [bezier14Path addLineToPoint: CGPointMake(1.69, 11.16)];
            [bezier14Path addLineToPoint: CGPointMake(-6.34, 7.76)];
            [bezier14Path addCurveToPoint: CGPointMake(-14.49, -6.25) controlPoint1: CGPointMake(-6.34, 7.76) controlPoint2: CGPointMake(-27.32, -22.81)];
            [bezier14Path closePath];
            [UIColor.whiteColor setFill];
            [bezier14Path fill];
            [UIColor.blackColor setStroke];
            bezier14Path.lineWidth = 1;
            [bezier14Path stroke];

            CGContextRestoreGState(context);


            //// Oval 14 Drawing
            UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(274.5, 80.5, 3.5, 8.5)];
            [UIColor.blackColor setFill];
            [oval14Path fill];
            [color setStroke];
            oval14Path.lineWidth = 1;
            [oval14Path stroke];
        }
    }


    //// Cleanup
    CGGradientRelease(lightSideMoonGradient);
    CGGradientRelease(darkSideMoonGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas21
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* gradientColor = [UIColor colorWithRed: 0.023 green: 0.053 blue: 0.209 alpha: 1];
    UIColor* gradientColor2 = [UIColor colorWithRed: 0.029 green: 0.123 blue: 0.04 alpha: 1];

    //// Gradient Declarations
    CGFloat nightSkyGradientLocations[] = {0.01, 0.56, 0.74, 0.93, 1};
    CGGradientRef nightSkyGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)UIColor.blackColor.CGColor, (id)[UIColor.blackColor blendedColorWithFraction: 0.5 ofColor: gradientColor].CGColor, (id)gradientColor.CGColor, (id)[gradientColor blendedColorWithFraction: 0.5 ofColor: gradientColor2].CGColor, (id)gradientColor2.CGColor], nightSkyGradientLocations);

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 414, 736)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, nightSkyGradient, CGPointMake(207, -0), CGPointMake(207, 736), 0);
    CGContextRestoreGState(context);


    //// Bezier 8 Drawing
    UIBezierPath* bezier8Path = [UIBezierPath bezierPath];
    [UIColor.blackColor setStroke];
    bezier8Path.lineWidth = 1;
    [bezier8Path stroke];


    //// Cleanup
    CGGradientRelease(nightSkyGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas22
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* moonGradientColor = [UIColor colorWithRed: 1 green: 0.945 blue: 0.698 alpha: 1];
    UIColor* moonGradientColor2 = [UIColor colorWithRed: 0.538 green: 0.507 blue: 0.337 alpha: 1];
    UIColor* darkSideMoonGradientColor = [UIColor colorWithRed: 0.723 green: 0.715 blue: 0.715 alpha: 1];
    UIColor* darkSideMoonGradientColor2 = [UIColor colorWithRed: 0.189 green: 0.184 blue: 0.184 alpha: 1];
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* innerMoonShadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Gradient Declarations
    CGFloat lightSideMoonGradientLocations[] = {0, 0.77, 1};
    CGGradientRef lightSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)moonGradientColor.CGColor, (id)[moonGradientColor blendedColorWithFraction: 0.5 ofColor: moonGradientColor2].CGColor, (id)moonGradientColor2.CGColor], lightSideMoonGradientLocations);
    CGFloat darkSideMoonGradientLocations[] = {0, 0.55, 1};
    CGGradientRef darkSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)darkSideMoonGradientColor.CGColor, (id)[darkSideMoonGradientColor blendedColorWithFraction: 0.5 ofColor: darkSideMoonGradientColor2].CGColor, (id)darkSideMoonGradientColor2.CGColor], darkSideMoonGradientLocations);

    //// Shadow Declarations
    NSShadow* moonFrontShadow = [[NSShadow alloc] init];
    [moonFrontShadow setShadowColor: [moonFrontShadowColor colorWithAlphaComponent: CGColorGetAlpha(moonFrontShadowColor.CGColor) * 0.17]];
    [moonFrontShadow setShadowOffset: CGSizeMake(-33.1, 66.1)];
    [moonFrontShadow setShadowBlurRadius: 57];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];
    NSShadow* innerMoonLightSideShadow = [[NSShadow alloc] init];
    [innerMoonLightSideShadow setShadowColor: [innerMoonShadowColor colorWithAlphaComponent: CGColorGetAlpha(innerMoonShadowColor.CGColor) * 0.5]];
    [innerMoonLightSideShadow setShadowOffset: CGSizeMake(-1.1, -1.1)];
    [innerMoonLightSideShadow setShadowBlurRadius: 2];
    NSShadow* innerMoonDarksideShadow = [[NSShadow alloc] init];
    [innerMoonDarksideShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.43]];
    [innerMoonDarksideShadow setShadowOffset: CGSizeMake(-9.1, 1.1)];
    [innerMoonDarksideShadow setShadowBlurRadius: 10];

    //// Group 4
    {
        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(226.5, 24, 133, 135)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonFrontShadow.shadowOffset, moonFrontShadow.shadowBlurRadius, [moonFrontShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);
        [oval4Path addClip];
        CGContextDrawLinearGradient(context, darkSideMoonGradient, CGPointMake(293, 24), CGPointMake(293, 159), 0);
        CGContextEndTransparencyLayer(context);

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([innerMoonDarksideShadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [innerMoonDarksideShadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, innerMoonDarksideShadow.shadowOffset, innerMoonDarksideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [color setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPath];
        [oval5Path moveToPoint: CGPointMake(275, 57.5)];
        [oval5Path addCurveToPoint: CGPointMake(271.15, 75.03) controlPoint1: CGPointMake(276.89, 60.43) controlPoint2: CGPointMake(273.33, 67.89)];
        [oval5Path addCurveToPoint: CGPointMake(275, 90.5) controlPoint1: CGPointMake(269.03, 81.97) controlPoint2: CGPointMake(269.39, 85.69)];
        [oval5Path addCurveToPoint: CGPointMake(267.5, 100.5) controlPoint1: CGPointMake(278.5, 93.5) controlPoint2: CGPointMake(268.64, 98.61)];
        [oval5Path addCurveToPoint: CGPointMake(263, 119.5) controlPoint1: CGPointMake(264.5, 105.5) controlPoint2: CGPointMake(263, 111.63)];
        [oval5Path addCurveToPoint: CGPointMake(293.5, 158.5) controlPoint1: CGPointMake(263, 156.78) controlPoint2: CGPointMake(330.78, 158.5)];
        [oval5Path addCurveToPoint: CGPointMake(226, 91) controlPoint1: CGPointMake(256.22, 158.5) controlPoint2: CGPointMake(226, 128.28)];
        [oval5Path addCurveToPoint: CGPointMake(293.5, 23.5) controlPoint1: CGPointMake(226, 53.72) controlPoint2: CGPointMake(256.22, 23.5)];
        [oval5Path addCurveToPoint: CGPointMake(275, 57.5) controlPoint1: CGPointMake(310.25, 23.5) controlPoint2: CGPointMake(268.54, 47.51)];
        [oval5Path closePath];
        CGContextSaveGState(context);
        [oval5Path addClip];
        CGContextDrawLinearGradient(context, lightSideMoonGradient, CGPointMake(265.35, 23.5), CGPointMake(265.35, 158.5), 0);
        CGContextRestoreGState(context);

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([innerMoonLightSideShadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [innerMoonLightSideShadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, innerMoonLightSideShadow.shadowOffset, innerMoonLightSideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Group 5
        {
            //// Oval 7 Drawing
            UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(291, 64.5, 14, 20)];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
            [UIColor.whiteColor setFill];
            [oval7Path fill];
            CGContextRestoreGState(context);

            [color setStroke];
            oval7Path.lineWidth = 1;
            [oval7Path stroke];


            //// Oval 8 Drawing
            UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(278, 61.5, 13.5, 23)];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
            [UIColor.whiteColor setFill];
            [oval8Path fill];
            CGContextRestoreGState(context);

            [color setStroke];
            oval8Path.lineWidth = 1;
            [oval8Path stroke];


            //// Oval 9 Drawing
            UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(278.5, 68.5, 3.5, 8.5)];
            [UIColor.blackColor setFill];
            [oval9Path fill];
            [color setStroke];
            oval9Path.lineWidth = 1;
            [oval9Path stroke];


            //// Bezier Drawing
            UIBezierPath* bezierPath = [UIBezierPath bezierPath];
            [UIColor.blackColor setStroke];
            bezierPath.lineWidth = 1;
            [bezierPath stroke];


            //// Bezier 9 Drawing
            UIBezierPath* bezier9Path = [UIBezierPath bezierPath];
            [UIColor.darkGrayColor setFill];
            [bezier9Path fill];
            [color setStroke];
            bezier9Path.lineWidth = 1;
            [bezier9Path stroke];


            //// Oval 10 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 252.95, 66.99);
            CGContextRotateCTM(context, 11.2 * M_PI / 180);

            UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-5.75, -4.02, 11.5, 8.04)];
            [UIColor.whiteColor setFill];
            [oval10Path fill];
            [UIColor.darkGrayColor setStroke];
            oval10Path.lineWidth = 1;
            [oval10Path stroke];

            CGContextRestoreGState(context);


            //// Oval 11 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 266.06, 73.1);
            CGContextRotateCTM(context, 10.56 * M_PI / 180);

            UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6.56, -6.24, 8.23, 6.85)];
            [UIColor.whiteColor setFill];
            [oval11Path fill];
            [UIColor.darkGrayColor setStroke];
            oval11Path.lineWidth = 1;
            [oval11Path stroke];

            CGContextRestoreGState(context);


            //// Bezier 10 Drawing
            UIBezierPath* bezier10Path = [UIBezierPath bezierPath];
            [color11 setFill];
            [bezier10Path fill];
            [UIColor.darkGrayColor setStroke];
            bezier10Path.lineWidth = 1;
            [bezier10Path stroke];


            //// Bezier 11 Drawing
            UIBezierPath* bezier11Path = [UIBezierPath bezierPath];
            [UIColor.darkGrayColor setStroke];
            bezier11Path.lineWidth = 1;
            [bezier11Path stroke];


            //// Bezier 12 Drawing
            UIBezierPath* bezier12Path = [UIBezierPath bezierPath];
            [UIColor.darkGrayColor setStroke];
            bezier12Path.lineWidth = 1;
            [bezier12Path stroke];


            //// Oval 12 Drawing
            UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(255, 65.5, 4, 4)];
            [color setFill];
            [oval12Path fill];


            //// Oval 13 Drawing
            UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(265, 68, 3.5, 4)];
            [color setFill];
            [oval13Path fill];


            //// Bezier 13 Drawing
            UIBezierPath* bezier13Path = [UIBezierPath bezierPath];
            [bezier13Path moveToPoint: CGPointMake(259.5, 126)];
            [bezier13Path addCurveToPoint: CGPointMake(259.51, 120.11) controlPoint1: CGPointMake(263.37, 123.51) controlPoint2: CGPointMake(261.64, 118.5)];
            [bezier13Path addCurveToPoint: CGPointMake(241, 113) controlPoint1: CGPointMake(254.35, 124.02) controlPoint2: CGPointMake(241, 113)];
            [bezier13Path addCurveToPoint: CGPointMake(259.5, 126) controlPoint1: CGPointMake(241, 113) controlPoint2: CGPointMake(253.98, 129.55)];
            [bezier13Path closePath];
            [UIColor.whiteColor setFill];
            [bezier13Path fill];
            [color setStroke];
            bezier13Path.lineWidth = 1;
            [bezier13Path stroke];


            //// Bezier 14 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 292.6, 119.87);
            CGContextRotateCTM(context, -9.13 * M_PI / 180);

            UIBezierPath* bezier14Path = [UIBezierPath bezierPath];
            [bezier14Path moveToPoint: CGPointMake(-14.49, -6.25)];
            [bezier14Path addCurveToPoint: CGPointMake(18.65, -6.25) controlPoint1: CGPointMake(-1.66, 10.32) controlPoint2: CGPointMake(18.65, -6.25)];
            [bezier14Path addLineToPoint: CGPointMake(1.69, 11.16)];
            [bezier14Path addLineToPoint: CGPointMake(-6.34, 7.76)];
            [bezier14Path addCurveToPoint: CGPointMake(-14.49, -6.25) controlPoint1: CGPointMake(-6.34, 7.76) controlPoint2: CGPointMake(-27.32, -22.81)];
            [bezier14Path closePath];
            [UIColor.whiteColor setFill];
            [bezier14Path fill];
            [UIColor.blackColor setStroke];
            bezier14Path.lineWidth = 1;
            [bezier14Path stroke];

            CGContextRestoreGState(context);


            //// Oval 14 Drawing
            UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(291.5, 70.5, 3.5, 8.5)];
            [UIColor.blackColor setFill];
            [oval14Path fill];
            [color setStroke];
            oval14Path.lineWidth = 1;
            [oval14Path stroke];
        }
    }


    //// Cleanup
    CGGradientRelease(lightSideMoonGradient);
    CGGradientRelease(darkSideMoonGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas23
{
    //// Color Declarations
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* shadow2Color = [UIColor colorWithRed: 1 green: 0.799 blue: 0.229 alpha: 1];

    //// Group 8
    {
        //// Star 7 Drawing
        UIBezierPath* star7Path = [UIBezierPath bezierPath];
        [star7Path moveToPoint: CGPointMake(364.5, 85)];
        [star7Path addLineToPoint: CGPointMake(367.32, 89.12)];
        [star7Path addLineToPoint: CGPointMake(372.11, 90.53)];
        [star7Path addLineToPoint: CGPointMake(369.07, 94.48)];
        [star7Path addLineToPoint: CGPointMake(369.2, 99.47)];
        [star7Path addLineToPoint: CGPointMake(364.5, 97.8)];
        [star7Path addLineToPoint: CGPointMake(359.8, 99.47)];
        [star7Path addLineToPoint: CGPointMake(359.93, 94.48)];
        [star7Path addLineToPoint: CGPointMake(356.89, 90.53)];
        [star7Path addLineToPoint: CGPointMake(361.68, 89.12)];
        [star7Path closePath];
        [color11 setFill];
        [star7Path fill];
        [shadow2Color setStroke];
        star7Path.lineWidth = 1;
        [star7Path stroke];


        //// Star 21 Drawing
        UIBezierPath* star21Path = [UIBezierPath bezierPath];
        [star21Path moveToPoint: CGPointMake(338.5, 24)];
        [star21Path addLineToPoint: CGPointMake(341.67, 28.63)];
        [star21Path addLineToPoint: CGPointMake(347.06, 30.22)];
        [star21Path addLineToPoint: CGPointMake(343.64, 34.67)];
        [star21Path addLineToPoint: CGPointMake(343.79, 40.28)];
        [star21Path addLineToPoint: CGPointMake(338.5, 38.4)];
        [star21Path addLineToPoint: CGPointMake(333.21, 40.28)];
        [star21Path addLineToPoint: CGPointMake(333.36, 34.67)];
        [star21Path addLineToPoint: CGPointMake(329.94, 30.22)];
        [star21Path addLineToPoint: CGPointMake(335.33, 28.63)];
        [star21Path closePath];
        [color11 setFill];
        [star21Path fill];
        [shadow2Color setStroke];
        star21Path.lineWidth = 1;
        [star21Path stroke];


        //// Star 23 Drawing
        UIBezierPath* star23Path = [UIBezierPath bezierPath];
        [star23Path moveToPoint: CGPointMake(400, 23.5)];
        [star23Path addLineToPoint: CGPointMake(402.82, 27.62)];
        [star23Path addLineToPoint: CGPointMake(407.61, 29.03)];
        [star23Path addLineToPoint: CGPointMake(404.57, 32.98)];
        [star23Path addLineToPoint: CGPointMake(404.7, 37.97)];
        [star23Path addLineToPoint: CGPointMake(400, 36.3)];
        [star23Path addLineToPoint: CGPointMake(395.3, 37.97)];
        [star23Path addLineToPoint: CGPointMake(395.43, 32.98)];
        [star23Path addLineToPoint: CGPointMake(392.39, 29.03)];
        [star23Path addLineToPoint: CGPointMake(397.18, 27.62)];
        [star23Path closePath];
        [color11 setFill];
        [star23Path fill];
        [shadow2Color setStroke];
        star23Path.lineWidth = 1;
        [star23Path stroke];


        //// Star 24 Drawing
        UIBezierPath* star24Path = [UIBezierPath bezierPath];
        [star24Path moveToPoint: CGPointMake(378.5, 55)];
        [star24Path addLineToPoint: CGPointMake(380.26, 57.57)];
        [star24Path addLineToPoint: CGPointMake(383.26, 58.45)];
        [star24Path addLineToPoint: CGPointMake(381.35, 60.93)];
        [star24Path addLineToPoint: CGPointMake(381.44, 64.05)];
        [star24Path addLineToPoint: CGPointMake(378.5, 63)];
        [star24Path addLineToPoint: CGPointMake(375.56, 64.05)];
        [star24Path addLineToPoint: CGPointMake(375.65, 60.93)];
        [star24Path addLineToPoint: CGPointMake(373.74, 58.45)];
        [star24Path addLineToPoint: CGPointMake(376.74, 57.57)];
        [star24Path closePath];
        [color11 setFill];
        [star24Path fill];
        [shadow2Color setStroke];
        star24Path.lineWidth = 1;
        [star24Path stroke];


        //// Star 25 Drawing
        UIBezierPath* star25Path = [UIBezierPath bezierPath];
        [star25Path moveToPoint: CGPointMake(400, 112.5)];
        [star25Path addLineToPoint: CGPointMake(404.94, 119.7)];
        [star25Path addLineToPoint: CGPointMake(413.31, 122.17)];
        [star25Path addLineToPoint: CGPointMake(407.99, 129.1)];
        [star25Path addLineToPoint: CGPointMake(408.23, 137.83)];
        [star25Path addLineToPoint: CGPointMake(400, 134.9)];
        [star25Path addLineToPoint: CGPointMake(391.77, 137.83)];
        [star25Path addLineToPoint: CGPointMake(392.01, 129.1)];
        [star25Path addLineToPoint: CGPointMake(386.69, 122.17)];
        [star25Path addLineToPoint: CGPointMake(395.06, 119.7)];
        [star25Path closePath];
        [color11 setFill];
        [star25Path fill];
        [shadow2Color setStroke];
        star25Path.lineWidth = 1;
        [star25Path stroke];


        //// Star 26 Drawing
        UIBezierPath* star26Path = [UIBezierPath bezierPath];
        [star26Path moveToPoint: CGPointMake(348.5, 163)];
        [star26Path addLineToPoint: CGPointMake(352.73, 169.18)];
        [star26Path addLineToPoint: CGPointMake(359.91, 171.29)];
        [star26Path addLineToPoint: CGPointMake(355.35, 177.22)];
        [star26Path addLineToPoint: CGPointMake(355.55, 184.71)];
        [star26Path addLineToPoint: CGPointMake(348.5, 182.2)];
        [star26Path addLineToPoint: CGPointMake(341.45, 184.71)];
        [star26Path addLineToPoint: CGPointMake(341.65, 177.22)];
        [star26Path addLineToPoint: CGPointMake(337.09, 171.29)];
        [star26Path addLineToPoint: CGPointMake(344.27, 169.18)];
        [star26Path closePath];
        [color11 setFill];
        [star26Path fill];
        [shadow2Color setStroke];
        star26Path.lineWidth = 1;
        [star26Path stroke];


        //// Star Drawing
        UIBezierPath* starPath = [UIBezierPath bezierPath];
        [starPath moveToPoint: CGPointMake(287.5, 71)];
        [starPath addLineToPoint: CGPointMake(290.32, 75.12)];
        [starPath addLineToPoint: CGPointMake(295.11, 76.53)];
        [starPath addLineToPoint: CGPointMake(292.07, 80.48)];
        [starPath addLineToPoint: CGPointMake(292.2, 85.47)];
        [starPath addLineToPoint: CGPointMake(287.5, 83.8)];
        [starPath addLineToPoint: CGPointMake(282.8, 85.47)];
        [starPath addLineToPoint: CGPointMake(282.93, 80.48)];
        [starPath addLineToPoint: CGPointMake(279.89, 76.53)];
        [starPath addLineToPoint: CGPointMake(284.68, 75.12)];
        [starPath closePath];
        [color11 setFill];
        [starPath fill];
        [shadow2Color setStroke];
        starPath.lineWidth = 1;
        [starPath stroke];


        //// Star 2 Drawing
        UIBezierPath* star2Path = [UIBezierPath bezierPath];
        [star2Path moveToPoint: CGPointMake(222, 107.5)];
        [star2Path addLineToPoint: CGPointMake(224.47, 111.1)];
        [star2Path addLineToPoint: CGPointMake(228.66, 112.34)];
        [star2Path addLineToPoint: CGPointMake(225.99, 115.8)];
        [star2Path addLineToPoint: CGPointMake(226.11, 120.16)];
        [star2Path addLineToPoint: CGPointMake(222, 118.7)];
        [star2Path addLineToPoint: CGPointMake(217.89, 120.16)];
        [star2Path addLineToPoint: CGPointMake(218.01, 115.8)];
        [star2Path addLineToPoint: CGPointMake(215.34, 112.34)];
        [star2Path addLineToPoint: CGPointMake(219.53, 111.1)];
        [star2Path closePath];
        [color11 setFill];
        [star2Path fill];
        [shadow2Color setStroke];
        star2Path.lineWidth = 1;
        [star2Path stroke];


        //// Star 3 Drawing
        UIBezierPath* star3Path = [UIBezierPath bezierPath];
        [star3Path moveToPoint: CGPointMake(251.5, 140.5)];
        [star3Path addLineToPoint: CGPointMake(253.62, 143.59)];
        [star3Path addLineToPoint: CGPointMake(257.21, 144.65)];
        [star3Path addLineToPoint: CGPointMake(254.92, 147.61)];
        [star3Path addLineToPoint: CGPointMake(255.03, 151.35)];
        [star3Path addLineToPoint: CGPointMake(251.5, 150.1)];
        [star3Path addLineToPoint: CGPointMake(247.97, 151.35)];
        [star3Path addLineToPoint: CGPointMake(248.08, 147.61)];
        [star3Path addLineToPoint: CGPointMake(245.79, 144.65)];
        [star3Path addLineToPoint: CGPointMake(249.38, 143.59)];
        [star3Path closePath];
        [color11 setFill];
        [star3Path fill];
        [shadow2Color setStroke];
        star3Path.lineWidth = 1;
        [star3Path stroke];
    }


    //// Star 8 Drawing
    UIBezierPath* star8Path = [UIBezierPath bezierPath];
    [star8Path moveToPoint: CGPointMake(26, 83.5)];
    [star8Path addLineToPoint: CGPointMake(29.17, 88.13)];
    [star8Path addLineToPoint: CGPointMake(34.56, 89.72)];
    [star8Path addLineToPoint: CGPointMake(31.14, 94.17)];
    [star8Path addLineToPoint: CGPointMake(31.29, 99.78)];
    [star8Path addLineToPoint: CGPointMake(26, 97.9)];
    [star8Path addLineToPoint: CGPointMake(20.71, 99.78)];
    [star8Path addLineToPoint: CGPointMake(20.86, 94.17)];
    [star8Path addLineToPoint: CGPointMake(17.44, 89.72)];
    [star8Path addLineToPoint: CGPointMake(22.83, 88.13)];
    [star8Path closePath];
    [color11 setFill];
    [star8Path fill];
    [shadow2Color setStroke];
    star8Path.lineWidth = 1;
    [star8Path stroke];


    //// Star 9 Drawing
    UIBezierPath* star9Path = [UIBezierPath bezierPath];
    [star9Path moveToPoint: CGPointMake(111, 65)];
    [star9Path addLineToPoint: CGPointMake(113.47, 68.6)];
    [star9Path addLineToPoint: CGPointMake(117.66, 69.84)];
    [star9Path addLineToPoint: CGPointMake(114.99, 73.3)];
    [star9Path addLineToPoint: CGPointMake(115.11, 77.66)];
    [star9Path addLineToPoint: CGPointMake(111, 76.2)];
    [star9Path addLineToPoint: CGPointMake(106.89, 77.66)];
    [star9Path addLineToPoint: CGPointMake(107.01, 73.3)];
    [star9Path addLineToPoint: CGPointMake(104.34, 69.84)];
    [star9Path addLineToPoint: CGPointMake(108.53, 68.6)];
    [star9Path closePath];
    [color11 setFill];
    [star9Path fill];
    [shadow2Color setStroke];
    star9Path.lineWidth = 1;
    [star9Path stroke];


    //// Star 10 Drawing
    UIBezierPath* star10Path = [UIBezierPath bezierPath];
    [star10Path moveToPoint: CGPointMake(79.5, 79)];
    [star10Path addLineToPoint: CGPointMake(81.62, 82.09)];
    [star10Path addLineToPoint: CGPointMake(85.21, 83.15)];
    [star10Path addLineToPoint: CGPointMake(82.92, 86.11)];
    [star10Path addLineToPoint: CGPointMake(83.03, 89.85)];
    [star10Path addLineToPoint: CGPointMake(79.5, 88.6)];
    [star10Path addLineToPoint: CGPointMake(75.97, 89.85)];
    [star10Path addLineToPoint: CGPointMake(76.08, 86.11)];
    [star10Path addLineToPoint: CGPointMake(73.79, 83.15)];
    [star10Path addLineToPoint: CGPointMake(77.38, 82.09)];
    [star10Path closePath];
    [color11 setFill];
    [star10Path fill];
    [shadow2Color setStroke];
    star10Path.lineWidth = 1;
    [star10Path stroke];


    //// Star 11 Drawing
    UIBezierPath* star11Path = [UIBezierPath bezierPath];
    [star11Path moveToPoint: CGPointMake(97.5, 66.5)];
    [star11Path addLineToPoint: CGPointMake(98.56, 68.04)];
    [star11Path addLineToPoint: CGPointMake(100.35, 68.57)];
    [star11Path addLineToPoint: CGPointMake(99.21, 70.06)];
    [star11Path addLineToPoint: CGPointMake(99.26, 71.93)];
    [star11Path addLineToPoint: CGPointMake(97.5, 71.3)];
    [star11Path addLineToPoint: CGPointMake(95.74, 71.93)];
    [star11Path addLineToPoint: CGPointMake(95.79, 70.06)];
    [star11Path addLineToPoint: CGPointMake(94.65, 68.57)];
    [star11Path addLineToPoint: CGPointMake(96.44, 68.04)];
    [star11Path closePath];
    [color11 setFill];
    [star11Path fill];
    [shadow2Color setStroke];
    star11Path.lineWidth = 1;
    [star11Path stroke];


    //// Star 12 Drawing
    UIBezierPath* star12Path = [UIBezierPath bezierPath];
    [star12Path moveToPoint: CGPointMake(164.5, 78.5)];
    [star12Path addLineToPoint: CGPointMake(168.38, 84.16)];
    [star12Path addLineToPoint: CGPointMake(174.96, 86.1)];
    [star12Path addLineToPoint: CGPointMake(170.78, 91.54)];
    [star12Path addLineToPoint: CGPointMake(170.97, 98.4)];
    [star12Path addLineToPoint: CGPointMake(164.5, 96.1)];
    [star12Path addLineToPoint: CGPointMake(158.03, 98.4)];
    [star12Path addLineToPoint: CGPointMake(158.22, 91.54)];
    [star12Path addLineToPoint: CGPointMake(154.04, 86.1)];
    [star12Path addLineToPoint: CGPointMake(160.62, 84.16)];
    [star12Path closePath];
    [color11 setFill];
    [star12Path fill];
    [shadow2Color setStroke];
    star12Path.lineWidth = 1;
    [star12Path stroke];


    //// Star 13 Drawing
    UIBezierPath* star13Path = [UIBezierPath bezierPath];
    [star13Path moveToPoint: CGPointMake(215, 22)];
    [star13Path addLineToPoint: CGPointMake(219.23, 28.18)];
    [star13Path addLineToPoint: CGPointMake(226.41, 30.29)];
    [star13Path addLineToPoint: CGPointMake(221.85, 36.22)];
    [star13Path addLineToPoint: CGPointMake(222.05, 43.71)];
    [star13Path addLineToPoint: CGPointMake(215, 41.2)];
    [star13Path addLineToPoint: CGPointMake(207.95, 43.71)];
    [star13Path addLineToPoint: CGPointMake(208.15, 36.22)];
    [star13Path addLineToPoint: CGPointMake(203.59, 30.29)];
    [star13Path addLineToPoint: CGPointMake(210.77, 28.18)];
    [star13Path closePath];
    [color11 setFill];
    [star13Path fill];
    [shadow2Color setStroke];
    star13Path.lineWidth = 1;
    [star13Path stroke];


    //// Star 14 Drawing
    UIBezierPath* star14Path = [UIBezierPath bezierPath];
    [star14Path moveToPoint: CGPointMake(88.5, 72.5)];
    [star14Path addLineToPoint: CGPointMake(89.56, 74.04)];
    [star14Path addLineToPoint: CGPointMake(91.35, 74.57)];
    [star14Path addLineToPoint: CGPointMake(90.21, 76.06)];
    [star14Path addLineToPoint: CGPointMake(90.26, 77.93)];
    [star14Path addLineToPoint: CGPointMake(88.5, 77.3)];
    [star14Path addLineToPoint: CGPointMake(86.74, 77.93)];
    [star14Path addLineToPoint: CGPointMake(86.79, 76.06)];
    [star14Path addLineToPoint: CGPointMake(85.65, 74.57)];
    [star14Path addLineToPoint: CGPointMake(87.44, 74.04)];
    [star14Path closePath];
    [color11 setFill];
    [star14Path fill];
    [shadow2Color setStroke];
    star14Path.lineWidth = 1;
    [star14Path stroke];


    //// Star 15 Drawing
    UIBezierPath* star15Path = [UIBezierPath bezierPath];
    [star15Path moveToPoint: CGPointMake(152, 29)];
    [star15Path addLineToPoint: CGPointMake(153.76, 31.57)];
    [star15Path addLineToPoint: CGPointMake(156.76, 32.45)];
    [star15Path addLineToPoint: CGPointMake(154.85, 34.93)];
    [star15Path addLineToPoint: CGPointMake(154.94, 38.05)];
    [star15Path addLineToPoint: CGPointMake(152, 37)];
    [star15Path addLineToPoint: CGPointMake(149.06, 38.05)];
    [star15Path addLineToPoint: CGPointMake(149.15, 34.93)];
    [star15Path addLineToPoint: CGPointMake(147.24, 32.45)];
    [star15Path addLineToPoint: CGPointMake(150.24, 31.57)];
    [star15Path closePath];
    [color11 setFill];
    [star15Path fill];
    [shadow2Color setStroke];
    star15Path.lineWidth = 1;
    [star15Path stroke];


    //// Star 16 Drawing
    UIBezierPath* star16Path = [UIBezierPath bezierPath];
    [star16Path moveToPoint: CGPointMake(111, 113)];
    [star16Path addLineToPoint: CGPointMake(114.17, 117.63)];
    [star16Path addLineToPoint: CGPointMake(119.56, 119.22)];
    [star16Path addLineToPoint: CGPointMake(116.14, 123.67)];
    [star16Path addLineToPoint: CGPointMake(116.29, 129.28)];
    [star16Path addLineToPoint: CGPointMake(111, 127.4)];
    [star16Path addLineToPoint: CGPointMake(105.71, 129.28)];
    [star16Path addLineToPoint: CGPointMake(105.86, 123.67)];
    [star16Path addLineToPoint: CGPointMake(102.44, 119.22)];
    [star16Path addLineToPoint: CGPointMake(107.83, 117.63)];
    [star16Path closePath];
    [color11 setFill];
    [star16Path fill];
    [shadow2Color setStroke];
    star16Path.lineWidth = 1;
    [star16Path stroke];


    //// Star 17 Drawing
    UIBezierPath* star17Path = [UIBezierPath bezierPath];
    [star17Path moveToPoint: CGPointMake(23.5, 20.5)];
    [star17Path addLineToPoint: CGPointMake(26.67, 25.13)];
    [star17Path addLineToPoint: CGPointMake(32.06, 26.72)];
    [star17Path addLineToPoint: CGPointMake(28.64, 31.17)];
    [star17Path addLineToPoint: CGPointMake(28.79, 36.78)];
    [star17Path addLineToPoint: CGPointMake(23.5, 34.9)];
    [star17Path addLineToPoint: CGPointMake(18.21, 36.78)];
    [star17Path addLineToPoint: CGPointMake(18.36, 31.17)];
    [star17Path addLineToPoint: CGPointMake(14.94, 26.72)];
    [star17Path addLineToPoint: CGPointMake(20.33, 25.13)];
    [star17Path closePath];
    [color11 setFill];
    [star17Path fill];
    [shadow2Color setStroke];
    star17Path.lineWidth = 1;
    [star17Path stroke];


    //// Star 18 Drawing
    UIBezierPath* star18Path = [UIBezierPath bezierPath];
    [star18Path moveToPoint: CGPointMake(190.5, 147.5)];
    [star18Path addLineToPoint: CGPointMake(194.38, 153.16)];
    [star18Path addLineToPoint: CGPointMake(200.96, 155.1)];
    [star18Path addLineToPoint: CGPointMake(196.78, 160.54)];
    [star18Path addLineToPoint: CGPointMake(196.97, 167.4)];
    [star18Path addLineToPoint: CGPointMake(190.5, 165.1)];
    [star18Path addLineToPoint: CGPointMake(184.03, 167.4)];
    [star18Path addLineToPoint: CGPointMake(184.22, 160.54)];
    [star18Path addLineToPoint: CGPointMake(180.04, 155.1)];
    [star18Path addLineToPoint: CGPointMake(186.62, 153.16)];
    [star18Path closePath];
    [color11 setFill];
    [star18Path fill];
    [shadow2Color setStroke];
    star18Path.lineWidth = 1;
    [star18Path stroke];


    //// Star 19 Drawing
    UIBezierPath* star19Path = [UIBezierPath bezierPath];
    [star19Path moveToPoint: CGPointMake(115, 30)];
    [star19Path addLineToPoint: CGPointMake(117.82, 34.12)];
    [star19Path addLineToPoint: CGPointMake(122.61, 35.53)];
    [star19Path addLineToPoint: CGPointMake(119.57, 39.48)];
    [star19Path addLineToPoint: CGPointMake(119.7, 44.47)];
    [star19Path addLineToPoint: CGPointMake(115, 42.8)];
    [star19Path addLineToPoint: CGPointMake(110.3, 44.47)];
    [star19Path addLineToPoint: CGPointMake(110.43, 39.48)];
    [star19Path addLineToPoint: CGPointMake(107.39, 35.53)];
    [star19Path addLineToPoint: CGPointMake(112.18, 34.12)];
    [star19Path closePath];
    [color11 setFill];
    [star19Path fill];
    [shadow2Color setStroke];
    star19Path.lineWidth = 1;
    [star19Path stroke];


    //// Star 20 Drawing
    UIBezierPath* star20Path = [UIBezierPath bezierPath];
    [star20Path moveToPoint: CGPointMake(74.5, 23.5)];
    [star20Path addLineToPoint: CGPointMake(77.32, 27.62)];
    [star20Path addLineToPoint: CGPointMake(82.11, 29.03)];
    [star20Path addLineToPoint: CGPointMake(79.07, 32.98)];
    [star20Path addLineToPoint: CGPointMake(79.2, 37.97)];
    [star20Path addLineToPoint: CGPointMake(74.5, 36.3)];
    [star20Path addLineToPoint: CGPointMake(69.8, 37.97)];
    [star20Path addLineToPoint: CGPointMake(69.93, 32.98)];
    [star20Path addLineToPoint: CGPointMake(66.89, 29.03)];
    [star20Path addLineToPoint: CGPointMake(71.68, 27.62)];
    [star20Path closePath];
    [color11 setFill];
    [star20Path fill];
    [shadow2Color setStroke];
    star20Path.lineWidth = 1;
    [star20Path stroke];


    //// Star 22 Drawing
    UIBezierPath* star22Path = [UIBezierPath bezierPath];
    [star22Path moveToPoint: CGPointMake(56.5, 153.5)];
    [star22Path addLineToPoint: CGPointMake(61.08, 160.19)];
    [star22Path addLineToPoint: CGPointMake(68.86, 162.48)];
    [star22Path addLineToPoint: CGPointMake(63.92, 168.91)];
    [star22Path addLineToPoint: CGPointMake(64.14, 177.02)];
    [star22Path addLineToPoint: CGPointMake(56.5, 174.3)];
    [star22Path addLineToPoint: CGPointMake(48.86, 177.02)];
    [star22Path addLineToPoint: CGPointMake(49.08, 168.91)];
    [star22Path addLineToPoint: CGPointMake(44.14, 162.48)];
    [star22Path addLineToPoint: CGPointMake(51.92, 160.19)];
    [star22Path closePath];
    [color11 setFill];
    [star22Path fill];
    [shadow2Color setStroke];
    star22Path.lineWidth = 1;
    [star22Path stroke];


    //// Group 7
    {
    }
}

+ (void)drawCanvas24
{
    //// Color Declarations
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* shadow2Color = [UIColor colorWithRed: 1 green: 0.799 blue: 0.229 alpha: 1];

    //// Group 12
    {
        //// Star 2 Drawing
        UIBezierPath* star2Path = [UIBezierPath bezierPath];
        [star2Path moveToPoint: CGPointMake(147.5, 29.5)];
        [star2Path addLineToPoint: CGPointMake(148.56, 31.04)];
        [star2Path addLineToPoint: CGPointMake(150.35, 31.57)];
        [star2Path addLineToPoint: CGPointMake(149.21, 33.06)];
        [star2Path addLineToPoint: CGPointMake(149.26, 34.93)];
        [star2Path addLineToPoint: CGPointMake(147.5, 34.3)];
        [star2Path addLineToPoint: CGPointMake(145.74, 34.93)];
        [star2Path addLineToPoint: CGPointMake(145.79, 33.06)];
        [star2Path addLineToPoint: CGPointMake(144.65, 31.57)];
        [star2Path addLineToPoint: CGPointMake(146.44, 31.04)];
        [star2Path closePath];
        [color11 setFill];
        [star2Path fill];
        [shadow2Color setStroke];
        star2Path.lineWidth = 1;
        [star2Path stroke];


        //// Star 4 Drawing
        UIBezierPath* star4Path = [UIBezierPath bezierPath];
        [star4Path moveToPoint: CGPointMake(129.5, 42)];
        [star4Path addLineToPoint: CGPointMake(131.62, 45.09)];
        [star4Path addLineToPoint: CGPointMake(135.21, 46.15)];
        [star4Path addLineToPoint: CGPointMake(132.92, 49.11)];
        [star4Path addLineToPoint: CGPointMake(133.03, 52.85)];
        [star4Path addLineToPoint: CGPointMake(129.5, 51.6)];
        [star4Path addLineToPoint: CGPointMake(125.97, 52.85)];
        [star4Path addLineToPoint: CGPointMake(126.08, 49.11)];
        [star4Path addLineToPoint: CGPointMake(123.79, 46.15)];
        [star4Path addLineToPoint: CGPointMake(127.38, 45.09)];
        [star4Path closePath];
        [color11 setFill];
        [star4Path fill];
        [shadow2Color setStroke];
        star4Path.lineWidth = 1;
        [star4Path stroke];


        //// Star 5 Drawing
        UIBezierPath* star5Path = [UIBezierPath bezierPath];
        [star5Path moveToPoint: CGPointMake(161, 69)];
        [star5Path addLineToPoint: CGPointMake(164.17, 73.63)];
        [star5Path addLineToPoint: CGPointMake(169.56, 75.22)];
        [star5Path addLineToPoint: CGPointMake(166.14, 79.67)];
        [star5Path addLineToPoint: CGPointMake(166.29, 85.28)];
        [star5Path addLineToPoint: CGPointMake(161, 83.4)];
        [star5Path addLineToPoint: CGPointMake(155.71, 85.28)];
        [star5Path addLineToPoint: CGPointMake(155.86, 79.67)];
        [star5Path addLineToPoint: CGPointMake(152.44, 75.22)];
        [star5Path addLineToPoint: CGPointMake(157.83, 73.63)];
        [star5Path closePath];
        [color11 setFill];
        [star5Path fill];
        [shadow2Color setStroke];
        star5Path.lineWidth = 1;
        [star5Path stroke];


        //// Star 6 Drawing
        UIBezierPath* star6Path = [UIBezierPath bezierPath];
        [star6Path moveToPoint: CGPointMake(161, 28)];
        [star6Path addLineToPoint: CGPointMake(163.47, 31.6)];
        [star6Path addLineToPoint: CGPointMake(167.66, 32.84)];
        [star6Path addLineToPoint: CGPointMake(164.99, 36.3)];
        [star6Path addLineToPoint: CGPointMake(165.11, 40.66)];
        [star6Path addLineToPoint: CGPointMake(161, 39.2)];
        [star6Path addLineToPoint: CGPointMake(156.89, 40.66)];
        [star6Path addLineToPoint: CGPointMake(157.01, 36.3)];
        [star6Path addLineToPoint: CGPointMake(154.34, 32.84)];
        [star6Path addLineToPoint: CGPointMake(158.53, 31.6)];
        [star6Path closePath];
        [color11 setFill];
        [star6Path fill];
        [shadow2Color setStroke];
        star6Path.lineWidth = 1;
        [star6Path stroke];


        //// Star 31 Drawing
        UIBezierPath* star31Path = [UIBezierPath bezierPath];
        [star31Path moveToPoint: CGPointMake(138.5, 35.5)];
        [star31Path addLineToPoint: CGPointMake(139.56, 37.04)];
        [star31Path addLineToPoint: CGPointMake(141.35, 37.57)];
        [star31Path addLineToPoint: CGPointMake(140.21, 39.06)];
        [star31Path addLineToPoint: CGPointMake(140.26, 40.93)];
        [star31Path addLineToPoint: CGPointMake(138.5, 40.3)];
        [star31Path addLineToPoint: CGPointMake(136.74, 40.93)];
        [star31Path addLineToPoint: CGPointMake(136.79, 39.06)];
        [star31Path addLineToPoint: CGPointMake(135.65, 37.57)];
        [star31Path addLineToPoint: CGPointMake(137.44, 37.04)];
        [star31Path closePath];
        [color11 setFill];
        [star31Path fill];
        [shadow2Color setStroke];
        star31Path.lineWidth = 1;
        [star31Path stroke];


        //// Star 9 Drawing
        UIBezierPath* star9Path = [UIBezierPath bezierPath];
        [star9Path moveToPoint: CGPointMake(198.5, 135)];
        [star9Path addLineToPoint: CGPointMake(200.62, 138.09)];
        [star9Path addLineToPoint: CGPointMake(204.21, 139.15)];
        [star9Path addLineToPoint: CGPointMake(201.92, 142.11)];
        [star9Path addLineToPoint: CGPointMake(202.03, 145.85)];
        [star9Path addLineToPoint: CGPointMake(198.5, 144.6)];
        [star9Path addLineToPoint: CGPointMake(194.97, 145.85)];
        [star9Path addLineToPoint: CGPointMake(195.08, 142.11)];
        [star9Path addLineToPoint: CGPointMake(192.79, 139.15)];
        [star9Path addLineToPoint: CGPointMake(196.38, 138.09)];
        [star9Path closePath];
        [color11 setFill];
        [star9Path fill];
        [shadow2Color setStroke];
        star9Path.lineWidth = 1;
        [star9Path stroke];
    }


    //// Group 15
    {
        //// Star Drawing
        UIBezierPath* starPath = [UIBezierPath bezierPath];
        [starPath moveToPoint: CGPointMake(17, 70.5)];
        [starPath addLineToPoint: CGPointMake(20.17, 75.13)];
        [starPath addLineToPoint: CGPointMake(25.56, 76.72)];
        [starPath addLineToPoint: CGPointMake(22.14, 81.17)];
        [starPath addLineToPoint: CGPointMake(22.29, 86.78)];
        [starPath addLineToPoint: CGPointMake(17, 84.9)];
        [starPath addLineToPoint: CGPointMake(11.71, 86.78)];
        [starPath addLineToPoint: CGPointMake(11.86, 81.17)];
        [starPath addLineToPoint: CGPointMake(8.44, 76.72)];
        [starPath addLineToPoint: CGPointMake(13.83, 75.13)];
        [starPath closePath];
        [color11 setFill];
        [starPath fill];
        [shadow2Color setStroke];
        starPath.lineWidth = 1;
        [starPath stroke];


        //// Star 3 Drawing
        UIBezierPath* star3Path = [UIBezierPath bezierPath];
        [star3Path moveToPoint: CGPointMake(98.5, 112.5)];
        [star3Path addLineToPoint: CGPointMake(102.73, 118.68)];
        [star3Path addLineToPoint: CGPointMake(109.91, 120.79)];
        [star3Path addLineToPoint: CGPointMake(105.35, 126.72)];
        [star3Path addLineToPoint: CGPointMake(105.55, 134.21)];
        [star3Path addLineToPoint: CGPointMake(98.5, 131.7)];
        [star3Path addLineToPoint: CGPointMake(91.45, 134.21)];
        [star3Path addLineToPoint: CGPointMake(91.65, 126.72)];
        [star3Path addLineToPoint: CGPointMake(87.09, 120.79)];
        [star3Path addLineToPoint: CGPointMake(94.27, 118.68)];
        [star3Path closePath];
        [color11 setFill];
        [star3Path fill];
        [shadow2Color setStroke];
        star3Path.lineWidth = 1;
        [star3Path stroke];


        //// Star 32 Drawing
        UIBezierPath* star32Path = [UIBezierPath bezierPath];
        [star32Path moveToPoint: CGPointMake(22.5, 14.5)];
        [star32Path addLineToPoint: CGPointMake(25.67, 19.13)];
        [star32Path addLineToPoint: CGPointMake(31.06, 20.72)];
        [star32Path addLineToPoint: CGPointMake(27.64, 25.17)];
        [star32Path addLineToPoint: CGPointMake(27.79, 30.78)];
        [star32Path addLineToPoint: CGPointMake(22.5, 28.9)];
        [star32Path addLineToPoint: CGPointMake(17.21, 30.78)];
        [star32Path addLineToPoint: CGPointMake(17.36, 25.17)];
        [star32Path addLineToPoint: CGPointMake(13.94, 20.72)];
        [star32Path addLineToPoint: CGPointMake(19.33, 19.13)];
        [star32Path closePath];
        [color11 setFill];
        [star32Path fill];
        [shadow2Color setStroke];
        star32Path.lineWidth = 1;
        [star32Path stroke];
    }


    //// Star 28 Drawing
    UIBezierPath* star28Path = [UIBezierPath bezierPath];
    [star28Path moveToPoint: CGPointMake(390.5, 92.5)];
    [star28Path addLineToPoint: CGPointMake(386.62, 98.16)];
    [star28Path addLineToPoint: CGPointMake(380.04, 100.1)];
    [star28Path addLineToPoint: CGPointMake(384.22, 105.54)];
    [star28Path addLineToPoint: CGPointMake(384.03, 112.4)];
    [star28Path addLineToPoint: CGPointMake(390.5, 110.1)];
    [star28Path addLineToPoint: CGPointMake(396.97, 112.4)];
    [star28Path addLineToPoint: CGPointMake(396.78, 105.54)];
    [star28Path addLineToPoint: CGPointMake(400.96, 100.1)];
    [star28Path addLineToPoint: CGPointMake(394.38, 98.16)];
    [star28Path closePath];
    [color11 setFill];
    [star28Path fill];
    [shadow2Color setStroke];
    star28Path.lineWidth = 1;
    [star28Path stroke];


    //// Star 29 Drawing
    UIBezierPath* star29Path = [UIBezierPath bezierPath];
    [star29Path moveToPoint: CGPointMake(403, 34)];
    [star29Path addLineToPoint: CGPointMake(401.24, 36.57)];
    [star29Path addLineToPoint: CGPointMake(398.24, 37.45)];
    [star29Path addLineToPoint: CGPointMake(400.15, 39.93)];
    [star29Path addLineToPoint: CGPointMake(400.06, 43.05)];
    [star29Path addLineToPoint: CGPointMake(403, 42)];
    [star29Path addLineToPoint: CGPointMake(405.94, 43.05)];
    [star29Path addLineToPoint: CGPointMake(405.85, 39.93)];
    [star29Path addLineToPoint: CGPointMake(407.76, 37.45)];
    [star29Path addLineToPoint: CGPointMake(404.76, 36.57)];
    [star29Path closePath];
    [color11 setFill];
    [star29Path fill];
    [shadow2Color setStroke];
    star29Path.lineWidth = 1;
    [star29Path stroke];


    //// Star 33 Drawing
    UIBezierPath* star33Path = [UIBezierPath bezierPath];
    [star33Path moveToPoint: CGPointMake(352, 17)];
    [star33Path addLineToPoint: CGPointMake(348.83, 21.63)];
    [star33Path addLineToPoint: CGPointMake(343.44, 23.22)];
    [star33Path addLineToPoint: CGPointMake(346.86, 27.67)];
    [star33Path addLineToPoint: CGPointMake(346.71, 33.28)];
    [star33Path addLineToPoint: CGPointMake(352, 31.4)];
    [star33Path addLineToPoint: CGPointMake(357.29, 33.28)];
    [star33Path addLineToPoint: CGPointMake(357.14, 27.67)];
    [star33Path addLineToPoint: CGPointMake(360.56, 23.22)];
    [star33Path addLineToPoint: CGPointMake(355.17, 21.63)];
    [star33Path closePath];
    [color11 setFill];
    [star33Path fill];
    [shadow2Color setStroke];
    star33Path.lineWidth = 1;
    [star33Path stroke];


    //// Star 8 Drawing
    UIBezierPath* star8Path = [UIBezierPath bezierPath];
    [star8Path moveToPoint: CGPointMake(254.5, 11.5)];
    [star8Path addLineToPoint: CGPointMake(251.33, 16.13)];
    [star8Path addLineToPoint: CGPointMake(245.94, 17.72)];
    [star8Path addLineToPoint: CGPointMake(249.36, 22.17)];
    [star8Path addLineToPoint: CGPointMake(249.21, 27.78)];
    [star8Path addLineToPoint: CGPointMake(254.5, 25.9)];
    [star8Path addLineToPoint: CGPointMake(259.79, 27.78)];
    [star8Path addLineToPoint: CGPointMake(259.64, 22.17)];
    [star8Path addLineToPoint: CGPointMake(263.06, 17.72)];
    [star8Path addLineToPoint: CGPointMake(257.67, 16.13)];
    [star8Path closePath];
    [color11 setFill];
    [star8Path fill];
    [shadow2Color setStroke];
    star8Path.lineWidth = 1;
    [star8Path stroke];


    //// Star 7 Drawing
    UIBezierPath* star7Path = [UIBezierPath bezierPath];
    [star7Path moveToPoint: CGPointMake(300, 67.5)];
    [star7Path addLineToPoint: CGPointMake(298.24, 70.07)];
    [star7Path addLineToPoint: CGPointMake(295.24, 70.95)];
    [star7Path addLineToPoint: CGPointMake(297.15, 73.43)];
    [star7Path addLineToPoint: CGPointMake(297.06, 76.55)];
    [star7Path addLineToPoint: CGPointMake(300, 75.5)];
    [star7Path addLineToPoint: CGPointMake(302.94, 76.55)];
    [star7Path addLineToPoint: CGPointMake(302.85, 73.43)];
    [star7Path addLineToPoint: CGPointMake(304.76, 70.95)];
    [star7Path addLineToPoint: CGPointMake(301.76, 70.07)];
    [star7Path closePath];
    [color11 setFill];
    [star7Path fill];
    [shadow2Color setStroke];
    star7Path.lineWidth = 1;
    [star7Path stroke];
}

+ (void)drawCanvas25
{
    //// Color Declarations
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* shadow2Color = [UIColor colorWithRed: 1 green: 0.799 blue: 0.229 alpha: 1];

    //// Group 15
    {
        //// Star 7 Drawing
        UIBezierPath* star7Path = [UIBezierPath bezierPath];
        [star7Path moveToPoint: CGPointMake(86.5, 24.5)];
        [star7Path addLineToPoint: CGPointMake(87.56, 26.04)];
        [star7Path addLineToPoint: CGPointMake(89.35, 26.57)];
        [star7Path addLineToPoint: CGPointMake(88.21, 28.06)];
        [star7Path addLineToPoint: CGPointMake(88.26, 29.93)];
        [star7Path addLineToPoint: CGPointMake(86.5, 29.3)];
        [star7Path addLineToPoint: CGPointMake(84.74, 29.93)];
        [star7Path addLineToPoint: CGPointMake(84.79, 28.06)];
        [star7Path addLineToPoint: CGPointMake(83.65, 26.57)];
        [star7Path addLineToPoint: CGPointMake(85.44, 26.04)];
        [star7Path closePath];
        [color11 setFill];
        [star7Path fill];
        [shadow2Color setStroke];
        star7Path.lineWidth = 1;
        [star7Path stroke];


        //// Star 9 Drawing
        UIBezierPath* star9Path = [UIBezierPath bezierPath];
        [star9Path moveToPoint: CGPointMake(22.5, 16)];
        [star9Path addLineToPoint: CGPointMake(24.62, 19.09)];
        [star9Path addLineToPoint: CGPointMake(28.21, 20.15)];
        [star9Path addLineToPoint: CGPointMake(25.92, 23.11)];
        [star9Path addLineToPoint: CGPointMake(26.03, 26.85)];
        [star9Path addLineToPoint: CGPointMake(22.5, 25.6)];
        [star9Path addLineToPoint: CGPointMake(18.97, 26.85)];
        [star9Path addLineToPoint: CGPointMake(19.08, 23.11)];
        [star9Path addLineToPoint: CGPointMake(16.79, 20.15)];
        [star9Path addLineToPoint: CGPointMake(20.38, 19.09)];
        [star9Path closePath];
        [color11 setFill];
        [star9Path fill];
        [shadow2Color setStroke];
        star9Path.lineWidth = 1;
        [star9Path stroke];


        //// Star 10 Drawing
        UIBezierPath* star10Path = [UIBezierPath bezierPath];
        [star10Path moveToPoint: CGPointMake(51, 105)];
        [star10Path addLineToPoint: CGPointMake(54.17, 109.63)];
        [star10Path addLineToPoint: CGPointMake(59.56, 111.22)];
        [star10Path addLineToPoint: CGPointMake(56.14, 115.67)];
        [star10Path addLineToPoint: CGPointMake(56.29, 121.28)];
        [star10Path addLineToPoint: CGPointMake(51, 119.4)];
        [star10Path addLineToPoint: CGPointMake(45.71, 121.28)];
        [star10Path addLineToPoint: CGPointMake(45.86, 115.67)];
        [star10Path addLineToPoint: CGPointMake(42.44, 111.22)];
        [star10Path addLineToPoint: CGPointMake(47.83, 109.63)];
        [star10Path closePath];
        [color11 setFill];
        [star10Path fill];
        [shadow2Color setStroke];
        star10Path.lineWidth = 1;
        [star10Path stroke];


        //// Star 11 Drawing
        UIBezierPath* star11Path = [UIBezierPath bezierPath];
        [star11Path moveToPoint: CGPointMake(111, 37)];
        [star11Path addLineToPoint: CGPointMake(113.47, 40.6)];
        [star11Path addLineToPoint: CGPointMake(117.66, 41.84)];
        [star11Path addLineToPoint: CGPointMake(114.99, 45.3)];
        [star11Path addLineToPoint: CGPointMake(115.11, 49.66)];
        [star11Path addLineToPoint: CGPointMake(111, 48.2)];
        [star11Path addLineToPoint: CGPointMake(106.89, 49.66)];
        [star11Path addLineToPoint: CGPointMake(107.01, 45.3)];
        [star11Path addLineToPoint: CGPointMake(104.34, 41.84)];
        [star11Path addLineToPoint: CGPointMake(108.53, 40.6)];
        [star11Path closePath];
        [color11 setFill];
        [star11Path fill];
        [shadow2Color setStroke];
        star11Path.lineWidth = 1;
        [star11Path stroke];


        //// Star 12 Drawing
        UIBezierPath* star12Path = [UIBezierPath bezierPath];
        [star12Path moveToPoint: CGPointMake(77.5, 30.5)];
        [star12Path addLineToPoint: CGPointMake(78.56, 32.04)];
        [star12Path addLineToPoint: CGPointMake(80.35, 32.57)];
        [star12Path addLineToPoint: CGPointMake(79.21, 34.06)];
        [star12Path addLineToPoint: CGPointMake(79.26, 35.93)];
        [star12Path addLineToPoint: CGPointMake(77.5, 35.3)];
        [star12Path addLineToPoint: CGPointMake(75.74, 35.93)];
        [star12Path addLineToPoint: CGPointMake(75.79, 34.06)];
        [star12Path addLineToPoint: CGPointMake(74.65, 32.57)];
        [star12Path addLineToPoint: CGPointMake(76.44, 32.04)];
        [star12Path closePath];
        [color11 setFill];
        [star12Path fill];
        [shadow2Color setStroke];
        star12Path.lineWidth = 1;
        [star12Path stroke];


        //// Star 2 Drawing
        UIBezierPath* star2Path = [UIBezierPath bezierPath];
        [star2Path moveToPoint: CGPointMake(149, 97.5)];
        [star2Path addLineToPoint: CGPointMake(150.06, 99.04)];
        [star2Path addLineToPoint: CGPointMake(151.85, 99.57)];
        [star2Path addLineToPoint: CGPointMake(150.71, 101.06)];
        [star2Path addLineToPoint: CGPointMake(150.76, 102.93)];
        [star2Path addLineToPoint: CGPointMake(149, 102.3)];
        [star2Path addLineToPoint: CGPointMake(147.24, 102.93)];
        [star2Path addLineToPoint: CGPointMake(147.29, 101.06)];
        [star2Path addLineToPoint: CGPointMake(146.15, 99.57)];
        [star2Path addLineToPoint: CGPointMake(147.94, 99.04)];
        [star2Path closePath];
        [color11 setFill];
        [star2Path fill];
        [shadow2Color setStroke];
        star2Path.lineWidth = 1;
        [star2Path stroke];
    }


    //// Group 16
    {
        //// Star 3 Drawing
        UIBezierPath* star3Path = [UIBezierPath bezierPath];
        [star3Path moveToPoint: CGPointMake(376.5, 106.5)];
        [star3Path addLineToPoint: CGPointMake(378.62, 103.41)];
        [star3Path addLineToPoint: CGPointMake(382.21, 102.35)];
        [star3Path addLineToPoint: CGPointMake(379.92, 99.39)];
        [star3Path addLineToPoint: CGPointMake(380.03, 95.65)];
        [star3Path addLineToPoint: CGPointMake(376.5, 96.9)];
        [star3Path addLineToPoint: CGPointMake(372.97, 95.65)];
        [star3Path addLineToPoint: CGPointMake(373.08, 99.39)];
        [star3Path addLineToPoint: CGPointMake(370.79, 102.35)];
        [star3Path addLineToPoint: CGPointMake(374.38, 103.41)];
        [star3Path closePath];
        [color11 setFill];
        [star3Path fill];
        [shadow2Color setStroke];
        star3Path.lineWidth = 1;
        [star3Path stroke];


        //// Star 5 Drawing
        UIBezierPath* star5Path = [UIBezierPath bezierPath];
        [star5Path moveToPoint: CGPointMake(401.5, 42.5)];
        [star5Path addLineToPoint: CGPointMake(403.97, 38.9)];
        [star5Path addLineToPoint: CGPointMake(408.16, 37.66)];
        [star5Path addLineToPoint: CGPointMake(405.49, 34.2)];
        [star5Path addLineToPoint: CGPointMake(405.61, 29.84)];
        [star5Path addLineToPoint: CGPointMake(401.5, 31.3)];
        [star5Path addLineToPoint: CGPointMake(397.39, 29.84)];
        [star5Path addLineToPoint: CGPointMake(397.51, 34.2)];
        [star5Path addLineToPoint: CGPointMake(394.84, 37.66)];
        [star5Path addLineToPoint: CGPointMake(399.03, 38.9)];
        [star5Path closePath];
        [color11 setFill];
        [star5Path fill];
        [shadow2Color setStroke];
        star5Path.lineWidth = 1;
        [star5Path stroke];
    }
}

+ (void)drawCanvas26
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* color2 = [UIColor colorWithRed: 0.733 green: 0.73 blue: 0.73 alpha: 1];
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* moonGradientColor = [UIColor colorWithRed: 1 green: 0.945 blue: 0.698 alpha: 1];
    UIColor* moonGradientColor2 = [UIColor colorWithRed: 0.538 green: 0.507 blue: 0.337 alpha: 1];
    UIColor* darkSideMoonGradientColor = [UIColor colorWithRed: 0.723 green: 0.715 blue: 0.715 alpha: 1];
    UIColor* darkSideMoonGradientColor2 = [UIColor colorWithRed: 0.189 green: 0.184 blue: 0.184 alpha: 1];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* innerMoonShadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Gradient Declarations
    CGFloat lightSideMoonGradientLocations[] = {0, 0.77, 1};
    CGGradientRef lightSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)moonGradientColor.CGColor, (id)[moonGradientColor blendedColorWithFraction: 0.5 ofColor: moonGradientColor2].CGColor, (id)moonGradientColor2.CGColor], lightSideMoonGradientLocations);
    CGFloat darkSideMoonGradientLocations[] = {0, 0.55, 1};
    CGGradientRef darkSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)darkSideMoonGradientColor.CGColor, (id)[darkSideMoonGradientColor blendedColorWithFraction: 0.5 ofColor: darkSideMoonGradientColor2].CGColor, (id)darkSideMoonGradientColor2.CGColor], darkSideMoonGradientLocations);

    //// Shadow Declarations
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];
    NSShadow* innerMoonLightSideShadow = [[NSShadow alloc] init];
    [innerMoonLightSideShadow setShadowColor: [innerMoonShadowColor colorWithAlphaComponent: CGColorGetAlpha(innerMoonShadowColor.CGColor) * 0.5]];
    [innerMoonLightSideShadow setShadowOffset: CGSizeMake(-1.1, -1.1)];
    [innerMoonLightSideShadow setShadowBlurRadius: 2];
    NSShadow* innerMoonDarksideShadow = [[NSShadow alloc] init];
    [innerMoonDarksideShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.43]];
    [innerMoonDarksideShadow setShadowOffset: CGSizeMake(-9.1, 1.1)];
    [innerMoonDarksideShadow setShadowBlurRadius: 10];

    //// Oval 201 Drawing
    UIBezierPath* oval201Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(215.5, 11.5, 133, 135)];
    CGContextSaveGState(context);
    [oval201Path addClip];
    CGContextDrawLinearGradient(context, darkSideMoonGradient, CGPointMake(282, 11.5), CGPointMake(282, 146.5), 0);
    CGContextRestoreGState(context);

    ////// Oval 201 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(oval201Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([innerMoonDarksideShadow.shadowColor CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [innerMoonDarksideShadow.shadowColor colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, innerMoonDarksideShadow.shadowOffset, innerMoonDarksideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [oval201Path fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [color setStroke];
    oval201Path.lineWidth = 1;
    [oval201Path stroke];


    //// Oval 54 Drawing
    UIBezierPath* oval54Path = [UIBezierPath bezierPath];
    [oval54Path moveToPoint: CGPointMake(264, 45.5)];
    [oval54Path addCurveToPoint: CGPointMake(260.15, 63.03) controlPoint1: CGPointMake(265.89, 48.43) controlPoint2: CGPointMake(262.33, 55.89)];
    [oval54Path addCurveToPoint: CGPointMake(264, 78.5) controlPoint1: CGPointMake(258.03, 69.97) controlPoint2: CGPointMake(258.39, 73.69)];
    [oval54Path addCurveToPoint: CGPointMake(256.5, 88.5) controlPoint1: CGPointMake(267.5, 81.5) controlPoint2: CGPointMake(257.64, 86.61)];
    [oval54Path addCurveToPoint: CGPointMake(252, 107.5) controlPoint1: CGPointMake(253.5, 93.5) controlPoint2: CGPointMake(252, 99.63)];
    [oval54Path addCurveToPoint: CGPointMake(282.5, 146.5) controlPoint1: CGPointMake(252, 144.78) controlPoint2: CGPointMake(319.78, 146.5)];
    [oval54Path addCurveToPoint: CGPointMake(215, 79) controlPoint1: CGPointMake(245.22, 146.5) controlPoint2: CGPointMake(215, 116.28)];
    [oval54Path addCurveToPoint: CGPointMake(282.5, 11.5) controlPoint1: CGPointMake(215, 41.72) controlPoint2: CGPointMake(245.22, 11.5)];
    [oval54Path addCurveToPoint: CGPointMake(264, 45.5) controlPoint1: CGPointMake(299.25, 11.5) controlPoint2: CGPointMake(257.54, 35.51)];
    [oval54Path closePath];
    CGContextSaveGState(context);
    [oval54Path addClip];
    CGContextDrawLinearGradient(context, lightSideMoonGradient, CGPointMake(254.35, 11.5), CGPointMake(254.35, 146.5), 0);
    CGContextRestoreGState(context);

    ////// Oval 54 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(oval54Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([innerMoonLightSideShadow.shadowColor CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [innerMoonLightSideShadow.shadowColor colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, innerMoonLightSideShadow.shadowOffset, innerMoonLightSideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [oval54Path fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [color setStroke];
    oval54Path.lineWidth = 1;
    [oval54Path stroke];


    //// Group 5
    {
        //// Oval 55 Drawing
        UIBezierPath* oval55Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(282, 52.5, 14, 20)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
        [UIColor.whiteColor setFill];
        [oval55Path fill];
        CGContextRestoreGState(context);

        [color setStroke];
        oval55Path.lineWidth = 1;
        [oval55Path stroke];


        //// Oval 56 Drawing
        UIBezierPath* oval56Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(269, 49.5, 13.5, 23)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
        [UIColor.whiteColor setFill];
        [oval56Path fill];
        CGContextRestoreGState(context);

        [color setStroke];
        oval56Path.lineWidth = 1;
        [oval56Path stroke];


        //// Oval 57 Drawing
        UIBezierPath* oval57Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(274.5, 67.5, 3.5, 4.5)];
        [UIColor.blackColor setFill];
        [oval57Path fill];
        [color setStroke];
        oval57Path.lineWidth = 1;
        [oval57Path stroke];


        //// Bezier 16 Drawing
        UIBezierPath* bezier16Path = [UIBezierPath bezierPath];
        [UIColor.blackColor setStroke];
        bezier16Path.lineWidth = 1;
        [bezier16Path stroke];


        //// Bezier 17 Drawing
        UIBezierPath* bezier17Path = [UIBezierPath bezierPath];
        [UIColor.darkGrayColor setFill];
        [bezier17Path fill];
        [color setStroke];
        bezier17Path.lineWidth = 1;
        [bezier17Path stroke];


        //// Oval 59 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 243.95, 54.99);
        CGContextRotateCTM(context, 11.2 * M_PI / 180);

        UIBezierPath* oval59Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-5.75, -4.02, 11.5, 8.04)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
        [UIColor.whiteColor setFill];
        [oval59Path fill];
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval59Path.lineWidth = 1;
        [oval59Path stroke];

        CGContextRestoreGState(context);


        //// Oval 63 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 257.06, 61.1);
        CGContextRotateCTM(context, 10.56 * M_PI / 180);

        UIBezierPath* oval63Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6.56, -6.24, 8.23, 6.85)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
        [UIColor.whiteColor setFill];
        [oval63Path fill];
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval63Path.lineWidth = 1;
        [oval63Path stroke];

        CGContextRestoreGState(context);


        //// Bezier 18 Drawing
        UIBezierPath* bezier18Path = [UIBezierPath bezierPath];
        [color11 setFill];
        [bezier18Path fill];
        [UIColor.darkGrayColor setStroke];
        bezier18Path.lineWidth = 1;
        [bezier18Path stroke];


        //// Bezier 19 Drawing
        UIBezierPath* bezier19Path = [UIBezierPath bezierPath];
        [UIColor.darkGrayColor setStroke];
        bezier19Path.lineWidth = 1;
        [bezier19Path stroke];


        //// Bezier 20 Drawing
        UIBezierPath* bezier20Path = [UIBezierPath bezierPath];
        [UIColor.darkGrayColor setStroke];
        bezier20Path.lineWidth = 1;
        [bezier20Path stroke];


        //// Oval 64 Drawing
        UIBezierPath* oval64Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(240, 54.5, 4, 4)];
        [color setFill];
        [oval64Path fill];


        //// Oval 66 Drawing
        UIBezierPath* oval66Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(252, 57, 3.5, 4)];
        [color setFill];
        [oval66Path fill];


        //// Oval 67 Drawing
        UIBezierPath* oval67Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(288.5, 67.5, 3.5, 4.5)];
        [UIColor.blackColor setFill];
        [oval67Path fill];
        [color setStroke];
        oval67Path.lineWidth = 1;
        [oval67Path stroke];


        //// Oval 133 Drawing
        UIBezierPath* oval133Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(240.5, 109.5, 9, 3.5)];
        [color2 setFill];
        [oval133Path fill];
        [color setStroke];
        oval133Path.lineWidth = 1;
        [oval133Path stroke];


        //// Oval 134 Drawing
        UIBezierPath* oval134Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(273, 106.5, 16, 6.5)];
        [color2 setFill];
        [oval134Path fill];
        [color setStroke];
        oval134Path.lineWidth = 1;
        [oval134Path stroke];
    }


    //// Cleanup
    CGGradientRelease(lightSideMoonGradient);
    CGGradientRelease(darkSideMoonGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas27
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* shadow2Color = [UIColor colorWithRed: 1 green: 0.799 blue: 0.229 alpha: 1];
    UIColor* color12 = [UIColor colorWithRed: 1 green: 0.331 blue: 0.331 alpha: 0.876];

    //// Shadow Declarations
    NSShadow* moonShadow = [[NSShadow alloc] init];
    [moonShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.63]];
    [moonShadow setShadowOffset: CGSizeMake(28.1, -14.1)];
    [moonShadow setShadowBlurRadius: 20];

    //// Group 14
    {
        //// Group 50
        {
            //// Star Drawing
            UIBezierPath* starPath = [UIBezierPath bezierPath];
            [starPath moveToPoint: CGPointMake(200, 30.5)];
            [starPath addLineToPoint: CGPointMake(204.94, 37.7)];
            [starPath addLineToPoint: CGPointMake(213.31, 40.17)];
            [starPath addLineToPoint: CGPointMake(207.99, 47.1)];
            [starPath addLineToPoint: CGPointMake(208.23, 55.83)];
            [starPath addLineToPoint: CGPointMake(200, 52.9)];
            [starPath addLineToPoint: CGPointMake(191.77, 55.83)];
            [starPath addLineToPoint: CGPointMake(192.01, 47.1)];
            [starPath addLineToPoint: CGPointMake(186.69, 40.17)];
            [starPath addLineToPoint: CGPointMake(195.06, 37.7)];
            [starPath closePath];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, moonShadow.shadowOffset, moonShadow.shadowBlurRadius, [moonShadow.shadowColor CGColor]);
            [color11 setFill];
            [starPath fill];
            CGContextRestoreGState(context);

            [shadow2Color setStroke];
            starPath.lineWidth = 1;
            [starPath stroke];


            //// Group 51
            {
                CGContextSaveGState(context);
                CGContextTranslateCTM(context, 207.85, 29.52);
                CGContextRotateCTM(context, 3.95 * M_PI / 180);



                //// Bezier 119 Drawing
                CGContextSaveGState(context);
                CGContextTranslateCTM(context, -2.57, -2.14);
                CGContextRotateCTM(context, -14.08 * M_PI / 180);

                UIBezierPath* bezier119Path = [UIBezierPath bezierPath];
                [bezier119Path moveToPoint: CGPointMake(1.06, -3.76)];
                [bezier119Path addCurveToPoint: CGPointMake(2.01, -3.72) controlPoint1: CGPointMake(-0.35, 0.67) controlPoint2: CGPointMake(2.21, -6.96)];
                [bezier119Path addCurveToPoint: CGPointMake(1.9, 14.28) controlPoint1: CGPointMake(1.68, 1.62) controlPoint2: CGPointMake(2.18, 12.25)];
                [bezier119Path addCurveToPoint: CGPointMake(0.12, 13.27) controlPoint1: CGPointMake(1.51, 17.18) controlPoint2: CGPointMake(0.12, 13.27)];
                [UIColor.blackColor setStroke];
                bezier119Path.lineWidth = 1;
                [bezier119Path stroke];

                CGContextRestoreGState(context);


                //// Oval 58 Drawing
                UIBezierPath* oval58Path = [UIBezierPath bezierPath];
                [oval58Path moveToPoint: CGPointMake(10.12, -2.14)];
                [oval58Path addCurveToPoint: CGPointMake(10.3, -2.14) controlPoint1: CGPointMake(10.12, -0.2) controlPoint2: CGPointMake(11.65, -1.7)];
                [oval58Path addCurveToPoint: CGPointMake(8.4, 0.83) controlPoint1: CGPointMake(9.55, -2.38) controlPoint2: CGPointMake(9.08, -0.23)];
                [oval58Path addCurveToPoint: CGPointMake(5.55, -2.14) controlPoint1: CGPointMake(7.6, 2.08) controlPoint2: CGPointMake(6.71, -1.77)];
                [oval58Path addCurveToPoint: CGPointMake(2.82, 0.83) controlPoint1: CGPointMake(4.74, -2.39) controlPoint2: CGPointMake(3.73, 1.14)];
                [oval58Path addCurveToPoint: CGPointMake(-1.11, -2.14) controlPoint1: CGPointMake(1.64, 0.43) controlPoint2: CGPointMake(0.22, -2.14)];
                [oval58Path addCurveToPoint: CGPointMake(-3.96, 0.83) controlPoint1: CGPointMake(-2.98, -2.14) controlPoint2: CGPointMake(-2.99, 2.18)];
                [oval58Path addCurveToPoint: CGPointMake(-6.81, -2.14) controlPoint1: CGPointMake(-4.69, -0.17) controlPoint2: CGPointMake(-5.55, -3.34)];
                [oval58Path addCurveToPoint: CGPointMake(-9.67, -0.16) controlPoint1: CGPointMake(-7.72, -1.27) controlPoint2: CGPointMake(-9.05, 1.76)];
                [oval58Path addCurveToPoint: CGPointMake(-13.85, -2.14) controlPoint1: CGPointMake(-11.57, -6.09) controlPoint2: CGPointMake(-13.85, 0.5)];
                [oval58Path addCurveToPoint: CGPointMake(-1.59, -11.52) controlPoint1: CGPointMake(-13.85, -8.41) controlPoint2: CGPointMake(-8.94, -11.52)];
                [oval58Path addCurveToPoint: CGPointMake(10.12, -2.14) controlPoint1: CGPointMake(5.77, -11.52) controlPoint2: CGPointMake(10.12, -8.41)];
                [oval58Path closePath];
                [color12 setFill];
                [oval58Path fill];
                [UIColor.blackColor setStroke];
                oval58Path.lineWidth = 1;
                [oval58Path stroke];


                //// Bezier 117 Drawing
                UIBezierPath* bezier117Path = [UIBezierPath bezierPath];
                [bezier117Path moveToPoint: CGPointMake(-2.57, -12.02)];
                [bezier117Path addCurveToPoint: CGPointMake(5.49, -2.4) controlPoint1: CGPointMake(6.65, -8.45) controlPoint2: CGPointMake(5.49, -2.4)];
                [UIColor.blackColor setStroke];
                bezier117Path.lineWidth = 1;
                [bezier117Path stroke];


                //// Bezier 118 Drawing
                UIBezierPath* bezier118Path = [UIBezierPath bezierPath];
                [bezier118Path moveToPoint: CGPointMake(-2.57, -11.03)];
                [bezier118Path addLineToPoint: CGPointMake(-2.57, -2.14)];
                [UIColor.blackColor setStroke];
                bezier118Path.lineWidth = 1;
                [bezier118Path stroke];


                //// Bezier 116 Drawing
                UIBezierPath* bezier116Path = [UIBezierPath bezierPath];
                [bezier116Path moveToPoint: CGPointMake(-2.57, -12.02)];
                [bezier116Path addCurveToPoint: CGPointMake(-9.4, -0.37) controlPoint1: CGPointMake(-9.69, -7.9) controlPoint2: CGPointMake(-9.4, -0.37)];
                [UIColor.blackColor setStroke];
                bezier116Path.lineWidth = 1;
                [bezier116Path stroke];



                CGContextRestoreGState(context);
            }


            //// Group 52
            {
                //// Bezier 120 Drawing
                UIBezierPath* bezier120Path = [UIBezierPath bezierPath];
                [UIColor.blackColor setStroke];
                bezier120Path.lineWidth = 1;
                [bezier120Path stroke];


                //// Oval 202 Drawing
                UIBezierPath* oval202Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(195, 38.5, 4, 6)];
                [UIColor.whiteColor setFill];
                [oval202Path fill];
                [color setStroke];
                oval202Path.lineWidth = 1;
                [oval202Path stroke];


                //// Oval 203 Drawing
                UIBezierPath* oval203Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(199.5, 38.5, 4, 6)];
                [UIColor.whiteColor setFill];
                [oval203Path fill];
                [color setStroke];
                oval203Path.lineWidth = 1;
                [oval203Path stroke];


                //// Oval 204 Drawing
                UIBezierPath* oval204Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(196, 41.5, 3, 3)];
                [UIColor.blackColor setFill];
                [oval204Path fill];
                [color setStroke];
                oval204Path.lineWidth = 1;
                [oval204Path stroke];


                //// Oval 205 Drawing
                UIBezierPath* oval205Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(200.5, 41.5, 3, 3)];
                [UIColor.blackColor setFill];
                [oval205Path fill];
                [color setStroke];
                oval205Path.lineWidth = 1;
                [oval205Path stroke];


                //// Bezier 121 Drawing
                UIBezierPath* bezier121Path = [UIBezierPath bezierPath];
                [bezier121Path moveToPoint: CGPointMake(195, 47.5)];
                [bezier121Path addCurveToPoint: CGPointMake(204, 47.5) controlPoint1: CGPointMake(201.23, 50.18) controlPoint2: CGPointMake(204, 47.5)];
                [bezier121Path addCurveToPoint: CGPointMake(198.46, 49.84) controlPoint1: CGPointMake(204, 47.5) controlPoint2: CGPointMake(201.92, 52.19)];
                [bezier121Path addCurveToPoint: CGPointMake(195, 47.5) controlPoint1: CGPointMake(195, 47.5) controlPoint2: CGPointMake(195, 47.5)];
                [UIColor.whiteColor setFill];
                [bezier121Path fill];
                [UIColor.blackColor setStroke];
                bezier121Path.lineWidth = 1;
                [bezier121Path stroke];
            }
        }
    }
}

+ (void)drawCanvas28
{
    //// Color Declarations
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* shadow2Color = [UIColor colorWithRed: 1 green: 0.799 blue: 0.229 alpha: 1];

    //// Star 4 Drawing
    UIBezierPath* star4Path = [UIBezierPath bezierPath];
    [star4Path moveToPoint: CGPointMake(36, 101)];
    [star4Path addLineToPoint: CGPointMake(38.47, 104.6)];
    [star4Path addLineToPoint: CGPointMake(42.66, 105.84)];
    [star4Path addLineToPoint: CGPointMake(39.99, 109.3)];
    [star4Path addLineToPoint: CGPointMake(40.11, 113.66)];
    [star4Path addLineToPoint: CGPointMake(36, 112.2)];
    [star4Path addLineToPoint: CGPointMake(31.89, 113.66)];
    [star4Path addLineToPoint: CGPointMake(32.01, 109.3)];
    [star4Path addLineToPoint: CGPointMake(29.34, 105.84)];
    [star4Path addLineToPoint: CGPointMake(33.53, 104.6)];
    [star4Path closePath];
    [color11 setFill];
    [star4Path fill];
    [shadow2Color setStroke];
    star4Path.lineWidth = 1;
    [star4Path stroke];


    //// Star Drawing
    UIBezierPath* starPath = [UIBezierPath bezierPath];
    [starPath moveToPoint: CGPointMake(88, 23.5)];
    [starPath addLineToPoint: CGPointMake(89.76, 26.07)];
    [starPath addLineToPoint: CGPointMake(92.76, 26.95)];
    [starPath addLineToPoint: CGPointMake(90.85, 29.43)];
    [starPath addLineToPoint: CGPointMake(90.94, 32.55)];
    [starPath addLineToPoint: CGPointMake(88, 31.5)];
    [starPath addLineToPoint: CGPointMake(85.06, 32.55)];
    [starPath addLineToPoint: CGPointMake(85.15, 29.43)];
    [starPath addLineToPoint: CGPointMake(83.24, 26.95)];
    [starPath addLineToPoint: CGPointMake(86.24, 26.07)];
    [starPath closePath];
    [color11 setFill];
    [starPath fill];
    [shadow2Color setStroke];
    starPath.lineWidth = 1;
    [starPath stroke];


    //// Star 2 Drawing
    UIBezierPath* star2Path = [UIBezierPath bezierPath];
    [star2Path moveToPoint: CGPointMake(369.5, 27.5)];
    [star2Path addLineToPoint: CGPointMake(370.91, 29.56)];
    [star2Path addLineToPoint: CGPointMake(373.3, 30.26)];
    [star2Path addLineToPoint: CGPointMake(371.78, 32.24)];
    [star2Path addLineToPoint: CGPointMake(371.85, 34.74)];
    [star2Path addLineToPoint: CGPointMake(369.5, 33.9)];
    [star2Path addLineToPoint: CGPointMake(367.15, 34.74)];
    [star2Path addLineToPoint: CGPointMake(367.22, 32.24)];
    [star2Path addLineToPoint: CGPointMake(365.7, 30.26)];
    [star2Path addLineToPoint: CGPointMake(368.09, 29.56)];
    [star2Path closePath];
    [color11 setFill];
    [star2Path fill];
    [shadow2Color setStroke];
    star2Path.lineWidth = 1;
    [star2Path stroke];


    //// Star 3 Drawing
    UIBezierPath* star3Path = [UIBezierPath bezierPath];
    [star3Path moveToPoint: CGPointMake(252.5, 86)];
    [star3Path addLineToPoint: CGPointMake(253.91, 88.06)];
    [star3Path addLineToPoint: CGPointMake(256.3, 88.76)];
    [star3Path addLineToPoint: CGPointMake(254.78, 90.74)];
    [star3Path addLineToPoint: CGPointMake(254.85, 93.24)];
    [star3Path addLineToPoint: CGPointMake(252.5, 92.4)];
    [star3Path addLineToPoint: CGPointMake(250.15, 93.24)];
    [star3Path addLineToPoint: CGPointMake(250.22, 90.74)];
    [star3Path addLineToPoint: CGPointMake(248.7, 88.76)];
    [star3Path addLineToPoint: CGPointMake(251.09, 88.06)];
    [star3Path closePath];
    [color11 setFill];
    [star3Path fill];
    [shadow2Color setStroke];
    star3Path.lineWidth = 1;
    [star3Path stroke];


    //// Star 5 Drawing
    UIBezierPath* star5Path = [UIBezierPath bezierPath];
    [star5Path moveToPoint: CGPointMake(386, 104)];
    [star5Path addLineToPoint: CGPointMake(387.41, 106.06)];
    [star5Path addLineToPoint: CGPointMake(389.8, 106.76)];
    [star5Path addLineToPoint: CGPointMake(388.28, 108.74)];
    [star5Path addLineToPoint: CGPointMake(388.35, 111.24)];
    [star5Path addLineToPoint: CGPointMake(386, 110.4)];
    [star5Path addLineToPoint: CGPointMake(383.65, 111.24)];
    [star5Path addLineToPoint: CGPointMake(383.72, 108.74)];
    [star5Path addLineToPoint: CGPointMake(382.2, 106.76)];
    [star5Path addLineToPoint: CGPointMake(384.59, 106.06)];
    [star5Path closePath];
    [color11 setFill];
    [star5Path fill];
    [shadow2Color setStroke];
    star5Path.lineWidth = 1;
    [star5Path stroke];
}

+ (void)drawCanvas29
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* moonGradientColor = [UIColor colorWithRed: 1 green: 0.945 blue: 0.698 alpha: 1];
    UIColor* moonGradientColor2 = [UIColor colorWithRed: 0.538 green: 0.507 blue: 0.337 alpha: 1];
    UIColor* darkSideMoonGradientColor = [UIColor colorWithRed: 0.723 green: 0.715 blue: 0.715 alpha: 1];
    UIColor* darkSideMoonGradientColor2 = [UIColor colorWithRed: 0.189 green: 0.184 blue: 0.184 alpha: 1];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* innerMoonShadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Gradient Declarations
    CGFloat lightSideMoonGradientLocations[] = {0, 0.77, 1};
    CGGradientRef lightSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)moonGradientColor.CGColor, (id)[moonGradientColor blendedColorWithFraction: 0.5 ofColor: moonGradientColor2].CGColor, (id)moonGradientColor2.CGColor], lightSideMoonGradientLocations);
    CGFloat darkSideMoonGradientLocations[] = {0, 0.55, 1};
    CGGradientRef darkSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)darkSideMoonGradientColor.CGColor, (id)[darkSideMoonGradientColor blendedColorWithFraction: 0.5 ofColor: darkSideMoonGradientColor2].CGColor, (id)darkSideMoonGradientColor2.CGColor], darkSideMoonGradientLocations);

    //// Shadow Declarations
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];
    NSShadow* innerMoonLightSideShadow = [[NSShadow alloc] init];
    [innerMoonLightSideShadow setShadowColor: [innerMoonShadowColor colorWithAlphaComponent: CGColorGetAlpha(innerMoonShadowColor.CGColor) * 0.5]];
    [innerMoonLightSideShadow setShadowOffset: CGSizeMake(-1.1, -1.1)];
    [innerMoonLightSideShadow setShadowBlurRadius: 2];
    NSShadow* innerMoonDarksideShadow = [[NSShadow alloc] init];
    [innerMoonDarksideShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.43]];
    [innerMoonDarksideShadow setShadowOffset: CGSizeMake(-9.1, 1.1)];
    [innerMoonDarksideShadow setShadowBlurRadius: 10];

    //// Group
    {
        //// Oval 54 Drawing
        UIBezierPath* oval54Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(214.5, 31.5, 133, 135)];
        CGContextSaveGState(context);
        [oval54Path addClip];
        CGContextDrawLinearGradient(context, darkSideMoonGradient, CGPointMake(281, 31.5), CGPointMake(281, 166.5), 0);
        CGContextRestoreGState(context);

        ////// Oval 54 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval54Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([innerMoonDarksideShadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [innerMoonDarksideShadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, innerMoonDarksideShadow.shadowOffset, innerMoonDarksideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval54Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color setStroke];
        oval54Path.lineWidth = 1;
        [oval54Path stroke];


        //// Group 49
        {
            //// Bezier 116 Drawing
            UIBezierPath* bezier116Path = [UIBezierPath bezierPath];
            [bezier116Path moveToPoint: CGPointMake(272.5, 124.01)];
            [bezier116Path addCurveToPoint: CGPointMake(277.72, 124.01) controlPoint1: CGPointMake(275.4, 122.64) controlPoint2: CGPointMake(277.72, 124.01)];
            bezier116Path.lineCapStyle = kCGLineCapRound;

            [UIColor.blackColor setStroke];
            bezier116Path.lineWidth = 2;
            [bezier116Path stroke];


            //// Bezier 117 Drawing
            UIBezierPath* bezier117Path = [UIBezierPath bezierPath];
            [bezier117Path moveToPoint: CGPointMake(277.72, 124.1)];
            [bezier117Path addCurveToPoint: CGPointMake(287.99, 122.55) controlPoint1: CGPointMake(282.69, 125.06) controlPoint2: CGPointMake(287.99, 122.55)];
            bezier117Path.lineCapStyle = kCGLineCapRound;

            [UIColor.blackColor setStroke];
            bezier117Path.lineWidth = 3;
            [bezier117Path stroke];


            //// Bezier 118 Drawing
            UIBezierPath* bezier118Path = [UIBezierPath bezierPath];
            [bezier118Path moveToPoint: CGPointMake(288.17, 122.72)];
            [bezier118Path addCurveToPoint: CGPointMake(296, 123.41) controlPoint1: CGPointMake(291.23, 121.35) controlPoint2: CGPointMake(296, 123.41)];
            bezier118Path.lineCapStyle = kCGLineCapRound;

            [UIColor.blackColor setStroke];
            bezier118Path.lineWidth = 4;
            [bezier118Path stroke];
        }


        //// Oval 201 Drawing
        UIBezierPath* oval201Path = [UIBezierPath bezierPath];
        [oval201Path moveToPoint: CGPointMake(263, 65.5)];
        [oval201Path addCurveToPoint: CGPointMake(259.15, 83.03) controlPoint1: CGPointMake(264.89, 68.43) controlPoint2: CGPointMake(261.33, 75.89)];
        [oval201Path addCurveToPoint: CGPointMake(263, 98.5) controlPoint1: CGPointMake(257.03, 89.97) controlPoint2: CGPointMake(257.39, 93.69)];
        [oval201Path addCurveToPoint: CGPointMake(255.5, 108.5) controlPoint1: CGPointMake(266.5, 101.5) controlPoint2: CGPointMake(256.64, 106.61)];
        [oval201Path addCurveToPoint: CGPointMake(251, 127.5) controlPoint1: CGPointMake(252.5, 113.5) controlPoint2: CGPointMake(251, 119.63)];
        [oval201Path addCurveToPoint: CGPointMake(281.5, 166.5) controlPoint1: CGPointMake(251, 164.78) controlPoint2: CGPointMake(318.78, 166.5)];
        [oval201Path addCurveToPoint: CGPointMake(214, 99) controlPoint1: CGPointMake(244.22, 166.5) controlPoint2: CGPointMake(214, 136.28)];
        [oval201Path addCurveToPoint: CGPointMake(281.5, 31.5) controlPoint1: CGPointMake(214, 61.72) controlPoint2: CGPointMake(244.22, 31.5)];
        [oval201Path addCurveToPoint: CGPointMake(263, 65.5) controlPoint1: CGPointMake(298.25, 31.5) controlPoint2: CGPointMake(256.54, 55.51)];
        [oval201Path closePath];
        CGContextSaveGState(context);
        [oval201Path addClip];
        CGContextDrawLinearGradient(context, lightSideMoonGradient, CGPointMake(253.35, 31.5), CGPointMake(253.35, 166.5), 0);
        CGContextRestoreGState(context);

        ////// Oval 201 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval201Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([innerMoonLightSideShadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [innerMoonLightSideShadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, innerMoonLightSideShadow.shadowOffset, innerMoonLightSideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval201Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color setStroke];
        oval201Path.lineWidth = 1;
        [oval201Path stroke];


        //// Group 5
        {
            //// Oval 55 Drawing
            UIBezierPath* oval55Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(282, 72.5, 14, 20)];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
            [UIColor.whiteColor setFill];
            [oval55Path fill];
            CGContextRestoreGState(context);

            [color setStroke];
            oval55Path.lineWidth = 1;
            [oval55Path stroke];


            //// Oval 56 Drawing
            UIBezierPath* oval56Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(269, 69.5, 13.5, 23)];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
            [UIColor.whiteColor setFill];
            [oval56Path fill];
            CGContextRestoreGState(context);

            [color setStroke];
            oval56Path.lineWidth = 1;
            [oval56Path stroke];


            //// Oval 57 Drawing
            UIBezierPath* oval57Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(272.5, 81.5, 7.5, 10)];
            [UIColor.blackColor setFill];
            [oval57Path fill];
            [color setStroke];
            oval57Path.lineWidth = 1;
            [oval57Path stroke];


            //// Bezier 16 Drawing
            UIBezierPath* bezier16Path = [UIBezierPath bezierPath];
            [UIColor.blackColor setStroke];
            bezier16Path.lineWidth = 1;
            [bezier16Path stroke];


            //// Bezier 17 Drawing
            UIBezierPath* bezier17Path = [UIBezierPath bezierPath];
            [UIColor.darkGrayColor setFill];
            [bezier17Path fill];
            [color setStroke];
            bezier17Path.lineWidth = 1;
            [bezier17Path stroke];


            //// Oval 59 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 245.17, 76.78);
            CGContextRotateCTM(context, 11.2 * M_PI / 180);

            UIBezierPath* oval59Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-5.21, -6.54, 10.43, 13.09)];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
            [UIColor.whiteColor setFill];
            [oval59Path fill];
            CGContextRestoreGState(context);

            [UIColor.darkGrayColor setStroke];
            oval59Path.lineWidth = 1;
            [oval59Path stroke];

            CGContextRestoreGState(context);


            //// Oval 63 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 259.37, 68.85);
            CGContextRotateCTM(context, 10.56 * M_PI / 180);

            UIBezierPath* oval63Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-7.15, 4.73, 8.06, 12.73)];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
            [UIColor.whiteColor setFill];
            [oval63Path fill];
            CGContextRestoreGState(context);

            [UIColor.darkGrayColor setStroke];
            oval63Path.lineWidth = 1;
            [oval63Path stroke];

            CGContextRestoreGState(context);


            //// Bezier 18 Drawing
            UIBezierPath* bezier18Path = [UIBezierPath bezierPath];
            [color11 setFill];
            [bezier18Path fill];
            [UIColor.darkGrayColor setStroke];
            bezier18Path.lineWidth = 1;
            [bezier18Path stroke];


            //// Bezier 19 Drawing
            UIBezierPath* bezier19Path = [UIBezierPath bezierPath];
            [UIColor.darkGrayColor setStroke];
            bezier19Path.lineWidth = 1;
            [bezier19Path stroke];


            //// Bezier 20 Drawing
            UIBezierPath* bezier20Path = [UIBezierPath bezierPath];
            [UIColor.darkGrayColor setStroke];
            bezier20Path.lineWidth = 1;
            [bezier20Path stroke];


            //// Oval 66 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 263.94, 78.08);
            CGContextRotateCTM(context, 6.35 * M_PI / 180);

            UIBezierPath* oval66Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-12.04, 1.76, 5, 7)];
            [color setFill];
            [oval66Path fill];

            CGContextRestoreGState(context);


            //// Oval 67 Drawing
            UIBezierPath* oval67Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(285.5, 82.5, 7.5, 9.5)];
            [UIColor.blackColor setFill];
            [oval67Path fill];
            [color setStroke];
            oval67Path.lineWidth = 1;
            [oval67Path stroke];


            //// Oval Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 250.35, 78.34);
            CGContextRotateCTM(context, 6.35 * M_PI / 180);

            UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-8.72, -1.73, 5, 7.84)];
            [color setFill];
            [ovalPath fill];

            CGContextRestoreGState(context);
        }


        //// Group 50
        {
            //// Bezier 119 Drawing
            UIBezierPath* bezier119Path = [UIBezierPath bezierPath];
            [bezier119Path moveToPoint: CGPointMake(251.5, 124.2)];
            [bezier119Path addCurveToPoint: CGPointMake(248.5, 124.2) controlPoint1: CGPointMake(249.83, 121.51) controlPoint2: CGPointMake(248.5, 124.2)];
            bezier119Path.lineCapStyle = kCGLineCapRound;

            [UIColor.blackColor setStroke];
            bezier119Path.lineWidth = 1;
            [bezier119Path stroke];


            //// Bezier 120 Drawing
            UIBezierPath* bezier120Path = [UIBezierPath bezierPath];
            [bezier120Path moveToPoint: CGPointMake(248.5, 124.39)];
            [bezier120Path addCurveToPoint: CGPointMake(242.6, 121.34) controlPoint1: CGPointMake(245.65, 126.27) controlPoint2: CGPointMake(242.6, 121.34)];
            bezier120Path.lineCapStyle = kCGLineCapRound;

            [UIColor.blackColor setStroke];
            bezier120Path.lineWidth = 2;
            [bezier120Path stroke];


            //// Bezier 121 Drawing
            UIBezierPath* bezier121Path = [UIBezierPath bezierPath];
            [bezier121Path moveToPoint: CGPointMake(242.5, 121.68)];
            [bezier121Path addCurveToPoint: CGPointMake(238, 123.03) controlPoint1: CGPointMake(240.74, 118.98) controlPoint2: CGPointMake(238, 123.03)];
            bezier121Path.lineCapStyle = kCGLineCapRound;

            [UIColor.blackColor setStroke];
            bezier121Path.lineWidth = 3;
            [bezier121Path stroke];
        }
    }


    //// Cleanup
    CGGradientRelease(lightSideMoonGradient);
    CGGradientRelease(darkSideMoonGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas30
{
    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* shadow2Color = [UIColor colorWithRed: 1 green: 0.799 blue: 0.229 alpha: 1];

    //// Group 47
    {
        //// Star 8 Drawing
        UIBezierPath* star8Path = [UIBezierPath bezierPath];
        [star8Path moveToPoint: CGPointMake(244.36, 24.5)];
        [star8Path addLineToPoint: CGPointMake(247.07, 33.07)];
        [star8Path addLineToPoint: CGPointMake(254.81, 35.37)];
        [star8Path addLineToPoint: CGPointMake(249.89, 41.81)];
        [star8Path addLineToPoint: CGPointMake(250.12, 49.94)];
        [star8Path addLineToPoint: CGPointMake(242.51, 47.22)];
        [star8Path addLineToPoint: CGPointMake(234.2, 51.5)];
        [star8Path addLineToPoint: CGPointMake(237.89, 41.26)];
        [star8Path addLineToPoint: CGPointMake(230.5, 34.74)];
        [star8Path addLineToPoint: CGPointMake(241.59, 31.95)];
        [star8Path addLineToPoint: CGPointMake(244.36, 24.5)];
        [star8Path closePath];
        [color11 setFill];
        [star8Path fill];
        [shadow2Color setStroke];
        star8Path.lineWidth = 1;
        [star8Path stroke];


        //// Group 57
        {
            //// Bezier 114 Drawing
            UIBezierPath* bezier114Path = [UIBezierPath bezierPath];
            [UIColor.blackColor setStroke];
            bezier114Path.lineWidth = 1;
            [bezier114Path stroke];


            //// Oval 197 Drawing
            UIBezierPath* oval197Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(237.5, 32.5, 6, 8)];
            [UIColor.whiteColor setFill];
            [oval197Path fill];
            [color setStroke];
            oval197Path.lineWidth = 1;
            [oval197Path stroke];


            //// Oval 198 Drawing
            UIBezierPath* oval198Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(243, 32.5, 6, 8)];
            [UIColor.whiteColor setFill];
            [oval198Path fill];
            [color setStroke];
            oval198Path.lineWidth = 1;
            [oval198Path stroke];


            //// Oval 199 Drawing
            UIBezierPath* oval199Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(238.5, 37.5, 3, 3)];
            [UIColor.blackColor setFill];
            [oval199Path fill];
            [color setStroke];
            oval199Path.lineWidth = 1;
            [oval199Path stroke];


            //// Oval 200 Drawing
            UIBezierPath* oval200Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(243.5, 37.5, 3, 3)];
            [UIColor.blackColor setFill];
            [oval200Path fill];
            [color setStroke];
            oval200Path.lineWidth = 1;
            [oval200Path stroke];


            //// Oval 133 Drawing
            UIBezierPath* oval133Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(239.5, 42.5, 7, 2)];
            [UIColor.whiteColor setFill];
            [oval133Path fill];
            [color setStroke];
            oval133Path.lineWidth = 1;
            [oval133Path stroke];
        }
    }
}

+ (void)drawCanvas31
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* lightningGradientColor = [UIColor colorWithRed: 1 green: 0.841 blue: 0.139 alpha: 0.841];
    UIColor* lightningGradientColor2 = [UIColor colorWithRed: 1 green: 0.463 blue: 0 alpha: 0.87];
    UIColor* color13 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.525];
    UIColor* lightningShadowColor = [UIColor colorWithRed: 1 green: 0.979 blue: 0.615 alpha: 1];

    //// Gradient Declarations
    CGFloat lightningGradientLocations[] = {0, 0.55, 1};
    CGGradientRef lightningGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)lightningGradientColor.CGColor, (id)[lightningGradientColor blendedColorWithFraction: 0.5 ofColor: lightningGradientColor2].CGColor, (id)lightningGradientColor2.CGColor], lightningGradientLocations);

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* lightningShadow = [[NSShadow alloc] init];
    [lightningShadow setShadowColor: lightningShadowColor];
    [lightningShadow setShadowOffset: CGSizeMake(0.1, 16.1)];
    [lightningShadow setShadowBlurRadius: 11];

    //// Group 55
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 29.18, 142.56);
        CGContextRotateCTM(context, -2.5 * M_PI / 180);

        CGContextSetShadowWithColor(context, lightningShadow.shadowOffset, lightningShadow.shadowBlurRadius, [lightningShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Group 56
        {
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, -6.13, 13.8);
            CGContextRotateCTM(context, -4.73 * M_PI / 180);



            //// Bezier 125 Drawing
            UIBezierPath* bezier125Path = [UIBezierPath bezierPath];
            [bezier125Path moveToPoint: CGPointMake(10.4, -43.22)];
            [bezier125Path addLineToPoint: CGPointMake(12.51, -38.29)];
            [bezier125Path addLineToPoint: CGPointMake(13.02, -45.01)];
            [bezier125Path addLineToPoint: CGPointMake(14.57, -40.81)];
            [bezier125Path addLineToPoint: CGPointMake(15.69, -37.44)];
            [bezier125Path addLineToPoint: CGPointMake(16.73, -44.68)];
            [bezier125Path addLineToPoint: CGPointMake(17.25, -35.16)];
            [bezier125Path addLineToPoint: CGPointMake(20.13, -40.31)];
            [bezier125Path addLineToPoint: CGPointMake(19.73, -34.93)];
            [bezier125Path addLineToPoint: CGPointMake(22.61, -40.09)];
            [bezier125Path addLineToPoint: CGPointMake(16.54, 18.23)];
            [bezier125Path addLineToPoint: CGPointMake(10.33, 10.81)];
            [bezier125Path addLineToPoint: CGPointMake(10.33, 43.19)];
            [bezier125Path addLineToPoint: CGPointMake(2.89, 35.1)];
            [bezier125Path addLineToPoint: CGPointMake(2.89, 87.72)];
            [bezier125Path addLineToPoint: CGPointMake(-5.18, 20.93)];
            [bezier125Path addLineToPoint: CGPointMake(4.13, 27.68)];
            [bezier125Path addLineToPoint: CGPointMake(1.65, -6.06)];
            [bezier125Path addLineToPoint: CGPointMake(10.33, 0.01)];
            [bezier125Path addLineToPoint: CGPointMake(8.47, -41.14)];
            [bezier125Path addLineToPoint: CGPointMake(10.4, -43.22)];
            [bezier125Path closePath];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
            CGContextBeginTransparencyLayer(context, NULL);
            [bezier125Path addClip];
            CGContextDrawLinearGradient(context, lightningGradient, CGPointMake(8.72, -45.01), CGPointMake(8.72, 87.72), 0);
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            bezier125Path.lineWidth = 1;
            [bezier125Path stroke];



            CGContextRestoreGState(context);
        }


        //// Bezier 126 Drawing
        UIBezierPath* bezier126Path = [UIBezierPath bezierPath];
        [bezier126Path moveToPoint: CGPointMake(7.11, -13.94)];
        [bezier126Path addLineToPoint: CGPointMake(8.39, 19.92)];
        [bezier126Path addLineToPoint: CGPointMake(0.75, 15.86)];
        [bezier126Path addLineToPoint: CGPointMake(3.93, 47.01)];
        [bezier126Path addLineToPoint: CGPointMake(-4.34, 42.95)];
        [bezier126Path addLineToPoint: CGPointMake(-1.16, 69.36)];
        [color13 setStroke];
        bezier126Path.lineWidth = 1;
        [bezier126Path stroke];


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(lightningGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas32
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* lightningGradientColor = [UIColor colorWithRed: 1 green: 0.841 blue: 0.139 alpha: 0.841];
    UIColor* lightningGradientColor2 = [UIColor colorWithRed: 1 green: 0.463 blue: 0 alpha: 0.87];
    UIColor* color13 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.525];
    UIColor* lightningShadowColor = [UIColor colorWithRed: 1 green: 0.979 blue: 0.615 alpha: 1];

    //// Gradient Declarations
    CGFloat lightningGradientLocations[] = {0, 0.55, 1};
    CGGradientRef lightningGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)lightningGradientColor.CGColor, (id)[lightningGradientColor blendedColorWithFraction: 0.5 ofColor: lightningGradientColor2].CGColor, (id)lightningGradientColor2.CGColor], lightningGradientLocations);

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* lightningShadow = [[NSShadow alloc] init];
    [lightningShadow setShadowColor: lightningShadowColor];
    [lightningShadow setShadowOffset: CGSizeMake(0.1, 16.1)];
    [lightningShadow setShadowBlurRadius: 11];

    //// Group 48
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, lightningShadow.shadowOffset, lightningShadow.shadowBlurRadius, [lightningShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Bezier 110 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 67.88, 202.2);
        CGContextRotateCTM(context, -6.65 * M_PI / 180);

        UIBezierPath* bezier110Path = [UIBezierPath bezierPath];
        [bezier110Path moveToPoint: CGPointMake(-0.8, 36.73)];
        [bezier110Path addLineToPoint: CGPointMake(-10.3, 25.82)];
        [bezier110Path addLineToPoint: CGPointMake(-9.06, 95.3)];
        [bezier110Path addLineToPoint: CGPointMake(-20.21, 87.84)];
        [bezier110Path addLineToPoint: CGPointMake(-5.34, 173.4)];
        [bezier110Path addLineToPoint: CGPointMake(-7.41, 109.66)];
        [bezier110Path addLineToPoint: CGPointMake(2.09, 122.29)];
        [bezier110Path addLineToPoint: CGPointMake(-0.39, 55.11)];
        [bezier110Path addLineToPoint: CGPointMake(6.63, 66.59)];
        [bezier110Path addCurveToPoint: CGPointMake(14.06, 8.02) controlPoint1: CGPointMake(6.63, 66.59) controlPoint2: CGPointMake(7.04, 72.91)];
        [bezier110Path addCurveToPoint: CGPointMake(10.35, 10.89) controlPoint1: CGPointMake(14.7, 2.09) controlPoint2: CGPointMake(11.32, 11.04)];
        [bezier110Path addCurveToPoint: CGPointMake(11.59, 5.72) controlPoint1: CGPointMake(8.43, 10.59) controlPoint2: CGPointMake(12.49, 4.49)];
        [bezier110Path addCurveToPoint: CGPointMake(8.28, 4) controlPoint1: CGPointMake(10.48, 7.23) controlPoint2: CGPointMake(9.41, 2.91)];
        [bezier110Path addCurveToPoint: CGPointMake(6.63, 10.89) controlPoint1: CGPointMake(7.74, 4.53) controlPoint2: CGPointMake(7.82, 14.03)];
        [bezier110Path addCurveToPoint: CGPointMake(4.57, 8.02) controlPoint1: CGPointMake(5.8, 8.68) controlPoint2: CGPointMake(6.22, 2.28)];
        [bezier110Path addCurveToPoint: CGPointMake(4.57, 1.7) controlPoint1: CGPointMake(2.48, 15.26) controlPoint2: CGPointMake(5.11, 1.63)];
        [bezier110Path addCurveToPoint: CGPointMake(2.5, 8.02) controlPoint1: CGPointMake(4.27, 1.74) controlPoint2: CGPointMake(3.32, 8.21)];
        [bezier110Path addCurveToPoint: CGPointMake(0.44, 1.7) controlPoint1: CGPointMake(1.62, 7.81) controlPoint2: CGPointMake(0.85, 0.98)];
        [bezier110Path addCurveToPoint: CGPointMake(0.44, 8.02) controlPoint1: CGPointMake(-0.54, 3.4) controlPoint2: CGPointMake(0.44, 8.02)];
        [bezier110Path addLineToPoint: CGPointMake(-0.8, 36.73)];
        [bezier110Path closePath];
        bezier110Path.lineCapStyle = kCGLineCapSquare;

        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);
        [bezier110Path addClip];
        CGContextDrawLinearGradient(context, lightningGradient, CGPointMake(-3.03, 1.65), CGPointMake(-3.03, 173.4), 0);
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color setStroke];
        bezier110Path.lineWidth = 1;
        [bezier110Path stroke];

        CGContextRestoreGState(context);


        //// Bezier 111 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 71.1, 240.14);
        CGContextRotateCTM(context, -6.65 * M_PI / 180);

        UIBezierPath* bezier111Path = [UIBezierPath bezierPath];
        [bezier111Path moveToPoint: CGPointMake(-5.51, -0.49)];
        [bezier111Path addCurveToPoint: CGPointMake(-1.92, 68.44) controlPoint1: CGPointMake(-4.85, 59.09) controlPoint2: CGPointMake(-1.92, 68.44)];
        [bezier111Path addLineToPoint: CGPointMake(-11.5, 59.09)];
        [bezier111Path addLineToPoint: CGPointMake(-10.17, 79.29)];
        bezier111Path.lineCapStyle = kCGLineCapRound;

        [color13 setStroke];
        bezier111Path.lineWidth = 2;
        [bezier111Path stroke];

        CGContextRestoreGState(context);


        //// Bezier 112 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 64.5, 218.45);
        CGContextRotateCTM(context, -6.65 * M_PI / 180);

        UIBezierPath* bezier112Path = [UIBezierPath bezierPath];
        [bezier112Path moveToPoint: CGPointMake(11.24, 1.26)];
        [bezier112Path addLineToPoint: CGPointMake(9.52, 36.65)];
        [bezier112Path addLineToPoint: CGPointMake(-1.44, 21.77)];
        [color13 setStroke];
        bezier112Path.lineWidth = 3;
        [bezier112Path stroke];

        CGContextRestoreGState(context);


        //// Bezier 113 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 73.09, 320.68);
        CGContextRotateCTM(context, -6.65 * M_PI / 180);

        UIBezierPath* bezier113Path = [UIBezierPath bezierPath];
        [bezier113Path moveToPoint: CGPointMake(-0.29, 23.63)];
        [bezier113Path addLineToPoint: CGPointMake(-2.75, -0.03)];
        [color13 setStroke];
        bezier113Path.lineWidth = 1;
        [bezier113Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(lightningGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas33
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* lightningGradientColor = [UIColor colorWithRed: 1 green: 0.841 blue: 0.139 alpha: 0.841];
    UIColor* lightningGradientColor2 = [UIColor colorWithRed: 1 green: 0.463 blue: 0 alpha: 0.87];
    UIColor* color13 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.525];
    UIColor* lightningShadowColor = [UIColor colorWithRed: 1 green: 0.979 blue: 0.615 alpha: 1];

    //// Gradient Declarations
    CGFloat lightningGradientLocations[] = {0, 0.55, 1};
    CGGradientRef lightningGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)lightningGradientColor.CGColor, (id)[lightningGradientColor blendedColorWithFraction: 0.5 ofColor: lightningGradientColor2].CGColor, (id)lightningGradientColor2.CGColor], lightningGradientLocations);

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* lightningShadow = [[NSShadow alloc] init];
    [lightningShadow setShadowColor: lightningShadowColor];
    [lightningShadow setShadowOffset: CGSizeMake(0.1, 16.1)];
    [lightningShadow setShadowBlurRadius: 11];

    //// Group 53
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 161.32, 212.06);
        CGContextRotateCTM(context, -2.5 * M_PI / 180);

        CGContextSetShadowWithColor(context, lightningShadow.shadowOffset, lightningShadow.shadowBlurRadius, [lightningShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Group 54
        {
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, -6.53, 13.79);
            CGContextRotateCTM(context, -4.73 * M_PI / 180);



            //// Bezier 123 Drawing
            UIBezierPath* bezier123Path = [UIBezierPath bezierPath];
            [bezier123Path moveToPoint: CGPointMake(10.09, -43.08)];
            [bezier123Path addLineToPoint: CGPointMake(12.13, -37.81)];
            [bezier123Path addLineToPoint: CGPointMake(12.62, -44.99)];
            [bezier123Path addLineToPoint: CGPointMake(14.11, -40.51)];
            [bezier123Path addLineToPoint: CGPointMake(15.16, -29.56)];
            [bezier123Path addLineToPoint: CGPointMake(16.2, -44.64)];
            [bezier123Path addLineToPoint: CGPointMake(16.7, -34.47)];
            [bezier123Path addLineToPoint: CGPointMake(19.48, -39.97)];
            [bezier123Path addLineToPoint: CGPointMake(19.08, -34.23)];
            [bezier123Path addLineToPoint: CGPointMake(21.86, -39.74)];
            [bezier123Path addLineToPoint: CGPointMake(16.01, 22.54)];
            [bezier123Path addLineToPoint: CGPointMake(10.03, 14.61)];
            [bezier123Path addLineToPoint: CGPointMake(10.03, 49.2)];
            [bezier123Path addLineToPoint: CGPointMake(2.85, 40.55)];
            [bezier123Path addLineToPoint: CGPointMake(2.85, 96.74)];
            [bezier123Path addLineToPoint: CGPointMake(-4.92, 25.42)];
            [bezier123Path addLineToPoint: CGPointMake(4.05, 32.63)];
            [bezier123Path addLineToPoint: CGPointMake(1.65, -3.4)];
            [bezier123Path addLineToPoint: CGPointMake(10.03, 3.09)];
            [bezier123Path addLineToPoint: CGPointMake(8.23, -40.86)];
            [bezier123Path addLineToPoint: CGPointMake(10.09, -43.08)];
            [bezier123Path closePath];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
            CGContextBeginTransparencyLayer(context, NULL);
            [bezier123Path addClip];
            CGContextDrawLinearGradient(context, lightningGradient, CGPointMake(8.47, -44.99), CGPointMake(8.47, 96.74), 0);
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            bezier123Path.lineWidth = 1;
            [bezier123Path stroke];



            CGContextRestoreGState(context);
        }


        //// Bezier 124 Drawing
        UIBezierPath* bezier124Path = [UIBezierPath bezierPath];
        [bezier124Path moveToPoint: CGPointMake(6.97, -12.68)];
        [bezier124Path addLineToPoint: CGPointMake(8.25, 23.45)];
        [bezier124Path addLineToPoint: CGPointMake(0.61, 19.11)];
        [bezier124Path addLineToPoint: CGPointMake(3.79, 52.35)];
        [bezier124Path addLineToPoint: CGPointMake(-4.48, 48.01)];
        [bezier124Path addLineToPoint: CGPointMake(-1.3, 76.19)];
        [color13 setStroke];
        bezier124Path.lineWidth = 1;
        [bezier124Path stroke];


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(lightningGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas34
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* lightningGradientColor = [UIColor colorWithRed: 1 green: 0.841 blue: 0.139 alpha: 0.841];
    UIColor* lightningGradientColor2 = [UIColor colorWithRed: 1 green: 0.463 blue: 0 alpha: 0.87];
    UIColor* color13 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.525];
    UIColor* lightningShadowColor = [UIColor colorWithRed: 1 green: 0.979 blue: 0.615 alpha: 1];

    //// Gradient Declarations
    CGFloat lightningGradientLocations[] = {0, 0.55, 1};
    CGGradientRef lightningGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)lightningGradientColor.CGColor, (id)[lightningGradientColor blendedColorWithFraction: 0.5 ofColor: lightningGradientColor2].CGColor, (id)lightningGradientColor2.CGColor], lightningGradientLocations);

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* lightningShadow = [[NSShadow alloc] init];
    [lightningShadow setShadowColor: lightningShadowColor];
    [lightningShadow setShadowOffset: CGSizeMake(0.1, 16.1)];
    [lightningShadow setShadowBlurRadius: 11];

    //// Group 51
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 343.13, 325.06);
        CGContextRotateCTM(context, 0.89 * M_PI / 180);

        CGContextSetShadowWithColor(context, lightningShadow.shadowOffset, lightningShadow.shadowBlurRadius, [lightningShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Group 52
        {
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 0.37, 12.44);
            CGContextRotateCTM(context, 4.73 * M_PI / 180);



            //// Bezier 115 Drawing
            UIBezierPath* bezier115Path = [UIBezierPath bezierPath];
            [bezier115Path moveToPoint: CGPointMake(-3.98, -117.81)];
            [bezier115Path addLineToPoint: CGPointMake(-7.24, -109.76)];
            [bezier115Path addLineToPoint: CGPointMake(-8.02, -120.74)];
            [bezier115Path addLineToPoint: CGPointMake(-10.41, -113.88)];
            [bezier115Path addLineToPoint: CGPointMake(-12.08, -97.14)];
            [bezier115Path addLineToPoint: CGPointMake(-13.74, -120.19)];
            [bezier115Path addLineToPoint: CGPointMake(-14.54, -104.64)];
            [bezier115Path addLineToPoint: CGPointMake(-18.98, -113.06)];
            [bezier115Path addLineToPoint: CGPointMake(-18.35, -104.28)];
            [bezier115Path addLineToPoint: CGPointMake(-22.79, -112.7)];
            [bezier115Path addLineToPoint: CGPointMake(-13.44, -17.47)];
            [bezier115Path addLineToPoint: CGPointMake(-3.88, -29.59)];
            [bezier115Path addLineToPoint: CGPointMake(-3.88, 23.29)];
            [bezier115Path addLineToPoint: CGPointMake(7.58, 10.07)];
            [bezier115Path addLineToPoint: CGPointMake(7.58, 96)];
            [bezier115Path addLineToPoint: CGPointMake(20, -13.06)];
            [bezier115Path addLineToPoint: CGPointMake(5.67, -2.05)];
            [bezier115Path addLineToPoint: CGPointMake(9.49, -57.13)];
            [bezier115Path addLineToPoint: CGPointMake(-3.88, -47.22)];
            [bezier115Path addLineToPoint: CGPointMake(-1.02, -114.42)];
            [bezier115Path addLineToPoint: CGPointMake(-3.98, -117.81)];
            [bezier115Path closePath];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
            CGContextBeginTransparencyLayer(context, NULL);
            [bezier115Path addClip];
            CGContextDrawLinearGradient(context, lightningGradient, CGPointMake(-1.39, -120.74), CGPointMake(-1.39, 96), 0);
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            bezier115Path.lineWidth = 1;
            [bezier115Path stroke];



            CGContextRestoreGState(context);
        }


        //// Bezier 122 Drawing
        UIBezierPath* bezier122Path = [UIBezierPath bezierPath];
        [bezier122Path moveToPoint: CGPointMake(-4.63, -79.59)];
        [bezier122Path addLineToPoint: CGPointMake(-6.63, -24.33)];
        [bezier122Path addLineToPoint: CGPointMake(5.37, -30.96)];
        [bezier122Path addLineToPoint: CGPointMake(0.37, 19.88)];
        [bezier122Path addLineToPoint: CGPointMake(13.37, 13.24)];
        [bezier122Path addLineToPoint: CGPointMake(8.37, 56.34)];
        [color13 setStroke];
        bezier122Path.lineWidth = 1;
        [bezier122Path stroke];


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(lightningGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas35
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* lightningGradientColor = [UIColor colorWithRed: 1 green: 0.841 blue: 0.139 alpha: 0.841];
    UIColor* lightningGradientColor2 = [UIColor colorWithRed: 1 green: 0.463 blue: 0 alpha: 0.87];
    UIColor* color13 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.525];
    UIColor* lightningShadowColor = [UIColor colorWithRed: 1 green: 0.979 blue: 0.615 alpha: 1];

    //// Gradient Declarations
    CGFloat lightningGradientLocations[] = {0, 0.55, 1};
    CGGradientRef lightningGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)lightningGradientColor.CGColor, (id)[lightningGradientColor blendedColorWithFraction: 0.5 ofColor: lightningGradientColor2].CGColor, (id)lightningGradientColor2.CGColor], lightningGradientLocations);

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* lightningShadow = [[NSShadow alloc] init];
    [lightningShadow setShadowColor: lightningShadowColor];
    [lightningShadow setShadowOffset: CGSizeMake(0.1, 16.1)];
    [lightningShadow setShadowBlurRadius: 11];

    //// Group 51
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 384.13, 203.06);
        CGContextRotateCTM(context, 10.21 * M_PI / 180);

        CGContextSetShadowWithColor(context, lightningShadow.shadowOffset, lightningShadow.shadowBlurRadius, [lightningShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Group 52
        {
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 0.37, 12.44);
            CGContextRotateCTM(context, 4.73 * M_PI / 180);



            //// Bezier 115 Drawing
            UIBezierPath* bezier115Path = [UIBezierPath bezierPath];
            [bezier115Path moveToPoint: CGPointMake(-15.06, -119.16)];
            [bezier115Path addLineToPoint: CGPointMake(-17.78, -114.82)];
            [bezier115Path addLineToPoint: CGPointMake(-18.44, -120.74)];
            [bezier115Path addLineToPoint: CGPointMake(-20.43, -117.04)];
            [bezier115Path addLineToPoint: CGPointMake(-21.83, -108.03)];
            [bezier115Path addLineToPoint: CGPointMake(-23.22, -120.44)];
            [bezier115Path addLineToPoint: CGPointMake(-23.89, -112.07)];
            [bezier115Path addLineToPoint: CGPointMake(-27.6, -116.6)];
            [bezier115Path addLineToPoint: CGPointMake(-27.07, -111.87)];
            [bezier115Path addLineToPoint: CGPointMake(-30.79, -116.41)];
            [bezier115Path addLineToPoint: CGPointMake(-22.97, -65.12)];
            [bezier115Path addLineToPoint: CGPointMake(-14.98, -71.64)];
            [bezier115Path addLineToPoint: CGPointMake(-14.98, -43.16)];
            [bezier115Path addLineToPoint: CGPointMake(-5.39, -50.28)];
            [bezier115Path addLineToPoint: CGPointMake(-5.39, -4)];
            [bezier115Path addLineToPoint: CGPointMake(5, -62.74)];
            [bezier115Path addLineToPoint: CGPointMake(-6.99, -56.81)];
            [bezier115Path addLineToPoint: CGPointMake(-3.79, -86.48)];
            [bezier115Path addLineToPoint: CGPointMake(-14.98, -81.14)];
            [bezier115Path addLineToPoint: CGPointMake(-12.58, -117.33)];
            [bezier115Path addLineToPoint: CGPointMake(-15.06, -119.16)];
            [bezier115Path closePath];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
            CGContextBeginTransparencyLayer(context, NULL);
            [bezier115Path addClip];
            CGContextDrawLinearGradient(context, lightningGradient, CGPointMake(-12.89, -120.74), CGPointMake(-12.89, -4), 0);
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            bezier115Path.lineWidth = 1;
            [bezier115Path stroke];



            CGContextRestoreGState(context);
        }


        //// Bezier 122 Drawing
        UIBezierPath* bezier122Path = [UIBezierPath bezierPath];
        [bezier122Path moveToPoint: CGPointMake(-10.98, -93.79)];
        [bezier122Path addLineToPoint: CGPointMake(-12.49, -64.41)];
        [bezier122Path addLineToPoint: CGPointMake(-3.46, -67.93)];
        [bezier122Path addLineToPoint: CGPointMake(-7.22, -40.9)];
        [bezier122Path addLineToPoint: CGPointMake(2.57, -44.43)];
        [bezier122Path addLineToPoint: CGPointMake(-1.2, -21.51)];
        [color13 setStroke];
        bezier122Path.lineWidth = 1;
        [bezier122Path stroke];


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(lightningGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas36
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 4
    {
        //// Oval 5 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 183.92, 79.68);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.07, 17.09)];
        [color3 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];

        CGContextRestoreGState(context);


        //// Oval 8 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 103.62, 91.01);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.8, 15.26)];
        [color3 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];

        CGContextRestoreGState(context);


        //// Oval 9 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 100.16, 100.38);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.56, 13.05)];
        [color3 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];

        CGContextRestoreGState(context);


        //// Oval 10 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 219.87, 90.33);
        CGContextRotateCTM(context, 5.19 * M_PI / 180);

        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-13.79, -9.65, 27.59, 19.3)];
        [color3 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];

        CGContextRestoreGState(context);


        //// Oval 11 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 163.43, 84.34);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.07, 17.09)];
        [color3 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];

        CGContextRestoreGState(context);


        //// Oval 12 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 181.84, 91.39);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 34.24, 20.84)];
        [color3 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];

        CGContextRestoreGState(context);


        //// Oval 13 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 220.73, 93.2);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.96, 18.16)];
        [color3 setFill];
        [oval13Path fill];

        ////// Oval 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];

        CGContextRestoreGState(context);


        //// Oval 15 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 142.01, 87.68);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.8, 15.26)];
        [color3 setFill];
        [oval15Path fill];

        ////// Oval 15 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval15Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval15Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];

        CGContextRestoreGState(context);


        //// Oval 16 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 122.39, 86.92);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.56, 13.05)];
        [color3 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];

        CGContextRestoreGState(context);


        //// Oval 18 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 120.9, 96.67);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.47, 15.67)];
        [color3 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];

        CGContextRestoreGState(context);


        //// Oval 21 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 146.9, 92.75);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.93, 19.8)];
        [color3 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];

        CGContextRestoreGState(context);


        //// Oval 22 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 179.24, 102.58);
        CGContextRotateCTM(context, 0.28 * M_PI / 180);

        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-13, -8.83, 25.99, 17.65)];
        [color3 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];

        CGContextRestoreGState(context);


        //// Oval 23 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 222.56, 101.38);
        CGContextRotateCTM(context, -0.79 * M_PI / 180);

        UIBezierPath* oval23Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-15.46, -9.9, 30.93, 19.8)];
        [color3 setFill];
        [oval23Path fill];

        ////// Oval 23 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval23Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval23Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval23Path.lineWidth = 1;
        [oval23Path stroke];

        CGContextRestoreGState(context);
    }


    //// Group 5
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 29 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 190.58, 80.45);
        CGContextRotateCTM(context, -1.19 * M_PI / 180);

        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-13.39, -8.66, 26.78, 17.31)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color10 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];

        CGContextRestoreGState(context);


        //// Oval 24 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 136.02, 66.7);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.21, 18.78)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color10 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];

        CGContextRestoreGState(context);


        //// Oval 20 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 162.05, 67.62);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.74, 21.12)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color10 setFill];
        [oval20Path fill];

        ////// Oval 20 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval20Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval20Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];

        CGContextRestoreGState(context);


        //// Oval 25 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 120.67, 77.33);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.22, 16.88)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color10 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];

        CGContextRestoreGState(context);


        //// Oval 27 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 161.62, 82.28);
        CGContextRotateCTM(context, -2.84 * M_PI / 180);

        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-14.61, -8.44, 29.22, 16.88)];
        [color10 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 35 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 138.75, 32.68);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.89, 16.29)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color3 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];

        CGContextRestoreGState(context);


        //// Oval 14 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 154.55, 26.37);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.33, 17.85)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color3 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];

        CGContextRestoreGState(context);


        //// Oval 33 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 165.55, 32.37);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.33, 17.85)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color3 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];

        CGContextRestoreGState(context);


        //// Oval 32 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 206.02, 28.08);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.88, 20.29)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color3 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];

        CGContextRestoreGState(context);


        //// Oval 37 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 259.58, 40.79);
        CGContextRotateCTM(context, -1.44 * M_PI / 180);

        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-11.45, -7.14, 22.89, 14.29)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color3 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];

        CGContextRestoreGState(context);


        //// Oval 36 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 247.58, 32.79);
        CGContextRotateCTM(context, 2 * M_PI / 180);

        UIBezierPath* oval36Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-13.45, -9.14, 26.89, 18.29)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color3 setFill];
        [oval36Path fill];

        ////// Oval 36 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval36Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval36Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval36Path.lineWidth = 1;
        [oval36Path stroke];

        CGContextRestoreGState(context);


        //// Oval 30 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 233.58, 40.79);
        CGContextRotateCTM(context, -1.13 * M_PI / 180);

        UIBezierPath* oval30Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-12.45, -8.14, 24.89, 16.29)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color3 setFill];
        [oval30Path fill];

        ////// Oval 30 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval30Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval30Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval30Path.lineWidth = 1;
        [oval30Path stroke];

        CGContextRestoreGState(context);


        //// Oval 31 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 178.89, 26.21);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval31Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.33, 19.85)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color3 setFill];
        [oval31Path fill];

        ////// Oval 31 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval31Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval31Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval31Path.lineWidth = 1;
        [oval31Path stroke];

        CGContextRestoreGState(context);


        //// Oval 34 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 205.62, 40.71);
        CGContextRotateCTM(context, -3.52 * M_PI / 180);

        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-11.67, -5.92, 23.33, 11.85)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [color3 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 9
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 75 Drawing
        UIBezierPath* oval75Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(57, 153, 31, 19)];
        [color10 setFill];
        [oval75Path fill];

        ////// Oval 75 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval75Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval75Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval75Path.lineWidth = 1;
        [oval75Path stroke];


        //// Oval 78 Drawing
        UIBezierPath* oval78Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(72, 154, 34, 26)];
        [color10 setFill];
        [oval78Path fill];

        ////// Oval 78 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval78Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval78Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval78Path.lineWidth = 1;
        [oval78Path stroke];


        //// Oval 86 Drawing
        UIBezierPath* oval86Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(91, 168, 27, 20)];
        [color10 setFill];
        [oval86Path fill];

        ////// Oval 86 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval86Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval86Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval86Path.lineWidth = 1;
        [oval86Path stroke];


        //// Oval 87 Drawing
        UIBezierPath* oval87Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(28, 153, 32, 25)];
        [color10 setFill];
        [oval87Path fill];

        ////// Oval 87 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval87Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval87Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval87Path.lineWidth = 1;
        [oval87Path stroke];


        //// Oval 88 Drawing
        UIBezierPath* oval88Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(10, 164, 30, 24)];
        [color10 setFill];
        [oval88Path fill];

        ////// Oval 88 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval88Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval88Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval88Path.lineWidth = 1;
        [oval88Path stroke];


        //// Oval 89 Drawing
        UIBezierPath* oval89Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-15.5, 161.5, 35, 26)];
        [color10 setFill];
        [oval89Path fill];

        ////// Oval 89 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval89Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval89Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval89Path.lineWidth = 1;
        [oval89Path stroke];


        //// Oval 91 Drawing
        UIBezierPath* oval91Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(34, 163, 37, 23)];
        [color10 setFill];
        [oval91Path fill];

        ////// Oval 91 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval91Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval91Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval91Path.lineWidth = 1;
        [oval91Path stroke];


        //// Oval 94 Drawing
        UIBezierPath* oval94Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(61, 166, 35, 24)];
        [color10 setFill];
        [oval94Path fill];

        ////// Oval 94 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval94Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval94Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval94Path.lineWidth = 1;
        [oval94Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 12
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 115 Drawing
        UIBezierPath* oval115Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(265.5, 153.5, 30, 24)];
        [color10 setFill];
        [oval115Path fill];

        ////// Oval 115 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval115Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval115Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval115Path.lineWidth = 1;
        [oval115Path stroke];


        //// Oval 121 Drawing
        UIBezierPath* oval121Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(272, 162, 31, 25)];
        [color10 setFill];
        [oval121Path fill];

        ////// Oval 121 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval121Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval121Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval121Path.lineWidth = 1;
        [oval121Path stroke];


        //// Oval 114 Drawing
        UIBezierPath* oval114Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(250, 163, 28, 25)];
        [color10 setFill];
        [oval114Path fill];

        ////// Oval 114 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval114Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval114Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval114Path.lineWidth = 1;
        [oval114Path stroke];


        //// Oval 117 Drawing
        UIBezierPath* oval117Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(222, 156.5, 31, 23)];
        [color10 setFill];
        [oval117Path fill];

        ////// Oval 117 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval117Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval117Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval117Path.lineWidth = 1;
        [oval117Path stroke];


        //// Oval 120 Drawing
        UIBezierPath* oval120Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(228.5, 164, 29, 23)];
        [color10 setFill];
        [oval120Path fill];

        ////// Oval 120 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval120Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval120Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval120Path.lineWidth = 1;
        [oval120Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 14
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 379.56, 56.28);
        CGContextRotateCTM(context, 2.89 * M_PI / 180);

        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 28 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 19.13, -1.27);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.24, 19.68)];
        [color3 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];

        CGContextRestoreGState(context);


        //// Oval 154 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -35.03, -0.01);
        CGContextRotateCTM(context, -4.14 * M_PI / 180);

        UIBezierPath* oval154Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-14.65, -8.05, 29.3, 16.1)];
        [color3 setFill];
        [oval154Path fill];

        ////// Oval 154 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval154Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval154Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval154Path.lineWidth = 1;
        [oval154Path stroke];

        CGContextRestoreGState(context);


        //// Oval 164 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -32.03, -10.82);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval164Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.82, 15.14)];
        [color3 setFill];
        [oval164Path fill];

        ////// Oval 164 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval164Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval164Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval164Path.lineWidth = 1;
        [oval164Path stroke];

        CGContextRestoreGState(context);


        //// Oval 155 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -17.02, -15.8);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval155Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.24, 17.68)];
        [color3 setFill];
        [oval155Path fill];

        ////// Oval 155 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval155Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval155Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval155Path.lineWidth = 1;
        [oval155Path stroke];

        CGContextRestoreGState(context);


        //// Oval 4 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 1.18, -15.67);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.24, 19.68)];
        [color3 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];

        CGContextRestoreGState(context);


        //// Oval 7 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 17.78, -15.84);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.24, 17.68)];
        [color3 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];

        CGContextRestoreGState(context);


        //// Oval 156 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -14.59, -0.81);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval156Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.82, 19.14)];
        [color3 setFill];
        [oval156Path fill];

        ////// Oval 156 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval156Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval156Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval156Path.lineWidth = 1;
        [oval156Path stroke];

        CGContextRestoreGState(context);


        //// Oval 163 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 6.46, 1.7);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval163Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.34, 17.25)];
        [color3 setFill];
        [oval163Path fill];

        ////// Oval 163 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval163Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval163Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval163Path.lineWidth = 1;
        [oval163Path stroke];

        CGContextRestoreGState(context);


        //// Oval 167 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -34.25, -1.98);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval167Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.82, 19.14)];
        [color3 setFill];
        [oval167Path fill];

        ////// Oval 167 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval167Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval167Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval167Path.lineWidth = 1;
        [oval167Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Group
    {
        //// Group 13
        {
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
            CGContextBeginTransparencyLayer(context, NULL);


            //// Oval 143 Drawing
            UIBezierPath* oval143Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(385.5, 154.5, 30, 22)];
            [color10 setFill];
            [oval143Path fill];

            ////// Oval 143 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval143Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval143Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval143Path.lineWidth = 1;
            [oval143Path stroke];


            //// Oval 144 Drawing
            UIBezierPath* oval144Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(363.5, 164.5, 30, 24)];
            [color10 setFill];
            [oval144Path fill];

            ////// Oval 144 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval144Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval144Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval144Path.lineWidth = 1;
            [oval144Path stroke];


            //// Oval 145 Drawing
            UIBezierPath* oval145Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(345, 156, 34, 23)];
            [color10 setFill];
            [oval145Path fill];

            ////// Oval 145 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval145Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval145Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval145Path.lineWidth = 1;
            [oval145Path stroke];


            //// Oval 147 Drawing
            UIBezierPath* oval147Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(393.5, 165.5, 36, 23)];
            [color10 setFill];
            [oval147Path fill];

            ////// Oval 147 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval147Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval147Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval147Path.lineWidth = 1;
            [oval147Path stroke];


            //// Oval 148 Drawing
            UIBezierPath* oval148Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(332.5, 167.5, 26, 21)];
            [color10 setFill];
            [oval148Path fill];

            ////// Oval 148 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval148Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval148Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval148Path.lineWidth = 1;
            [oval148Path stroke];


            //// Oval 149 Drawing
            UIBezierPath* oval149Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(349, 169, 28, 18)];
            [color10 setFill];
            [oval149Path fill];

            ////// Oval 149 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval149Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval149Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval149Path.lineWidth = 1;
            [oval149Path stroke];


            //// Oval 151 Drawing
            UIBezierPath* oval151Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(379.5, 170.5, 31, 17)];
            [color10 setFill];
            [oval151Path fill];

            ////// Oval 151 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval151Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval151Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval151Path.lineWidth = 1;
            [oval151Path stroke];


            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);
        }


        //// Group 10
        {
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
            CGContextBeginTransparencyLayer(context, NULL);


            //// Oval 97 Drawing
            UIBezierPath* oval97Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(394, 132.5, 32, 23)];
            [color10 setFill];
            [oval97Path fill];

            ////// Oval 97 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval97Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval97Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval97Path.lineWidth = 1;
            [oval97Path stroke];


            //// Oval 98 Drawing
            UIBezierPath* oval98Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(373.5, 134, 31, 22)];
            [color10 setFill];
            [oval98Path fill];

            ////// Oval 98 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval98Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval98Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval98Path.lineWidth = 1;
            [oval98Path stroke];


            //// Oval 103 Drawing
            UIBezierPath* oval103Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(399.5, 144, 31, 24)];
            [color10 setFill];
            [oval103Path fill];

            ////// Oval 103 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval103Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval103Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval103Path.lineWidth = 1;
            [oval103Path stroke];


            //// Oval 96 Drawing
            UIBezierPath* oval96Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(373.5, 144, 31, 24)];
            [color10 setFill];
            [oval96Path fill];

            ////// Oval 96 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval96Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval96Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval96Path.lineWidth = 1;
            [oval96Path stroke];


            //// Oval 99 Drawing
            UIBezierPath* oval99Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(349.5, 134.5, 31, 22)];
            [color10 setFill];
            [oval99Path fill];

            ////// Oval 99 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval99Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval99Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval99Path.lineWidth = 1;
            [oval99Path stroke];


            //// Oval 100 Drawing
            UIBezierPath* oval100Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(319.5, 147, 23, 18)];
            [color10 setFill];
            [oval100Path fill];

            ////// Oval 100 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval100Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval100Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval100Path.lineWidth = 1;
            [oval100Path stroke];


            //// Oval 101 Drawing
            UIBezierPath* oval101Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(328, 143.5, 30, 22)];
            [color10 setFill];
            [oval101Path fill];

            ////// Oval 101 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval101Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval101Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval101Path.lineWidth = 1;
            [oval101Path stroke];


            //// Oval 102 Drawing
            UIBezierPath* oval102Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(351, 144, 32, 22)];
            [color10 setFill];
            [oval102Path fill];

            ////// Oval 102 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval102Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval102Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval102Path.lineWidth = 1;
            [oval102Path stroke];


            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);
        }


        //// Group 2
        {
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
            CGContextBeginTransparencyLayer(context, NULL);


            //// Oval 76 Drawing
            UIBezierPath* oval76Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(403, 90, 26, 22)];
            [color10 setFill];
            [oval76Path fill];

            ////// Oval 76 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval76Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval76Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval76Path.lineWidth = 1;
            [oval76Path stroke];


            //// Oval 79 Drawing
            UIBezierPath* oval79Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(403, 103, 26, 20)];
            [color10 setFill];
            [oval79Path fill];

            ////// Oval 79 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval79Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval79Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval79Path.lineWidth = 1;
            [oval79Path stroke];


            //// Oval 80 Drawing
            UIBezierPath* oval80Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(381, 100.5, 26, 20)];
            [color10 setFill];
            [oval80Path fill];

            ////// Oval 80 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval80Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval80Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval80Path.lineWidth = 1;
            [oval80Path stroke];


            //// Oval 81 Drawing
            UIBezierPath* oval81Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(354, 98, 27.5, 17)];
            [color10 setFill];
            [oval81Path fill];

            ////// Oval 81 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval81Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval81Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval81Path.lineWidth = 1;
            [oval81Path stroke];


            //// Oval 82 Drawing
            UIBezierPath* oval82Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(366.5, 96.5, 24, 20)];
            [color10 setFill];
            [oval82Path fill];

            ////// Oval 82 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval82Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval82Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval82Path.lineWidth = 1;
            [oval82Path stroke];


            //// Oval 83 Drawing
            UIBezierPath* oval83Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(384.5, 92, 27, 20)];
            [color10 setFill];
            [oval83Path fill];

            ////// Oval 83 Inner Shadow
            CGContextSaveGState(context);
            UIRectClip(oval83Path.bounds);
            CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

            CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
            CGContextBeginTransparencyLayer(context, NULL);
            {
                UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                CGContextBeginTransparencyLayer(context, NULL);

                [opaqueShadow setFill];
                [oval83Path fill];

                CGContextEndTransparencyLayer(context);
            }
            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);

            [UIColor.blackColor setStroke];
            oval83Path.lineWidth = 1;
            [oval83Path stroke];


            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);
        }
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(35.5, 132.5, 31, 21)];
        [color10 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(59.5, 128.5, 31, 21)];
        [color10 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(13.5, 134, 36, 21)];
        [color10 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-4.5, 135.5, 27, 20)];
        [color10 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 42 Drawing
        UIBezierPath* oval42Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6.5, 146.5, 25, 19)];
        [color10 setFill];
        [oval42Path fill];

        ////// Oval 42 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval42Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval42Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval42Path.lineWidth = 1;
        [oval42Path stroke];


        //// Oval 62 Drawing
        UIBezierPath* oval62Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(66.5, 140.5, 31, 27)];
        [color10 setFill];
        [oval62Path fill];

        ////// Oval 62 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval62Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval62Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval62Path.lineWidth = 1;
        [oval62Path stroke];


        //// Oval 61 Drawing
        UIBezierPath* oval61Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(32.5, 149.5, 33, 21)];
        [color10 setFill];
        [oval61Path fill];

        ////// Oval 61 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval61Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval61Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval61Path.lineWidth = 1;
        [oval61Path stroke];


        //// Oval 48 Drawing
        UIBezierPath* oval48Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(10.5, 144.5, 31, 24)];
        [color10 setFill];
        [oval48Path fill];

        ////// Oval 48 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval48Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval48Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval48Path.lineWidth = 1;
        [oval48Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(49.5, 144.5, 32, 21)];
        [color10 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 11
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 105 Drawing
        UIBezierPath* oval105Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(205.5, 162.5, 29, 22)];
        [color10 setFill];
        [oval105Path fill];

        ////// Oval 105 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval105Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval105Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval105Path.lineWidth = 1;
        [oval105Path stroke];


        //// Oval 108 Drawing
        UIBezierPath* oval108Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(174.5, 154, 35, 24)];
        [color10 setFill];
        [oval108Path fill];

        ////// Oval 108 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval108Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval108Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval108Path.lineWidth = 1;
        [oval108Path stroke];


        //// Oval 109 Drawing
        UIBezierPath* oval109Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(145.5, 166.5, 26, 19)];
        [color10 setFill];
        [oval109Path fill];

        ////// Oval 109 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval109Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval109Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval109Path.lineWidth = 1;
        [oval109Path stroke];


        //// Oval 110 Drawing
        UIBezierPath* oval110Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(157, 164, 31, 22)];
        [color10 setFill];
        [oval110Path fill];

        ////// Oval 110 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval110Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval110Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval110Path.lineWidth = 1;
        [oval110Path stroke];


        //// Oval 111 Drawing
        UIBezierPath* oval111Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(181, 163.5, 34, 22)];
        [color10 setFill];
        [oval111Path fill];

        ////// Oval 111 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval111Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval111Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval111Path.lineWidth = 1;
        [oval111Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 19
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 38 Drawing
        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(239.5, 131, 25, 21)];
        [color10 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];


        //// Oval 205 Drawing
        UIBezierPath* oval205Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(229.5, 136.5, 25, 21)];
        [color10 setFill];
        [oval205Path fill];

        ////// Oval 205 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval205Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval205Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval205Path.lineWidth = 1;
        [oval205Path stroke];


        //// Oval 197 Drawing
        UIBezierPath* oval197Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(221, 145, 24, 21)];
        [color10 setFill];
        [oval197Path fill];

        ////// Oval 197 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval197Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval197Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval197Path.lineWidth = 1;
        [oval197Path stroke];


        //// Oval 200 Drawing
        UIBezierPath* oval200Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(189, 134.5, 33, 23)];
        [color10 setFill];
        [oval200Path fill];

        ////// Oval 200 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval200Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval200Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval200Path.lineWidth = 1;
        [oval200Path stroke];


        //// Oval 201 Drawing
        UIBezierPath* oval201Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(166, 150, 21, 18)];
        [color10 setFill];
        [oval201Path fill];

        ////// Oval 201 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval201Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval201Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval201Path.lineWidth = 1;
        [oval201Path stroke];


        //// Oval 202 Drawing
        UIBezierPath* oval202Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(176.5, 143.5, 29, 23)];
        [color10 setFill];
        [oval202Path fill];

        ////// Oval 202 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval202Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval202Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval202Path.lineWidth = 1;
        [oval202Path stroke];


        //// Oval 203 Drawing
        UIBezierPath* oval203Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(197.5, 143, 30, 23)];
        [color10 setFill];
        [oval203Path fill];

        ////// Oval 203 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval203Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval203Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval203Path.lineWidth = 1;
        [oval203Path stroke];


        //// Oval 204 Drawing
        UIBezierPath* oval204Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(245, 144, 31, 23)];
        [color10 setFill];
        [oval204Path fill];

        ////// Oval 204 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval204Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval204Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval204Path.lineWidth = 1;
        [oval204Path stroke];


        //// Oval 26 Drawing
        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(237.5, 152.5, 24, 15)];
        [color10 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 17
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 19 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -13.1, 71.26);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.46, 21.99)];
        [color3 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];

        CGContextRestoreGState(context);


        //// Oval 138 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 18.4, 75.62);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval138Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.56, 19.04)];
        [color3 setFill];
        [oval138Path fill];

        ////// Oval 138 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval138Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval138Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval138Path.lineWidth = 1;
        [oval138Path stroke];

        CGContextRestoreGState(context);


        //// Oval 184 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 2.66, 67.38);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval184Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.35, 17)];
        [color3 setFill];
        [oval184Path fill];

        ////// Oval 184 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval184Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval184Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval184Path.lineWidth = 1;
        [oval184Path stroke];

        CGContextRestoreGState(context);


        //// Oval 187 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -13.8, 84.05);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval187Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.97, 17.48)];
        [color3 setFill];
        [oval187Path fill];

        ////// Oval 187 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval187Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval187Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval187Path.lineWidth = 1;
        [oval187Path stroke];

        CGContextRestoreGState(context);


        //// Oval 190 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 2.48, 80.76);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval190Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.46, 21.99)];
        [color3 setFill];
        [oval190Path fill];

        ////// Oval 190 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval190Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval190Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval190Path.lineWidth = 1;
        [oval190Path stroke];

        CGContextRestoreGState(context);


        //// Oval 191 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 28.24, 81.55);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval191Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.61, 19.59)];
        [color3 setFill];
        [oval191Path fill];

        ////// Oval 191 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval191Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval191Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval191Path.lineWidth = 1;
        [oval191Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 21
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 220 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -11.56, 47.24);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval220Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.84, 20.46)];
        [color3 setFill];
        [oval220Path fill];

        ////// Oval 220 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval220Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval220Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval220Path.lineWidth = 1;
        [oval220Path stroke];

        CGContextRestoreGState(context);


        //// Oval 225 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 6.35, 48.52);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval225Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 35.69, 29.53)];
        [color3 setFill];
        [oval225Path fill];

        ////// Oval 225 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval225Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval225Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval225Path.lineWidth = 1;
        [oval225Path stroke];

        CGContextRestoreGState(context);


        //// Oval 222 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 48.17, 49.55);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval222Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30, 22.92)];
        [color3 setFill];
        [oval222Path fill];

        ////// Oval 222 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval222Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval222Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval222Path.lineWidth = 1;
        [oval222Path stroke];

        CGContextRestoreGState(context);


        //// Oval 224 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 31.9, 49.25);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval224Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.84, 20.46)];
        [color3 setFill];
        [oval224Path fill];

        ////// Oval 224 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval224Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval224Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval224Path.lineWidth = 1;
        [oval224Path stroke];

        CGContextRestoreGState(context);


        //// Oval 230 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 35.73, 59.72);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval230Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.97, 24.35)];
        [color3 setFill];
        [oval230Path fill];

        ////// Oval 230 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval230Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval230Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval230Path.lineWidth = 1;
        [oval230Path stroke];

        CGContextRestoreGState(context);


        //// Oval 211 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 68.94, 51.14);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval211Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.85, 20.24)];
        [color3 setFill];
        [oval211Path fill];

        ////// Oval 211 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval211Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval211Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval211Path.lineWidth = 1;
        [oval211Path stroke];

        CGContextRestoreGState(context);


        //// Oval 223 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 75.37, 61.03);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval223Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.83, 21.94)];
        [color3 setFill];
        [oval223Path fill];

        ////// Oval 223 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval223Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval223Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval223Path.lineWidth = 1;
        [oval223Path stroke];

        CGContextRestoreGState(context);


        //// Oval 233 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 57.66, 66.15);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval233Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.26, 19.04)];
        [color3 setFill];
        [oval233Path fill];

        ////// Oval 233 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval233Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval233Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval233Path.lineWidth = 1;
        [oval233Path stroke];

        CGContextRestoreGState(context);


        //// Oval 221 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -13.65, 61.67);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval221Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.68, 20.39)];
        [color3 setFill];
        [oval221Path fill];

        ////// Oval 221 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval221Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval221Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval221Path.lineWidth = 1;
        [oval221Path stroke];

        CGContextRestoreGState(context);


        //// Oval 227 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 7.36, 62.01);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval227Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28.43, 21.06)];
        [color3 setFill];
        [oval227Path fill];

        ////// Oval 227 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval227Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval227Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval227Path.lineWidth = 1;
        [oval227Path stroke];

        CGContextRestoreGState(context);


        //// Oval 231 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 20.04, 65.01);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval231Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.26, 19.04)];
        [color3 setFill];
        [oval231Path fill];

        ////// Oval 231 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval231Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval231Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval231Path.lineWidth = 1;
        [oval231Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas37
{
    //// Color Declarations
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* shadow2Color = [UIColor colorWithRed: 1 green: 0.799 blue: 0.229 alpha: 1];

    //// Star 21 Drawing
    UIBezierPath* star21Path = [UIBezierPath bezierPath];
    [star21Path moveToPoint: CGPointMake(85, 53)];
    [star21Path addLineToPoint: CGPointMake(87.82, 57.12)];
    [star21Path addLineToPoint: CGPointMake(92.61, 58.53)];
    [star21Path addLineToPoint: CGPointMake(89.57, 62.48)];
    [star21Path addLineToPoint: CGPointMake(89.7, 67.47)];
    [star21Path addLineToPoint: CGPointMake(85, 65.8)];
    [star21Path addLineToPoint: CGPointMake(80.3, 67.47)];
    [star21Path addLineToPoint: CGPointMake(80.43, 62.48)];
    [star21Path addLineToPoint: CGPointMake(77.39, 58.53)];
    [star21Path addLineToPoint: CGPointMake(82.18, 57.12)];
    [star21Path closePath];
    [color11 setFill];
    [star21Path fill];
    [shadow2Color setStroke];
    star21Path.lineWidth = 1;
    [star21Path stroke];


    //// Star 23 Drawing
    UIBezierPath* star23Path = [UIBezierPath bezierPath];
    [star23Path moveToPoint: CGPointMake(129.5, 72.5)];
    [star23Path addLineToPoint: CGPointMake(131.97, 76.1)];
    [star23Path addLineToPoint: CGPointMake(136.16, 77.34)];
    [star23Path addLineToPoint: CGPointMake(133.49, 80.8)];
    [star23Path addLineToPoint: CGPointMake(133.61, 85.16)];
    [star23Path addLineToPoint: CGPointMake(129.5, 83.7)];
    [star23Path addLineToPoint: CGPointMake(125.39, 85.16)];
    [star23Path addLineToPoint: CGPointMake(125.51, 80.8)];
    [star23Path addLineToPoint: CGPointMake(122.84, 77.34)];
    [star23Path addLineToPoint: CGPointMake(127.03, 76.1)];
    [star23Path closePath];
    [color11 setFill];
    [star23Path fill];
    [shadow2Color setStroke];
    star23Path.lineWidth = 1;
    [star23Path stroke];


    //// Star 24 Drawing
    UIBezierPath* star24Path = [UIBezierPath bezierPath];
    [star24Path moveToPoint: CGPointMake(129.5, 31.5)];
    [star24Path addLineToPoint: CGPointMake(132.32, 35.62)];
    [star24Path addLineToPoint: CGPointMake(137.11, 37.03)];
    [star24Path addLineToPoint: CGPointMake(134.07, 40.98)];
    [star24Path addLineToPoint: CGPointMake(134.2, 45.97)];
    [star24Path addLineToPoint: CGPointMake(129.5, 44.3)];
    [star24Path addLineToPoint: CGPointMake(124.8, 45.97)];
    [star24Path addLineToPoint: CGPointMake(124.93, 40.98)];
    [star24Path addLineToPoint: CGPointMake(121.89, 37.03)];
    [star24Path addLineToPoint: CGPointMake(126.68, 35.62)];
    [star24Path closePath];
    [color11 setFill];
    [star24Path fill];
    [shadow2Color setStroke];
    star24Path.lineWidth = 1;
    [star24Path stroke];


    //// Star 25 Drawing
    UIBezierPath* star25Path = [UIBezierPath bezierPath];
    [star25Path moveToPoint: CGPointMake(170.5, 34.5)];
    [star25Path addLineToPoint: CGPointMake(172.26, 37.07)];
    [star25Path addLineToPoint: CGPointMake(175.26, 37.95)];
    [star25Path addLineToPoint: CGPointMake(173.35, 40.43)];
    [star25Path addLineToPoint: CGPointMake(173.44, 43.55)];
    [star25Path addLineToPoint: CGPointMake(170.5, 42.5)];
    [star25Path addLineToPoint: CGPointMake(167.56, 43.55)];
    [star25Path addLineToPoint: CGPointMake(167.65, 40.43)];
    [star25Path addLineToPoint: CGPointMake(165.74, 37.95)];
    [star25Path addLineToPoint: CGPointMake(168.74, 37.07)];
    [star25Path closePath];
    [color11 setFill];
    [star25Path fill];
    [shadow2Color setStroke];
    star25Path.lineWidth = 1;
    [star25Path stroke];


    //// Star 26 Drawing
    UIBezierPath* star26Path = [UIBezierPath bezierPath];
    [star26Path moveToPoint: CGPointMake(182.5, 131.5)];
    [star26Path addLineToPoint: CGPointMake(185.32, 135.62)];
    [star26Path addLineToPoint: CGPointMake(190.11, 137.03)];
    [star26Path addLineToPoint: CGPointMake(187.07, 140.98)];
    [star26Path addLineToPoint: CGPointMake(187.2, 145.97)];
    [star26Path addLineToPoint: CGPointMake(182.5, 144.3)];
    [star26Path addLineToPoint: CGPointMake(177.8, 145.97)];
    [star26Path addLineToPoint: CGPointMake(177.93, 140.98)];
    [star26Path addLineToPoint: CGPointMake(174.89, 137.03)];
    [star26Path addLineToPoint: CGPointMake(179.68, 135.62)];
    [star26Path closePath];
    [color11 setFill];
    [star26Path fill];
    [shadow2Color setStroke];
    star26Path.lineWidth = 1;
    [star26Path stroke];


    //// Star 27 Drawing
    UIBezierPath* star27Path = [UIBezierPath bezierPath];
    [star27Path moveToPoint: CGPointMake(129.5, 118.5)];
    [star27Path addLineToPoint: CGPointMake(131.97, 122.1)];
    [star27Path addLineToPoint: CGPointMake(136.16, 123.34)];
    [star27Path addLineToPoint: CGPointMake(133.49, 126.8)];
    [star27Path addLineToPoint: CGPointMake(133.61, 131.16)];
    [star27Path addLineToPoint: CGPointMake(129.5, 129.7)];
    [star27Path addLineToPoint: CGPointMake(125.39, 131.16)];
    [star27Path addLineToPoint: CGPointMake(125.51, 126.8)];
    [star27Path addLineToPoint: CGPointMake(122.84, 123.34)];
    [star27Path addLineToPoint: CGPointMake(127.03, 122.1)];
    [star27Path closePath];
    [color11 setFill];
    [star27Path fill];
    [shadow2Color setStroke];
    star27Path.lineWidth = 1;
    [star27Path stroke];


    //// Star 30 Drawing
    UIBezierPath* star30Path = [UIBezierPath bezierPath];
    [star30Path moveToPoint: CGPointMake(50.5, 95)];
    [star30Path addLineToPoint: CGPointMake(53.32, 99.12)];
    [star30Path addLineToPoint: CGPointMake(58.11, 100.53)];
    [star30Path addLineToPoint: CGPointMake(55.07, 104.48)];
    [star30Path addLineToPoint: CGPointMake(55.2, 109.47)];
    [star30Path addLineToPoint: CGPointMake(50.5, 107.8)];
    [star30Path addLineToPoint: CGPointMake(45.8, 109.47)];
    [star30Path addLineToPoint: CGPointMake(45.93, 104.48)];
    [star30Path addLineToPoint: CGPointMake(42.89, 100.53)];
    [star30Path addLineToPoint: CGPointMake(47.68, 99.12)];
    [star30Path closePath];
    [color11 setFill];
    [star30Path fill];
    [shadow2Color setStroke];
    star30Path.lineWidth = 1;
    [star30Path stroke];


    //// Star 32 Drawing
    UIBezierPath* star32Path = [UIBezierPath bezierPath];
    [star32Path moveToPoint: CGPointMake(74.5, 154.5)];
    [star32Path addLineToPoint: CGPointMake(78.38, 160.16)];
    [star32Path addLineToPoint: CGPointMake(84.96, 162.1)];
    [star32Path addLineToPoint: CGPointMake(80.78, 167.54)];
    [star32Path addLineToPoint: CGPointMake(80.97, 174.4)];
    [star32Path addLineToPoint: CGPointMake(74.5, 172.1)];
    [star32Path addLineToPoint: CGPointMake(68.03, 174.4)];
    [star32Path addLineToPoint: CGPointMake(68.22, 167.54)];
    [star32Path addLineToPoint: CGPointMake(64.04, 162.1)];
    [star32Path addLineToPoint: CGPointMake(70.62, 160.16)];
    [star32Path closePath];
    [color11 setFill];
    [star32Path fill];
    [shadow2Color setStroke];
    star32Path.lineWidth = 1;
    [star32Path stroke];


    //// Star 33 Drawing
    UIBezierPath* star33Path = [UIBezierPath bezierPath];
    [star33Path moveToPoint: CGPointMake(107, 80)];
    [star33Path addLineToPoint: CGPointMake(108.06, 81.54)];
    [star33Path addLineToPoint: CGPointMake(109.85, 82.07)];
    [star33Path addLineToPoint: CGPointMake(108.71, 83.56)];
    [star33Path addLineToPoint: CGPointMake(108.76, 85.43)];
    [star33Path addLineToPoint: CGPointMake(107, 84.8)];
    [star33Path addLineToPoint: CGPointMake(105.24, 85.43)];
    [star33Path addLineToPoint: CGPointMake(105.29, 83.56)];
    [star33Path addLineToPoint: CGPointMake(104.15, 82.07)];
    [star33Path addLineToPoint: CGPointMake(105.94, 81.54)];
    [star33Path closePath];
    [color11 setFill];
    [star33Path fill];
    [shadow2Color setStroke];
    star33Path.lineWidth = 1;
    [star33Path stroke];


    //// Star 34 Drawing
    UIBezierPath* star34Path = [UIBezierPath bezierPath];
    [star34Path moveToPoint: CGPointMake(116, 74)];
    [star34Path addLineToPoint: CGPointMake(117.06, 75.54)];
    [star34Path addLineToPoint: CGPointMake(118.85, 76.07)];
    [star34Path addLineToPoint: CGPointMake(117.71, 77.56)];
    [star34Path addLineToPoint: CGPointMake(117.76, 79.43)];
    [star34Path addLineToPoint: CGPointMake(116, 78.8)];
    [star34Path addLineToPoint: CGPointMake(114.24, 79.43)];
    [star34Path addLineToPoint: CGPointMake(114.29, 77.56)];
    [star34Path addLineToPoint: CGPointMake(113.15, 76.07)];
    [star34Path addLineToPoint: CGPointMake(114.94, 75.54)];
    [star34Path closePath];
    [color11 setFill];
    [star34Path fill];
    [shadow2Color setStroke];
    star34Path.lineWidth = 1;
    [star34Path stroke];


    //// Star Drawing
    UIBezierPath* starPath = [UIBezierPath bezierPath];
    [starPath moveToPoint: CGPointMake(229.5, 49.5)];
    [starPath addLineToPoint: CGPointMake(231.97, 53.1)];
    [starPath addLineToPoint: CGPointMake(236.16, 54.34)];
    [starPath addLineToPoint: CGPointMake(233.49, 57.8)];
    [starPath addLineToPoint: CGPointMake(233.61, 62.16)];
    [starPath addLineToPoint: CGPointMake(229.5, 60.7)];
    [starPath addLineToPoint: CGPointMake(225.39, 62.16)];
    [starPath addLineToPoint: CGPointMake(225.51, 57.8)];
    [starPath addLineToPoint: CGPointMake(222.84, 54.34)];
    [starPath addLineToPoint: CGPointMake(227.03, 53.1)];
    [starPath closePath];
    [color11 setFill];
    [starPath fill];
    [shadow2Color setStroke];
    starPath.lineWidth = 1;
    [starPath stroke];


    //// Group
    {
        //// Star 2 Drawing
        UIBezierPath* star2Path = [UIBezierPath bezierPath];
        [star2Path moveToPoint: CGPointMake(369.5, 83)];
        [star2Path addLineToPoint: CGPointMake(372.32, 87.12)];
        [star2Path addLineToPoint: CGPointMake(377.11, 88.53)];
        [star2Path addLineToPoint: CGPointMake(374.07, 92.48)];
        [star2Path addLineToPoint: CGPointMake(374.2, 97.47)];
        [star2Path addLineToPoint: CGPointMake(369.5, 95.8)];
        [star2Path addLineToPoint: CGPointMake(364.8, 97.47)];
        [star2Path addLineToPoint: CGPointMake(364.93, 92.48)];
        [star2Path addLineToPoint: CGPointMake(361.89, 88.53)];
        [star2Path addLineToPoint: CGPointMake(366.68, 87.12)];
        [star2Path closePath];
        [color11 setFill];
        [star2Path fill];
        [shadow2Color setStroke];
        star2Path.lineWidth = 1;
        [star2Path stroke];


        //// Star 3 Drawing
        UIBezierPath* star3Path = [UIBezierPath bezierPath];
        [star3Path moveToPoint: CGPointMake(347.5, 21)];
        [star3Path addLineToPoint: CGPointMake(350.67, 25.63)];
        [star3Path addLineToPoint: CGPointMake(356.06, 27.22)];
        [star3Path addLineToPoint: CGPointMake(352.64, 31.67)];
        [star3Path addLineToPoint: CGPointMake(352.79, 37.28)];
        [star3Path addLineToPoint: CGPointMake(347.5, 35.4)];
        [star3Path addLineToPoint: CGPointMake(342.21, 37.28)];
        [star3Path addLineToPoint: CGPointMake(342.36, 31.67)];
        [star3Path addLineToPoint: CGPointMake(338.94, 27.22)];
        [star3Path addLineToPoint: CGPointMake(344.33, 25.63)];
        [star3Path closePath];
        [color11 setFill];
        [star3Path fill];
        [shadow2Color setStroke];
        star3Path.lineWidth = 1;
        [star3Path stroke];


        //// Star 4 Drawing
        UIBezierPath* star4Path = [UIBezierPath bezierPath];
        [star4Path moveToPoint: CGPointMake(405, 34.5)];
        [star4Path addLineToPoint: CGPointMake(407.82, 38.62)];
        [star4Path addLineToPoint: CGPointMake(412.61, 40.03)];
        [star4Path addLineToPoint: CGPointMake(409.57, 43.98)];
        [star4Path addLineToPoint: CGPointMake(409.7, 48.97)];
        [star4Path addLineToPoint: CGPointMake(405, 47.3)];
        [star4Path addLineToPoint: CGPointMake(400.3, 48.97)];
        [star4Path addLineToPoint: CGPointMake(400.43, 43.98)];
        [star4Path addLineToPoint: CGPointMake(397.39, 40.03)];
        [star4Path addLineToPoint: CGPointMake(402.18, 38.62)];
        [star4Path closePath];
        [color11 setFill];
        [star4Path fill];
        [shadow2Color setStroke];
        star4Path.lineWidth = 1;
        [star4Path stroke];


        //// Star 5 Drawing
        UIBezierPath* star5Path = [UIBezierPath bezierPath];
        [star5Path moveToPoint: CGPointMake(386.5, 66)];
        [star5Path addLineToPoint: CGPointMake(388.26, 68.57)];
        [star5Path addLineToPoint: CGPointMake(391.26, 69.45)];
        [star5Path addLineToPoint: CGPointMake(389.35, 71.93)];
        [star5Path addLineToPoint: CGPointMake(389.44, 75.05)];
        [star5Path addLineToPoint: CGPointMake(386.5, 74)];
        [star5Path addLineToPoint: CGPointMake(383.56, 75.05)];
        [star5Path addLineToPoint: CGPointMake(383.65, 71.93)];
        [star5Path addLineToPoint: CGPointMake(381.74, 69.45)];
        [star5Path addLineToPoint: CGPointMake(384.74, 68.57)];
        [star5Path closePath];
        [color11 setFill];
        [star5Path fill];
        [shadow2Color setStroke];
        star5Path.lineWidth = 1;
        [star5Path stroke];


        //// Star 8 Drawing
        UIBezierPath* star8Path = [UIBezierPath bezierPath];
        [star8Path moveToPoint: CGPointMake(295.5, 116.5)];
        [star8Path addLineToPoint: CGPointMake(298.32, 120.62)];
        [star8Path addLineToPoint: CGPointMake(303.11, 122.03)];
        [star8Path addLineToPoint: CGPointMake(300.07, 125.98)];
        [star8Path addLineToPoint: CGPointMake(300.2, 130.97)];
        [star8Path addLineToPoint: CGPointMake(295.5, 129.3)];
        [star8Path addLineToPoint: CGPointMake(290.8, 130.97)];
        [star8Path addLineToPoint: CGPointMake(290.93, 125.98)];
        [star8Path addLineToPoint: CGPointMake(287.89, 122.03)];
        [star8Path addLineToPoint: CGPointMake(292.68, 120.62)];
        [star8Path closePath];
        [color11 setFill];
        [star8Path fill];
        [shadow2Color setStroke];
        star8Path.lineWidth = 1;
        [star8Path stroke];


        //// Star 9 Drawing
        UIBezierPath* star9Path = [UIBezierPath bezierPath];
        [star9Path moveToPoint: CGPointMake(307.5, 53)];
        [star9Path addLineToPoint: CGPointMake(309.26, 55.57)];
        [star9Path addLineToPoint: CGPointMake(312.26, 56.45)];
        [star9Path addLineToPoint: CGPointMake(310.35, 58.93)];
        [star9Path addLineToPoint: CGPointMake(310.44, 62.05)];
        [star9Path addLineToPoint: CGPointMake(307.5, 61)];
        [star9Path addLineToPoint: CGPointMake(304.56, 62.05)];
        [star9Path addLineToPoint: CGPointMake(304.65, 58.93)];
        [star9Path addLineToPoint: CGPointMake(302.74, 56.45)];
        [star9Path addLineToPoint: CGPointMake(305.74, 55.57)];
        [star9Path closePath];
        [color11 setFill];
        [star9Path fill];
        [shadow2Color setStroke];
        star9Path.lineWidth = 1;
        [star9Path stroke];
    }


    //// Star 10 Drawing
    UIBezierPath* star10Path = [UIBezierPath bezierPath];
    [star10Path moveToPoint: CGPointMake(97, 11.5)];
    [star10Path addLineToPoint: CGPointMake(99.12, 14.59)];
    [star10Path addLineToPoint: CGPointMake(102.71, 15.65)];
    [star10Path addLineToPoint: CGPointMake(100.42, 18.61)];
    [star10Path addLineToPoint: CGPointMake(100.53, 22.35)];
    [star10Path addLineToPoint: CGPointMake(97, 21.1)];
    [star10Path addLineToPoint: CGPointMake(93.47, 22.35)];
    [star10Path addLineToPoint: CGPointMake(93.58, 18.61)];
    [star10Path addLineToPoint: CGPointMake(91.29, 15.65)];
    [star10Path addLineToPoint: CGPointMake(94.88, 14.59)];
    [star10Path closePath];
    [color11 setFill];
    [star10Path fill];
    [shadow2Color setStroke];
    star10Path.lineWidth = 1;
    [star10Path stroke];


    //// Star 11 Drawing
    UIBezierPath* star11Path = [UIBezierPath bezierPath];
    [star11Path moveToPoint: CGPointMake(267, 10.5)];
    [star11Path addLineToPoint: CGPointMake(269.82, 14.62)];
    [star11Path addLineToPoint: CGPointMake(274.61, 16.03)];
    [star11Path addLineToPoint: CGPointMake(271.57, 19.98)];
    [star11Path addLineToPoint: CGPointMake(271.7, 24.97)];
    [star11Path addLineToPoint: CGPointMake(267, 23.3)];
    [star11Path addLineToPoint: CGPointMake(262.3, 24.97)];
    [star11Path addLineToPoint: CGPointMake(262.43, 19.98)];
    [star11Path addLineToPoint: CGPointMake(259.39, 16.03)];
    [star11Path addLineToPoint: CGPointMake(264.18, 14.62)];
    [star11Path closePath];
    [color11 setFill];
    [star11Path fill];
    [shadow2Color setStroke];
    star11Path.lineWidth = 1;
    [star11Path stroke];


    //// Star 12 Drawing
    UIBezierPath* star12Path = [UIBezierPath bezierPath];
    [star12Path moveToPoint: CGPointMake(4.5, 117)];
    [star12Path addLineToPoint: CGPointMake(6.62, 120.09)];
    [star12Path addLineToPoint: CGPointMake(10.21, 121.15)];
    [star12Path addLineToPoint: CGPointMake(7.92, 124.11)];
    [star12Path addLineToPoint: CGPointMake(8.03, 127.85)];
    [star12Path addLineToPoint: CGPointMake(4.5, 126.6)];
    [star12Path addLineToPoint: CGPointMake(0.97, 127.85)];
    [star12Path addLineToPoint: CGPointMake(1.08, 124.11)];
    [star12Path addLineToPoint: CGPointMake(-1.21, 121.15)];
    [star12Path addLineToPoint: CGPointMake(2.38, 120.09)];
    [star12Path closePath];
    [color11 setFill];
    [star12Path fill];
    [shadow2Color setStroke];
    star12Path.lineWidth = 1;
    [star12Path stroke];
}

+ (void)drawCanvas38
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* moonGradientColor = [UIColor colorWithRed: 1 green: 0.945 blue: 0.698 alpha: 1];
    UIColor* moonGradientColor2 = [UIColor colorWithRed: 0.538 green: 0.507 blue: 0.337 alpha: 1];
    UIColor* darkSideMoonGradientColor = [UIColor colorWithRed: 0.723 green: 0.715 blue: 0.715 alpha: 1];
    UIColor* darkSideMoonGradientColor2 = [UIColor colorWithRed: 0.189 green: 0.184 blue: 0.184 alpha: 1];
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* innerMoonShadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Gradient Declarations
    CGFloat lightSideMoonGradientLocations[] = {0, 0.77, 1};
    CGGradientRef lightSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)moonGradientColor.CGColor, (id)[moonGradientColor blendedColorWithFraction: 0.5 ofColor: moonGradientColor2].CGColor, (id)moonGradientColor2.CGColor], lightSideMoonGradientLocations);
    CGFloat darkSideMoonGradientLocations[] = {0, 0.55, 1};
    CGGradientRef darkSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)darkSideMoonGradientColor.CGColor, (id)[darkSideMoonGradientColor blendedColorWithFraction: 0.5 ofColor: darkSideMoonGradientColor2].CGColor, (id)darkSideMoonGradientColor2.CGColor], darkSideMoonGradientLocations);

    //// Shadow Declarations
    NSShadow* moonFrontShadow = [[NSShadow alloc] init];
    [moonFrontShadow setShadowColor: [moonFrontShadowColor colorWithAlphaComponent: CGColorGetAlpha(moonFrontShadowColor.CGColor) * 0.17]];
    [moonFrontShadow setShadowOffset: CGSizeMake(-33.1, 66.1)];
    [moonFrontShadow setShadowBlurRadius: 57];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];
    NSShadow* innerMoonLightSideShadow = [[NSShadow alloc] init];
    [innerMoonLightSideShadow setShadowColor: [innerMoonShadowColor colorWithAlphaComponent: CGColorGetAlpha(innerMoonShadowColor.CGColor) * 0.5]];
    [innerMoonLightSideShadow setShadowOffset: CGSizeMake(-1.1, -1.1)];
    [innerMoonLightSideShadow setShadowBlurRadius: 2];
    NSShadow* innerMoonDarksideShadow = [[NSShadow alloc] init];
    [innerMoonDarksideShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.43]];
    [innerMoonDarksideShadow setShadowOffset: CGSizeMake(-9.1, 1.1)];
    [innerMoonDarksideShadow setShadowBlurRadius: 10];

    //// Oval 54 Drawing
    UIBezierPath* oval54Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(244.5, 23, 133, 135)];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, moonFrontShadow.shadowOffset, moonFrontShadow.shadowBlurRadius, [moonFrontShadow.shadowColor CGColor]);
    CGContextBeginTransparencyLayer(context, NULL);
    [oval54Path addClip];
    CGContextDrawLinearGradient(context, darkSideMoonGradient, CGPointMake(311, 23), CGPointMake(311, 158), 0);
    CGContextEndTransparencyLayer(context);

    ////// Oval 54 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(oval54Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([innerMoonDarksideShadow.shadowColor CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [innerMoonDarksideShadow.shadowColor colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, innerMoonDarksideShadow.shadowOffset, innerMoonDarksideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [oval54Path fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    CGContextRestoreGState(context);

    [color setStroke];
    oval54Path.lineWidth = 1;
    [oval54Path stroke];


    //// Oval 58 Drawing
    UIBezierPath* oval58Path = [UIBezierPath bezierPath];
    [oval58Path moveToPoint: CGPointMake(293, 56.5)];
    [oval58Path addCurveToPoint: CGPointMake(289.15, 74.03) controlPoint1: CGPointMake(294.89, 59.43) controlPoint2: CGPointMake(291.33, 66.89)];
    [oval58Path addCurveToPoint: CGPointMake(293, 89.5) controlPoint1: CGPointMake(287.03, 80.97) controlPoint2: CGPointMake(287.39, 84.69)];
    [oval58Path addCurveToPoint: CGPointMake(285.5, 99.5) controlPoint1: CGPointMake(296.5, 92.5) controlPoint2: CGPointMake(286.64, 97.61)];
    [oval58Path addCurveToPoint: CGPointMake(281, 118.5) controlPoint1: CGPointMake(282.5, 104.5) controlPoint2: CGPointMake(281, 110.63)];
    [oval58Path addCurveToPoint: CGPointMake(311.5, 157.5) controlPoint1: CGPointMake(281, 155.78) controlPoint2: CGPointMake(348.78, 157.5)];
    [oval58Path addCurveToPoint: CGPointMake(244, 90) controlPoint1: CGPointMake(274.22, 157.5) controlPoint2: CGPointMake(244, 127.28)];
    [oval58Path addCurveToPoint: CGPointMake(311.5, 22.5) controlPoint1: CGPointMake(244, 52.72) controlPoint2: CGPointMake(274.22, 22.5)];
    [oval58Path addCurveToPoint: CGPointMake(293, 56.5) controlPoint1: CGPointMake(328.25, 22.5) controlPoint2: CGPointMake(286.54, 46.51)];
    [oval58Path closePath];
    CGContextSaveGState(context);
    [oval58Path addClip];
    CGContextDrawLinearGradient(context, lightSideMoonGradient, CGPointMake(283.35, 22.5), CGPointMake(283.35, 157.5), 0);
    CGContextRestoreGState(context);

    ////// Oval 58 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(oval58Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([innerMoonLightSideShadow.shadowColor CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [innerMoonLightSideShadow.shadowColor colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, innerMoonLightSideShadow.shadowOffset, innerMoonLightSideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [oval58Path fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [color setStroke];
    oval58Path.lineWidth = 1;
    [oval58Path stroke];


    //// Group 5
    {
        //// Oval 55 Drawing
        UIBezierPath* oval55Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(309, 63.5, 14, 20)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
        [UIColor.whiteColor setFill];
        [oval55Path fill];
        CGContextRestoreGState(context);

        [color setStroke];
        oval55Path.lineWidth = 1;
        [oval55Path stroke];


        //// Oval 56 Drawing
        UIBezierPath* oval56Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(296, 60.5, 13.5, 23)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
        [UIColor.whiteColor setFill];
        [oval56Path fill];
        CGContextRestoreGState(context);

        [color setStroke];
        oval56Path.lineWidth = 1;
        [oval56Path stroke];


        //// Oval 57 Drawing
        UIBezierPath* oval57Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(296.5, 67.5, 3.5, 8.5)];
        [UIColor.blackColor setFill];
        [oval57Path fill];
        [color setStroke];
        oval57Path.lineWidth = 1;
        [oval57Path stroke];


        //// Bezier 16 Drawing
        UIBezierPath* bezier16Path = [UIBezierPath bezierPath];
        [UIColor.blackColor setStroke];
        bezier16Path.lineWidth = 1;
        [bezier16Path stroke];


        //// Bezier 17 Drawing
        UIBezierPath* bezier17Path = [UIBezierPath bezierPath];
        [UIColor.darkGrayColor setFill];
        [bezier17Path fill];
        [color setStroke];
        bezier17Path.lineWidth = 1;
        [bezier17Path stroke];


        //// Oval 59 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 270.95, 65.99);
        CGContextRotateCTM(context, 11.2 * M_PI / 180);

        UIBezierPath* oval59Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-5.75, -4.02, 11.5, 8.04)];
        [UIColor.whiteColor setFill];
        [oval59Path fill];
        [UIColor.darkGrayColor setStroke];
        oval59Path.lineWidth = 1;
        [oval59Path stroke];

        CGContextRestoreGState(context);


        //// Oval 63 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 284.06, 72.1);
        CGContextRotateCTM(context, 10.56 * M_PI / 180);

        UIBezierPath* oval63Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6.56, -6.24, 8.23, 6.85)];
        [UIColor.whiteColor setFill];
        [oval63Path fill];
        [UIColor.darkGrayColor setStroke];
        oval63Path.lineWidth = 1;
        [oval63Path stroke];

        CGContextRestoreGState(context);


        //// Bezier 18 Drawing
        UIBezierPath* bezier18Path = [UIBezierPath bezierPath];
        [color11 setFill];
        [bezier18Path fill];
        [UIColor.darkGrayColor setStroke];
        bezier18Path.lineWidth = 1;
        [bezier18Path stroke];


        //// Bezier 19 Drawing
        UIBezierPath* bezier19Path = [UIBezierPath bezierPath];
        [UIColor.darkGrayColor setStroke];
        bezier19Path.lineWidth = 1;
        [bezier19Path stroke];


        //// Bezier 20 Drawing
        UIBezierPath* bezier20Path = [UIBezierPath bezierPath];
        [UIColor.darkGrayColor setStroke];
        bezier20Path.lineWidth = 1;
        [bezier20Path stroke];


        //// Oval 64 Drawing
        UIBezierPath* oval64Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(273, 64.5, 4, 4)];
        [color setFill];
        [oval64Path fill];


        //// Oval 66 Drawing
        UIBezierPath* oval66Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(283, 67, 3.5, 4)];
        [color setFill];
        [oval66Path fill];


        //// Bezier 21 Drawing
        UIBezierPath* bezier21Path = [UIBezierPath bezierPath];
        [bezier21Path moveToPoint: CGPointMake(279.5, 125)];
        [bezier21Path addCurveToPoint: CGPointMake(279.51, 119.11) controlPoint1: CGPointMake(283.37, 122.51) controlPoint2: CGPointMake(281.64, 117.5)];
        [bezier21Path addCurveToPoint: CGPointMake(261, 112) controlPoint1: CGPointMake(274.35, 123.02) controlPoint2: CGPointMake(261, 112)];
        [bezier21Path addCurveToPoint: CGPointMake(279.5, 125) controlPoint1: CGPointMake(261, 112) controlPoint2: CGPointMake(273.98, 128.55)];
        [bezier21Path closePath];
        [UIColor.whiteColor setFill];
        [bezier21Path fill];
        [color setStroke];
        bezier21Path.lineWidth = 1;
        [bezier21Path stroke];


        //// Bezier 22 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 310.6, 118.87);
        CGContextRotateCTM(context, -9.13 * M_PI / 180);

        UIBezierPath* bezier22Path = [UIBezierPath bezierPath];
        [bezier22Path moveToPoint: CGPointMake(-14.49, -6.25)];
        [bezier22Path addCurveToPoint: CGPointMake(18.65, -6.25) controlPoint1: CGPointMake(-1.66, 10.32) controlPoint2: CGPointMake(18.65, -6.25)];
        [bezier22Path addLineToPoint: CGPointMake(1.69, 11.16)];
        [bezier22Path addLineToPoint: CGPointMake(-6.34, 7.76)];
        [bezier22Path addCurveToPoint: CGPointMake(-14.49, -6.25) controlPoint1: CGPointMake(-6.34, 7.76) controlPoint2: CGPointMake(-27.32, -22.81)];
        [bezier22Path closePath];
        [UIColor.whiteColor setFill];
        [bezier22Path fill];
        [UIColor.blackColor setStroke];
        bezier22Path.lineWidth = 1;
        [bezier22Path stroke];

        CGContextRestoreGState(context);


        //// Oval 67 Drawing
        UIBezierPath* oval67Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(309.5, 69.5, 3.5, 8.5)];
        [UIColor.blackColor setFill];
        [oval67Path fill];
        [color setStroke];
        oval67Path.lineWidth = 1;
        [oval67Path stroke];
    }


    //// Cleanup
    CGGradientRelease(lightSideMoonGradient);
    CGGradientRelease(darkSideMoonGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas39
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* fogColor = [UIColor colorWithRed: 0.306 green: 0.314 blue: 0.408 alpha: 0.352];

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];

    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPath];
        [oval10Path moveToPoint: CGPointMake(467.4, 677.59)];
        [oval10Path addCurveToPoint: CGPointMake(414.12, 716.45) controlPoint1: CGPointMake(467.4, 712.44) controlPoint2: CGPointMake(459.9, 716.45)];
        [oval10Path addCurveToPoint: CGPointMake(339.34, 692.02) controlPoint1: CGPointMake(368.34, 716.45) controlPoint2: CGPointMake(339.34, 726.87)];
        [oval10Path addCurveToPoint: CGPointMake(356.68, 648.36) controlPoint1: CGPointMake(339.34, 670.55) controlPoint2: CGPointMake(339.1, 677.99)];
        [oval10Path addCurveToPoint: CGPointMake(414.12, 625.11) controlPoint1: CGPointMake(367.65, 629.87) controlPoint2: CGPointMake(396.53, 625.11)];
        [oval10Path addCurveToPoint: CGPointMake(467.4, 677.59) controlPoint1: CGPointMake(459.9, 625.11) controlPoint2: CGPointMake(467.4, 642.73)];
        [oval10Path closePath];
        [fogColor setFill];
        [oval10Path fill];


        //// Oval 28 Drawing
        UIBezierPath* oval28Path = [UIBezierPath bezierPath];
        [oval28Path moveToPoint: CGPointMake(287.66, 735.09)];
        [oval28Path addCurveToPoint: CGPointMake(380.07, 756.88) controlPoint1: CGPointMake(287.66, 753.75) controlPoint2: CGPointMake(321.59, 756.88)];
        [oval28Path addCurveToPoint: CGPointMake(469.72, 735.09) controlPoint1: CGPointMake(438.55, 756.88) controlPoint2: CGPointMake(469.72, 753.75)];
        [oval28Path addCurveToPoint: CGPointMake(408.89, 708.96) controlPoint1: CGPointMake(469.72, 723.6) controlPoint2: CGPointMake(431.35, 724.82)];
        [oval28Path addCurveToPoint: CGPointMake(380.55, 675.21) controlPoint1: CGPointMake(394.87, 699.06) controlPoint2: CGPointMake(403.02, 675.21)];
        [oval28Path addCurveToPoint: CGPointMake(287.66, 735.09) controlPoint1: CGPointMake(322.07, 675.21) controlPoint2: CGPointMake(287.66, 716.42)];
        [oval28Path closePath];
        [fogColor setFill];
        [oval28Path fill];


        //// Oval 30 Drawing
        UIBezierPath* oval30Path = [UIBezierPath bezierPath];
        [oval30Path moveToPoint: CGPointMake(148.39, 694.08)];
        [oval30Path addCurveToPoint: CGPointMake(246.45, 694.49) controlPoint1: CGPointMake(148.39, 720.41) controlPoint2: CGPointMake(185.02, 694.49)];
        [oval30Path addCurveToPoint: CGPointMake(364.51, 671.49) controlPoint1: CGPointMake(307.88, 694.49) controlPoint2: CGPointMake(364.51, 697.82)];
        [oval30Path addCurveToPoint: CGPointMake(323.53, 643.05) controlPoint1: CGPointMake(364.51, 655.28) controlPoint2: CGPointMake(347.12, 665.44)];
        [oval30Path addCurveToPoint: CGPointMake(246.45, 625.49) controlPoint1: CGPointMake(308.81, 629.09) controlPoint2: CGPointMake(270.05, 625.49)];
        [oval30Path addCurveToPoint: CGPointMake(148.39, 694.08) controlPoint1: CGPointMake(185.02, 625.49) controlPoint2: CGPointMake(148.39, 667.75)];
        [oval30Path closePath];
        [fogColor setFill];
        [oval30Path fill];


        //// Oval 32 Drawing
        UIBezierPath* oval32Path = [UIBezierPath bezierPath];
        [oval32Path moveToPoint: CGPointMake(2, 724.37)];
        [oval32Path addCurveToPoint: CGPointMake(53.67, 752.28) controlPoint1: CGPointMake(2, 749.4) controlPoint2: CGPointMake(9.27, 752.28)];
        [oval32Path addCurveToPoint: CGPointMake(126.21, 734.73) controlPoint1: CGPointMake(98.08, 752.28) controlPoint2: CGPointMake(126.21, 759.76)];
        [oval32Path addCurveToPoint: CGPointMake(109.39, 703.38) controlPoint1: CGPointMake(126.21, 719.32) controlPoint2: CGPointMake(126.44, 724.66)];
        [oval32Path addCurveToPoint: CGPointMake(53.67, 686.68) controlPoint1: CGPointMake(98.75, 690.1) controlPoint2: CGPointMake(70.74, 686.68)];
        [oval32Path addCurveToPoint: CGPointMake(2, 724.37) controlPoint1: CGPointMake(9.27, 686.68) controlPoint2: CGPointMake(2, 699.34)];
        [oval32Path closePath];
        [fogColor setFill];
        [oval32Path fill];


        //// Oval 33 Drawing
        UIBezierPath* oval33Path = [UIBezierPath bezierPath];
        [oval33Path moveToPoint: CGPointMake(5.47, 656.86)];
        [oval33Path addCurveToPoint: CGPointMake(52.17, 699.35) controlPoint1: CGPointMake(5.47, 678.85) controlPoint2: CGPointMake(12.03, 699.35)];
        [oval33Path addCurveToPoint: CGPointMake(122.72, 666.96) controlPoint1: CGPointMake(92.31, 699.35) controlPoint2: CGPointMake(122.72, 688.94)];
        [oval33Path addCurveToPoint: CGPointMake(204.2, 637.93) controlPoint1: CGPointMake(122.72, 653.42) controlPoint2: CGPointMake(219.61, 656.63)];
        [oval33Path addCurveToPoint: CGPointMake(52.18, 623.76) controlPoint1: CGPointMake(194.58, 626.27) controlPoint2: CGPointMake(67.6, 623.76)];
        [oval33Path addCurveToPoint: CGPointMake(5.47, 656.86) controlPoint1: CGPointMake(12.04, 623.76) controlPoint2: CGPointMake(5.47, 634.88)];
        [oval33Path closePath];
        [fogColor setFill];
        [oval33Path fill];


        //// Oval 34 Drawing
        UIBezierPath* oval34Path = [UIBezierPath bezierPath];
        [oval34Path moveToPoint: CGPointMake(234.48, 716.05)];
        [oval34Path addCurveToPoint: CGPointMake(187.78, 687.74) controlPoint1: CGPointMake(234.48, 694.07) controlPoint2: CGPointMake(227.92, 687.74)];
        [oval34Path addCurveToPoint: CGPointMake(100.34, 716.09) controlPoint1: CGPointMake(147.64, 687.74) controlPoint2: CGPointMake(100.34, 694.1)];
        [oval34Path addCurveToPoint: CGPointMake(35.75, 760.63) controlPoint1: CGPointMake(100.34, 729.62) controlPoint2: CGPointMake(20.33, 741.94)];
        [oval34Path addCurveToPoint: CGPointMake(187.78, 760.63) controlPoint1: CGPointMake(45.37, 772.29) controlPoint2: CGPointMake(172.35, 760.63)];
        [oval34Path addCurveToPoint: CGPointMake(234.48, 716.05) controlPoint1: CGPointMake(227.92, 760.63) controlPoint2: CGPointMake(234.48, 738.04)];
        [oval34Path closePath];
        [fogColor setFill];
        [oval34Path fill];


        //// Oval 36 Drawing
        UIBezierPath* oval36Path = [UIBezierPath bezierPath];
        [oval36Path moveToPoint: CGPointMake(163.5, 694.68)];
        [oval36Path addCurveToPoint: CGPointMake(163.5, 739.3) controlPoint1: CGPointMake(150.14, 702.25) controlPoint2: CGPointMake(163.5, 725.96)];
        [oval36Path addCurveToPoint: CGPointMake(245.77, 768.56) controlPoint1: CGPointMake(163.5, 767.49) controlPoint2: CGPointMake(199.16, 768.56)];
        [oval36Path addCurveToPoint: CGPointMake(321.91, 748.79) controlPoint1: CGPointMake(292.38, 768.56) controlPoint2: CGPointMake(321.91, 776.99)];
        [oval36Path addCurveToPoint: CGPointMake(321.91, 706.76) controlPoint1: CGPointMake(321.91, 731.43) controlPoint2: CGPointMake(339.81, 730.73)];
        [oval36Path addCurveToPoint: CGPointMake(245.77, 694.68) controlPoint1: CGPointMake(310.74, 691.81) controlPoint2: CGPointMake(263.68, 694.68)];
        [oval36Path addCurveToPoint: CGPointMake(163.5, 694.68) controlPoint1: CGPointMake(221.22, 694.68) controlPoint2: CGPointMake(178.36, 686.24)];
        [oval36Path closePath];
        [fogColor setFill];
        [oval36Path fill];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas40
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* fogColor = [UIColor colorWithRed: 0.306 green: 0.314 blue: 0.408 alpha: 0.352];

    //// Shadow Declarations
    NSShadow* moonShadow = [[NSShadow alloc] init];
    [moonShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.63]];
    [moonShadow setShadowOffset: CGSizeMake(28.1, -14.1)];
    [moonShadow setShadowBlurRadius: 20];

    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShadow.shadowOffset, moonShadow.shadowBlurRadius, [moonShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 16 Drawing
        UIBezierPath* oval16Path = [UIBezierPath bezierPath];
        [oval16Path moveToPoint: CGPointMake(308.96, 726.33)];
        [oval16Path addCurveToPoint: CGPointMake(359.02, 684.07) controlPoint1: CGPointMake(308.96, 700.18) controlPoint2: CGPointMake(300.32, 684.07)];
        [oval16Path addCurveToPoint: CGPointMake(448.05, 684.48) controlPoint1: CGPointMake(417.72, 684.07) controlPoint2: CGPointMake(448.05, 658.33)];
        [oval16Path addCurveToPoint: CGPointMake(457.38, 755.1) controlPoint1: CGPointMake(448.05, 700.59) controlPoint2: CGPointMake(479.92, 732.87)];
        [oval16Path addCurveToPoint: CGPointMake(358.55, 768.4) controlPoint1: CGPointMake(443.31, 768.98) controlPoint2: CGPointMake(381.11, 768.4)];
        [oval16Path addCurveToPoint: CGPointMake(308.96, 726.33) controlPoint1: CGPointMake(299.85, 768.4) controlPoint2: CGPointMake(308.96, 752.48)];
        [oval16Path closePath];
        [fogColor setFill];
        [oval16Path fill];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPath];
        [oval17Path moveToPoint: CGPointMake(293.9, 600.69)];
        [oval17Path addCurveToPoint: CGPointMake(380.61, 573.87) controlPoint1: CGPointMake(293.9, 577.71) controlPoint2: CGPointMake(325.74, 573.87)];
        [oval17Path addCurveToPoint: CGPointMake(464.72, 600.69) controlPoint1: CGPointMake(435.48, 573.87) controlPoint2: CGPointMake(464.72, 577.71)];
        [oval17Path addCurveToPoint: CGPointMake(420, 636) controlPoint1: CGPointMake(464.72, 614.83) controlPoint2: CGPointMake(441.07, 616.47)];
        [oval17Path addCurveToPoint: CGPointMake(381.05, 674.39) controlPoint1: CGPointMake(406.85, 648.19) controlPoint2: CGPointMake(402.14, 674.39)];
        [oval17Path addCurveToPoint: CGPointMake(293.9, 600.69) controlPoint1: CGPointMake(326.18, 674.39) controlPoint2: CGPointMake(293.9, 623.66)];
        [oval17Path closePath];
        [fogColor setFill];
        [oval17Path fill];


        //// Oval 21 Drawing
        UIBezierPath* oval21Path = [UIBezierPath bezierPath];
        [oval21Path moveToPoint: CGPointMake(10, 596.88)];
        [oval21Path addCurveToPoint: CGPointMake(58.48, 562.53) controlPoint1: CGPointMake(10, 566.07) controlPoint2: CGPointMake(16.82, 562.53)];
        [oval21Path addCurveToPoint: CGPointMake(126.54, 584.13) controlPoint1: CGPointMake(100.15, 562.53) controlPoint2: CGPointMake(126.54, 553.32)];
        [oval21Path addCurveToPoint: CGPointMake(110.76, 622.72) controlPoint1: CGPointMake(126.54, 603.1) controlPoint2: CGPointMake(126.76, 596.53)];
        [oval21Path addCurveToPoint: CGPointMake(58.48, 643.27) controlPoint1: CGPointMake(100.77, 639.06) controlPoint2: CGPointMake(74.49, 643.27)];
        [oval21Path addCurveToPoint: CGPointMake(10, 596.88) controlPoint1: CGPointMake(16.82, 643.27) controlPoint2: CGPointMake(10, 627.69)];
        [oval21Path closePath];
        [fogColor setFill];
        [oval21Path fill];


        //// Oval 23 Drawing
        UIBezierPath* oval23Path = [UIBezierPath bezierPath];
        [oval23Path moveToPoint: CGPointMake(300.88, 653.15)];
        [oval23Path addCurveToPoint: CGPointMake(257.53, 687.41) controlPoint1: CGPointMake(300.88, 679.75) controlPoint2: CGPointMake(294.79, 687.41)];
        [oval23Path addCurveToPoint: CGPointMake(176.36, 653.11) controlPoint1: CGPointMake(220.26, 687.41) controlPoint2: CGPointMake(176.36, 679.71)];
        [oval23Path addCurveToPoint: CGPointMake(116.4, 599.21) controlPoint1: CGPointMake(176.36, 636.73) controlPoint2: CGPointMake(102.09, 621.82)];
        [oval23Path addCurveToPoint: CGPointMake(257.47, 572) controlPoint1: CGPointMake(125.33, 585.1) controlPoint2: CGPointMake(243.15, 572)];
        [oval23Path addCurveToPoint: CGPointMake(300.88, 653.15) controlPoint1: CGPointMake(294.73, 572) controlPoint2: CGPointMake(300.88, 626.54)];
        [oval23Path closePath];
        [fogColor setFill];
        [oval23Path fill];


        //// Oval 25 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 77.26, 704.7);
        CGContextRotateCTM(context, -94.02 * M_PI / 180);

        UIBezierPath* oval25Path = [UIBezierPath bezierPath];
        [oval25Path moveToPoint: CGPointMake(-62.99, 14.15)];
        [oval25Path addCurveToPoint: CGPointMake(-16.26, 81.74) controlPoint1: CGPointMake(-62.99, 74.76) controlPoint2: CGPointMake(-56.42, 81.74)];
        [oval25Path addCurveToPoint: CGPointMake(48.84, 14.06) controlPoint1: CGPointMake(23.9, 81.74) controlPoint2: CGPointMake(13.05, 34.53)];
        [oval25Path addCurveToPoint: CGPointMake(48.84, -62.22) controlPoint1: CGPointMake(70.88, 1.46) controlPoint2: CGPointMake(64.26, -10.7)];
        [oval25Path addCurveToPoint: CGPointMake(-16.26, -77.11) controlPoint1: CGPointMake(39.22, -94.38) controlPoint2: CGPointMake(-0.83, -77.11)];
        [oval25Path addCurveToPoint: CGPointMake(-62.99, 14.15) controlPoint1: CGPointMake(-56.42, -77.11) controlPoint2: CGPointMake(-62.99, -46.46)];
        [oval25Path closePath];
        [fogColor setFill];
        [oval25Path fill];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas42
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* fogColor = [UIColor colorWithRed: 0.306 green: 0.314 blue: 0.408 alpha: 0.352];

    //// Shadow Declarations
    NSShadow* moonShadow = [[NSShadow alloc] init];
    [moonShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.63]];
    [moonShadow setShadowOffset: CGSizeMake(28.1, -14.1)];
    [moonShadow setShadowBlurRadius: 20];

    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShadow.shadowOffset, moonShadow.shadowBlurRadius, [moonShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPath];
        [oval17Path moveToPoint: CGPointMake(307.87, 637.57)];
        [oval17Path addCurveToPoint: CGPointMake(385.09, 610) controlPoint1: CGPointMake(307.87, 613.95) controlPoint2: CGPointMake(336.23, 610)];
        [oval17Path addCurveToPoint: CGPointMake(460, 637.57) controlPoint1: CGPointMake(433.96, 610) controlPoint2: CGPointMake(460, 613.95)];
        [oval17Path addCurveToPoint: CGPointMake(447, 691) controlPoint1: CGPointMake(460, 652.11) controlPoint2: CGPointMake(465.77, 670.92)];
        [oval17Path addCurveToPoint: CGPointMake(385.49, 713.34) controlPoint1: CGPointMake(435.29, 703.53) controlPoint2: CGPointMake(404.27, 713.34)];
        [oval17Path addCurveToPoint: CGPointMake(307.87, 637.57) controlPoint1: CGPointMake(336.62, 713.34) controlPoint2: CGPointMake(307.87, 661.19)];
        [oval17Path closePath];
        [fogColor setFill];
        [oval17Path fill];


        //// Oval 20 Drawing
        UIBezierPath* oval20Path = [UIBezierPath bezierPath];
        [oval20Path moveToPoint: CGPointMake(365.74, 731.13)];
        [oval20Path addCurveToPoint: CGPointMake(404.91, 713.59) controlPoint1: CGPointMake(365.74, 715.4) controlPoint2: CGPointMake(371.25, 713.59)];
        [oval20Path addCurveToPoint: CGPointMake(459.89, 724.62) controlPoint1: CGPointMake(438.57, 713.59) controlPoint2: CGPointMake(459.89, 708.89)];
        [oval20Path addCurveToPoint: CGPointMake(447.14, 744.32) controlPoint1: CGPointMake(459.89, 734.31) controlPoint2: CGPointMake(460.07, 730.95)];
        [oval20Path addCurveToPoint: CGPointMake(404.91, 754.82) controlPoint1: CGPointMake(439.07, 752.67) controlPoint2: CGPointMake(417.84, 754.82)];
        [oval20Path addCurveToPoint: CGPointMake(365.74, 731.13) controlPoint1: CGPointMake(371.25, 754.82) controlPoint2: CGPointMake(365.74, 746.86)];
        [oval20Path closePath];
        [fogColor setFill];
        [oval20Path fill];


        //// Oval 21 Drawing
        UIBezierPath* oval21Path = [UIBezierPath bezierPath];
        [oval21Path moveToPoint: CGPointMake(4, 635.22)];
        [oval21Path addCurveToPoint: CGPointMake(54.48, 610.74) controlPoint1: CGPointMake(4, 613.26) controlPoint2: CGPointMake(11.1, 610.74)];
        [oval21Path addCurveToPoint: CGPointMake(125.33, 626.13) controlPoint1: CGPointMake(97.85, 610.74) controlPoint2: CGPointMake(125.33, 604.17)];
        [oval21Path addCurveToPoint: CGPointMake(108.9, 653.63) controlPoint1: CGPointMake(125.33, 639.65) controlPoint2: CGPointMake(125.56, 634.97)];
        [oval21Path addCurveToPoint: CGPointMake(54.48, 668.28) controlPoint1: CGPointMake(98.51, 665.28) controlPoint2: CGPointMake(71.14, 668.28)];
        [oval21Path addCurveToPoint: CGPointMake(4, 635.22) controlPoint1: CGPointMake(11.1, 668.28) controlPoint2: CGPointMake(4, 657.18)];
        [oval21Path closePath];
        [fogColor setFill];
        [oval21Path fill];


        //// Oval 23 Drawing
        UIBezierPath* oval23Path = [UIBezierPath bezierPath];
        [oval23Path moveToPoint: CGPointMake(130.83, 614.05)];
        [oval23Path addCurveToPoint: CGPointMake(176.45, 589.21) controlPoint1: CGPointMake(130.83, 594.76) controlPoint2: CGPointMake(137.24, 589.21)];
        [oval23Path addCurveToPoint: CGPointMake(261.87, 614.08) controlPoint1: CGPointMake(215.66, 589.21) controlPoint2: CGPointMake(261.87, 594.79)];
        [oval23Path addCurveToPoint: CGPointMake(324.96, 653.15) controlPoint1: CGPointMake(261.87, 625.95) controlPoint2: CGPointMake(340.02, 636.76)];
        [oval23Path addCurveToPoint: CGPointMake(176.45, 653.15) controlPoint1: CGPointMake(315.56, 663.38) controlPoint2: CGPointMake(191.52, 653.15)];
        [oval23Path addCurveToPoint: CGPointMake(130.83, 614.05) controlPoint1: CGPointMake(137.24, 653.15) controlPoint2: CGPointMake(130.83, 633.34)];
        [oval23Path closePath];
        [fogColor setFill];
        [oval23Path fill];


        //// Oval 25 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 131.13, 706.02);
        CGContextRotateCTM(context, 94.02 * M_PI / 180);

        UIBezierPath* oval25Path = [UIBezierPath bezierPath];
        [oval25Path moveToPoint: CGPointMake(-46.87, -14.96)];
        [oval25Path addCurveToPoint: CGPointMake(-12.1, -86.41) controlPoint1: CGPointMake(-46.87, -79.04) controlPoint2: CGPointMake(-41.98, -86.41)];
        [oval25Path addCurveToPoint: CGPointMake(36.34, -14.87) controlPoint1: CGPointMake(17.78, -86.41) controlPoint2: CGPointMake(9.71, -36.5)];
        [oval25Path addCurveToPoint: CGPointMake(36.34, 65.78) controlPoint1: CGPointMake(52.73, -1.54) controlPoint2: CGPointMake(47.81, 11.31)];
        [oval25Path addCurveToPoint: CGPointMake(-12.1, 81.52) controlPoint1: CGPointMake(29.18, 99.77) controlPoint2: CGPointMake(-0.62, 81.52)];
        [oval25Path addCurveToPoint: CGPointMake(-46.87, -14.96) controlPoint1: CGPointMake(-41.98, 81.52) controlPoint2: CGPointMake(-46.87, 49.12)];
        [oval25Path closePath];
        [fogColor setFill];
        [oval25Path fill];

        CGContextRestoreGState(context);


        //// Oval 26 Drawing
        UIBezierPath* oval26Path = [UIBezierPath bezierPath];
        [oval26Path moveToPoint: CGPointMake(224.12, 700.77)];
        [oval26Path addCurveToPoint: CGPointMake(243.35, 748.34) controlPoint1: CGPointMake(224.12, 732.36) controlPoint2: CGPointMake(192.07, 748.34)];
        [oval26Path addCurveToPoint: CGPointMake(352.77, 716.23) controlPoint1: CGPointMake(294.63, 748.34) controlPoint2: CGPointMake(352.77, 747.83)];
        [oval26Path addCurveToPoint: CGPointMake(321.72, 680.55) controlPoint1: CGPointMake(352.77, 696.77) controlPoint2: CGPointMake(341.41, 707.41)];
        [oval26Path addCurveToPoint: CGPointMake(283.8, 653.19) controlPoint1: CGPointMake(309.43, 663.78) controlPoint2: CGPointMake(303.5, 653.19)];
        [oval26Path addCurveToPoint: CGPointMake(224.12, 700.77) controlPoint1: CGPointMake(232.52, 653.19) controlPoint2: CGPointMake(224.12, 669.17)];
        [oval26Path closePath];
        [fogColor setFill];
        [oval26Path fill];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas43
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* fogColor = [UIColor colorWithRed: 0.306 green: 0.314 blue: 0.408 alpha: 0.352];

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* moonFrontShadow = [[NSShadow alloc] init];
    [moonFrontShadow setShadowColor: [moonFrontShadowColor colorWithAlphaComponent: CGColorGetAlpha(moonFrontShadowColor.CGColor) * 0.17]];
    [moonFrontShadow setShadowOffset: CGSizeMake(-33.1, 66.1)];
    [moonFrontShadow setShadowBlurRadius: 57];

    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 52 Drawing
        UIBezierPath* oval52Path = [UIBezierPath bezierPath];
        [oval52Path moveToPoint: CGPointMake(218.57, 590.51)];
        [oval52Path addCurveToPoint: CGPointMake(119.58, 590.07) controlPoint1: CGPointMake(218.57, 562.88) controlPoint2: CGPointMake(181.6, 590.07)];
        [oval52Path addCurveToPoint: CGPointMake(25.51, 590.51) controlPoint1: CGPointMake(57.57, 590.07) controlPoint2: CGPointMake(25.51, 562.88)];
        [oval52Path addCurveToPoint: CGPointMake(15.66, 665.11) controlPoint1: CGPointMake(25.51, 607.52) controlPoint2: CGPointMake(-8.15, 641.62)];
        [oval52Path addCurveToPoint: CGPointMake(120.07, 679.15) controlPoint1: CGPointMake(30.53, 679.77) controlPoint2: CGPointMake(96.24, 679.15)];
        [oval52Path addCurveToPoint: CGPointMake(218.57, 590.51) controlPoint1: CGPointMake(182.09, 679.15) controlPoint2: CGPointMake(218.57, 618.14)];
        [oval52Path closePath];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonFrontShadow.shadowOffset, moonFrontShadow.shadowBlurRadius, [moonFrontShadow.shadowColor CGColor]);
        [fogColor setFill];
        [oval52Path fill];
        CGContextRestoreGState(context);



        //// Oval 53 Drawing
        UIBezierPath* oval53Path = [UIBezierPath bezierPath];
        [oval53Path moveToPoint: CGPointMake(179.73, 550.79)];
        [oval53Path addCurveToPoint: CGPointMake(88.12, 522.45) controlPoint1: CGPointMake(179.73, 526.52) controlPoint2: CGPointMake(146.09, 522.45)];
        [oval53Path addCurveToPoint: CGPointMake(-0.74, 550.79) controlPoint1: CGPointMake(30.15, 522.45) controlPoint2: CGPointMake(-0.74, 526.52)];
        [oval53Path addCurveToPoint: CGPointMake(59.56, 584.77) controlPoint1: CGPointMake(-0.74, 565.73) controlPoint2: CGPointMake(37.3, 564.14)];
        [oval53Path addCurveToPoint: CGPointMake(87.65, 628.65) controlPoint1: CGPointMake(73.45, 597.64) controlPoint2: CGPointMake(65.38, 628.65)];
        [oval53Path addCurveToPoint: CGPointMake(179.73, 550.79) controlPoint1: CGPointMake(145.62, 628.65) controlPoint2: CGPointMake(179.73, 575.05)];
        [oval53Path closePath];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonFrontShadow.shadowOffset, moonFrontShadow.shadowBlurRadius, [moonFrontShadow.shadowColor CGColor]);
        [fogColor setFill];
        [oval53Path fill];
        CGContextRestoreGState(context);



        //// Oval 69 Drawing
        UIBezierPath* oval69Path = [UIBezierPath bezierPath];
        [oval69Path moveToPoint: CGPointMake(433.44, 674.21)];
        [oval69Path addCurveToPoint: CGPointMake(336.24, 674.63) controlPoint1: CGPointMake(433.44, 700.69) controlPoint2: CGPointMake(397.13, 674.63)];
        [oval69Path addCurveToPoint: CGPointMake(219.21, 651.5) controlPoint1: CGPointMake(275.34, 674.63) controlPoint2: CGPointMake(219.21, 677.98)];
        [oval69Path addCurveToPoint: CGPointMake(259.83, 622.9) controlPoint1: CGPointMake(219.21, 635.19) controlPoint2: CGPointMake(236.44, 645.41)];
        [oval69Path addCurveToPoint: CGPointMake(336.24, 605.24) controlPoint1: CGPointMake(274.42, 608.85) controlPoint2: CGPointMake(312.84, 605.24)];
        [oval69Path addCurveToPoint: CGPointMake(433.44, 674.21) controlPoint1: CGPointMake(397.13, 605.24) controlPoint2: CGPointMake(433.44, 647.73)];
        [oval69Path closePath];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonFrontShadow.shadowOffset, moonFrontShadow.shadowBlurRadius, [moonFrontShadow.shadowColor CGColor]);
        [fogColor setFill];
        [oval69Path fill];
        CGContextRestoreGState(context);



        //// Oval 71 Drawing
        UIBezierPath* oval71Path = [UIBezierPath bezierPath];
        [oval71Path moveToPoint: CGPointMake(466, 569.99)];
        [oval71Path addCurveToPoint: CGPointMake(414.78, 533.7) controlPoint1: CGPointMake(466, 537.45) controlPoint2: CGPointMake(458.79, 533.7)];
        [oval71Path addCurveToPoint: CGPointMake(342.88, 556.52) controlPoint1: CGPointMake(370.76, 533.7) controlPoint2: CGPointMake(342.88, 523.97)];
        [oval71Path addCurveToPoint: CGPointMake(359.55, 597.28) controlPoint1: CGPointMake(342.88, 576.56) controlPoint2: CGPointMake(342.64, 569.62)];
        [oval71Path addCurveToPoint: CGPointMake(414.78, 618.99) controlPoint1: CGPointMake(370.1, 614.55) controlPoint2: CGPointMake(397.86, 618.99)];
        [oval71Path addCurveToPoint: CGPointMake(466, 569.99) controlPoint1: CGPointMake(458.79, 618.99) controlPoint2: CGPointMake(466, 602.54)];
        [oval71Path closePath];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonFrontShadow.shadowOffset, moonFrontShadow.shadowBlurRadius, [moonFrontShadow.shadowColor CGColor]);
        [fogColor setFill];
        [oval71Path fill];
        CGContextRestoreGState(context);



        //// Oval 73 Drawing
        UIBezierPath* oval73Path = [UIBezierPath bezierPath];
        [oval73Path moveToPoint: CGPointMake(226.19, 591.83)];
        [oval73Path addCurveToPoint: CGPointMake(272.48, 628.65) controlPoint1: CGPointMake(226.19, 620.42) controlPoint2: CGPointMake(232.69, 628.65)];
        [oval73Path addCurveToPoint: CGPointMake(359.16, 591.79) controlPoint1: CGPointMake(312.27, 628.65) controlPoint2: CGPointMake(359.16, 620.38)];
        [oval73Path addCurveToPoint: CGPointMake(423.18, 533.86) controlPoint1: CGPointMake(359.16, 574.18) controlPoint2: CGPointMake(438.47, 558.17)];
        [oval73Path addCurveToPoint: CGPointMake(272.48, 533.86) controlPoint1: CGPointMake(413.65, 518.69) controlPoint2: CGPointMake(287.77, 533.86)];
        [oval73Path addCurveToPoint: CGPointMake(226.19, 591.83) controlPoint1: CGPointMake(232.69, 533.86) controlPoint2: CGPointMake(226.19, 563.24)];
        [oval73Path closePath];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonFrontShadow.shadowOffset, moonFrontShadow.shadowBlurRadius, [moonFrontShadow.shadowColor CGColor]);
        [fogColor setFill];
        [oval73Path fill];
        CGContextRestoreGState(context);



        //// Oval 74 Drawing
        UIBezierPath* oval74Path = [UIBezierPath bezierPath];
        [oval74Path moveToPoint: CGPointMake(295.88, 620.37)];
        [oval74Path addCurveToPoint: CGPointMake(295.88, 562.34) controlPoint1: CGPointMake(309.12, 610.52) controlPoint2: CGPointMake(295.88, 579.69)];
        [oval74Path addCurveToPoint: CGPointMake(214.33, 524.3) controlPoint1: CGPointMake(295.88, 525.68) controlPoint2: CGPointMake(260.54, 524.3)];
        [oval74Path addCurveToPoint: CGPointMake(138.86, 550) controlPoint1: CGPointMake(168.13, 524.3) controlPoint2: CGPointMake(138.86, 513.34)];
        [oval74Path addCurveToPoint: CGPointMake(138.86, 604.65) controlPoint1: CGPointMake(138.86, 572.57) controlPoint2: CGPointMake(121.11, 573.49)];
        [oval74Path addCurveToPoint: CGPointMake(214.33, 620.37) controlPoint1: CGPointMake(149.93, 624.1) controlPoint2: CGPointMake(196.58, 620.37)];
        [oval74Path addCurveToPoint: CGPointMake(295.88, 620.37) controlPoint1: CGPointMake(238.67, 620.37) controlPoint2: CGPointMake(281.15, 631.34)];
        [oval74Path closePath];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonFrontShadow.shadowOffset, moonFrontShadow.shadowBlurRadius, [moonFrontShadow.shadowColor CGColor]);
        [fogColor setFill];
        [oval74Path fill];
        CGContextRestoreGState(context);



        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas77
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color5 = [UIColor colorWithRed: 0 green: 0.331 blue: 1 alpha: 1];
    UIColor* gradientColor3 = [UIColor colorWithRed: 0.235 green: 0.908 blue: 0.577 alpha: 1];
    UIColor* gradientColor4 = [UIColor colorWithRed: 0.132 green: 0.959 blue: 0.961 alpha: 1];
    UIColor* gradientColor5 = [UIColor colorWithRed: 0.162 green: 0.396 blue: 0.951 alpha: 1];
    UIColor* earthShadowColor = [UIColor colorWithRed: 1 green: 0.998 blue: 0.998 alpha: 1];

    //// Gradient Declarations
    CGFloat earthGradientLocations[] = {0.03, 0.27, 0.57, 0.83, 1};
    CGGradientRef earthGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)gradientColor5.CGColor, (id)[gradientColor5 blendedColorWithFraction: 0.5 ofColor: gradientColor3].CGColor, (id)gradientColor3.CGColor, (id)[gradientColor3 blendedColorWithFraction: 0.5 ofColor: gradientColor4].CGColor, (id)gradientColor4.CGColor], earthGradientLocations);

    //// Shadow Declarations
    NSShadow* earthShadow = [[NSShadow alloc] init];
    [earthShadow setShadowColor: [earthShadowColor colorWithAlphaComponent: CGColorGetAlpha(earthShadowColor.CGColor) * 0.5]];
    [earthShadow setShadowOffset: CGSizeMake(11.1, 22.1)];
    [earthShadow setShadowBlurRadius: 16];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [color5 setFill];
    [bezierPath fill];
    [UIColor.blackColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 207, 207);

    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-155, -155, 310, 310)];
    CGContextSaveGState(context);
    [oval3Path addClip];
    CGContextDrawLinearGradient(context, earthGradient, CGPointMake(-0, -155), CGPointMake(0, 155), 0);
    CGContextRestoreGState(context);

    ////// Oval 3 Inner Shadow
    CGContextSaveGState(context);
    UIRectClip(oval3Path.bounds);
    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

    CGContextSetAlpha(context, CGColorGetAlpha([earthShadow.shadowColor CGColor]));
    CGContextBeginTransparencyLayer(context, NULL);
    {
        UIColor* opaqueShadow = [earthShadow.shadowColor colorWithAlphaComponent: 1];
        CGContextSetShadowWithColor(context, earthShadow.shadowOffset, earthShadow.shadowBlurRadius, [opaqueShadow CGColor]);
        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
        CGContextBeginTransparencyLayer(context, NULL);

        [opaqueShadow setFill];
        [oval3Path fill];

        CGContextEndTransparencyLayer(context);
    }
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [UIColor.blackColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];

    CGContextRestoreGState(context);


    //// Cleanup
    CGGradientRelease(earthGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas79
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* darkSideMoonGradientColor = [UIColor colorWithRed: 0.723 green: 0.715 blue: 0.715 alpha: 1];
    UIColor* darkSideMoonGradientColor2 = [UIColor colorWithRed: 0.189 green: 0.184 blue: 0.184 alpha: 1];
    UIColor* color18 = [UIColor colorWithRed: 0.202 green: 0.196 blue: 0.196 alpha: 1];

    //// Gradient Declarations
    CGFloat darkSideMoonGradientLocations[] = {0, 0.55, 1};
    CGGradientRef darkSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)darkSideMoonGradientColor.CGColor, (id)[darkSideMoonGradientColor blendedColorWithFraction: 0.5 ofColor: darkSideMoonGradientColor2].CGColor, (id)darkSideMoonGradientColor2.CGColor], darkSideMoonGradientLocations);

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];

    //// Group 3
    {
        //// Group
        {
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
            CGContextBeginTransparencyLayer(context, NULL);


            //// Group 2
            {
                //// Oval 6 Drawing
                UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(289.5, 49.5, 85, 84)];
                CGContextSaveGState(context);
                [oval6Path addClip];
                CGContextDrawLinearGradient(context, darkSideMoonGradient, CGPointMake(332, 49.5), CGPointMake(332, 133.5), 0);
                CGContextRestoreGState(context);
                [UIColor.blackColor setStroke];
                oval6Path.lineWidth = 1;
                [oval6Path stroke];
            }


            //// Text 3 Drawing
            CGRect text3Rect = CGRectMake(320, 50, 29, 20);
            {
                NSString* textContent = @"Sad";
                NSMutableParagraphStyle* text3Style = [NSMutableParagraphStyle new];
                text3Style.alignment = NSTextAlignmentLeft;

                NSDictionary* text3FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Menlo-Regular" size: 15], NSForegroundColorAttributeName: color18, NSParagraphStyleAttributeName: text3Style};

                CGFloat text3TextHeight = [textContent boundingRectWithSize: CGSizeMake(text3Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text3FontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, text3Rect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(text3Rect), CGRectGetMinY(text3Rect) + (CGRectGetHeight(text3Rect) - text3TextHeight) / 2, CGRectGetWidth(text3Rect), text3TextHeight) withAttributes: text3FontAttributes];
                CGContextRestoreGState(context);
            }


            //// Text 4 Drawing
            CGRect text4Rect = CGRectMake(315, 63, 39, 18);
            {
                NSString* textContent = @"Moon";
                NSMutableParagraphStyle* text4Style = [NSMutableParagraphStyle new];
                text4Style.alignment = NSTextAlignmentLeft;

                NSDictionary* text4FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Menlo-Regular" size: 15], NSForegroundColorAttributeName: color18, NSParagraphStyleAttributeName: text4Style};

                CGFloat text4TextHeight = [textContent boundingRectWithSize: CGSizeMake(text4Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text4FontAttributes context: nil].size.height;
                CGContextSaveGState(context);
                CGContextClipToRect(context, text4Rect);
                [textContent drawInRect: CGRectMake(CGRectGetMinX(text4Rect), CGRectGetMinY(text4Rect) + (CGRectGetHeight(text4Rect) - text4TextHeight) / 2, CGRectGetWidth(text4Rect), text4TextHeight) withAttributes: text4FontAttributes];
                CGContextRestoreGState(context);
            }


            //// Oval 8 Drawing
            UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(322, 90, 8, 10)];
            [color18 setFill];
            [oval8Path fill];


            //// Bezier 3 Drawing
            UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
            [bezier3Path moveToPoint: CGPointMake(321.55, 121.17)];
            [bezier3Path addCurveToPoint: CGPointMake(349.04, 121.17) controlPoint1: CGPointMake(336.42, 103.51) controlPoint2: CGPointMake(349.04, 121.17)];
            [color18 setStroke];
            bezier3Path.lineWidth = 2;
            [bezier3Path stroke];


            //// Oval 9 Drawing
            UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(325, 97, 3, 3)];
            CGContextSaveGState(context);
            [oval9Path addClip];
            CGContextDrawLinearGradient(context, darkSideMoonGradient, CGPointMake(326.5, 97), CGPointMake(326.5, 100), 0);
            CGContextRestoreGState(context);


            //// Oval Drawing
            UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(343, 90, 7.5, 10)];
            [color18 setFill];
            [ovalPath fill];


            //// Oval 2 Drawing
            UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(345, 96.5, 3, 3)];
            CGContextSaveGState(context);
            [oval2Path addClip];
            CGContextDrawLinearGradient(context, darkSideMoonGradient, CGPointMake(346.5, 96.5), CGPointMake(346.5, 99.5), 0);
            CGContextRestoreGState(context);


            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);
        }
    }


    //// Cleanup
    CGGradientRelease(darkSideMoonGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas80
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* lightningShadowColor = [UIColor colorWithRed: 1 green: 0.979 blue: 0.615 alpha: 1];
    UIColor* color15 = [UIColor colorWithRed: 1 green: 0.727 blue: 0 alpha: 1];
    UIColor* color16 = [UIColor colorWithRed: 0.677 green: 0.225 blue: 0.225 alpha: 1];

    //// Shadow Declarations
    NSShadow* lightningShadow = [[NSShadow alloc] init];
    [lightningShadow setShadowColor: lightningShadowColor];
    [lightningShadow setShadowOffset: CGSizeMake(0.1, 16.1)];
    [lightningShadow setShadowBlurRadius: 11];

    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, lightningShadow.shadowOffset, lightningShadow.shadowBlurRadius, [lightningShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(39.5, 48.5, 93, 100)];
        [color15 setFill];
        [oval3Path fill];
        [color16 setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(53.07, 67.78)];
        [bezierPath addCurveToPoint: CGPointMake(60.19, 60.74) controlPoint1: CGPointMake(41.88, 42.33) controlPoint2: CGPointMake(60.19, 60.74)];
        [color15 setFill];
        [bezierPath fill];
        [color16 setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [color15 setFill];
        [bezier2Path fill];
        [color16 setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(60.19, 61.28)];
        [bezier4Path addCurveToPoint: CGPointMake(67.32, 56.95) controlPoint1: CGPointMake(51.04, 40.71) controlPoint2: CGPointMake(67.32, 56.95)];
        [color15 setFill];
        [bezier4Path fill];
        [color16 setStroke];
        bezier4Path.lineWidth = 1;
        [bezier4Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(67.99, 63.99)];
        [bezier5Path addCurveToPoint: CGPointMake(80.69, 8.5) controlPoint1: CGPointMake(67.48, 44.71) controlPoint2: CGPointMake(80.69, 8.5)];
        [bezier5Path addLineToPoint: CGPointMake(90.35, 63.99)];
        [bezier5Path addLineToPoint: CGPointMake(119.3, 32.01)];
        [bezier5Path addLineToPoint: CGPointMake(119.3, 73.86)];
        [bezier5Path addLineToPoint: CGPointMake(148.26, 55.05)];
        [bezier5Path addLineToPoint: CGPointMake(129.46, 87.97)];
        [bezier5Path addLineToPoint: CGPointMake(159.95, 97.37)];
        [bezier5Path addLineToPoint: CGPointMake(129.46, 106.31)];
        [bezier5Path addCurveToPoint: CGPointMake(167.06, 125.58) controlPoint1: CGPointMake(129.46, 106.31) controlPoint2: CGPointMake(214.81, 125.58)];
        [bezier5Path addCurveToPoint: CGPointMake(119.3, 125.58) controlPoint1: CGPointMake(119.3, 125.58) controlPoint2: CGPointMake(119.3, 125.58)];
        [bezier5Path addLineToPoint: CGPointMake(148.26, 144.86)];
        [bezier5Path addLineToPoint: CGPointMake(119.3, 136.87)];
        [bezier5Path addLineToPoint: CGPointMake(129.46, 158.5)];
        [bezier5Path addLineToPoint: CGPointMake(101.52, 144.86)];
        [bezier5Path addLineToPoint: CGPointMake(101.52, 172.14)];
        [bezier5Path addCurveToPoint: CGPointMake(90.35, 144.86) controlPoint1: CGPointMake(101.52, 172.14) controlPoint2: CGPointMake(100, 108.19)];
        [bezier5Path addCurveToPoint: CGPointMake(80.69, 172.14) controlPoint1: CGPointMake(80.69, 181.54) controlPoint2: CGPointMake(80.69, 172.14)];
        [bezier5Path addLineToPoint: CGPointMake(75.11, 144.86)];
        [bezier5Path addCurveToPoint: CGPointMake(53.77, 172.14) controlPoint1: CGPointMake(75.11, 144.86) controlPoint2: CGPointMake(53.77, 185.77)];
        [bezier5Path addCurveToPoint: CGPointMake(58.85, 136.87) controlPoint1: CGPointMake(53.77, 158.5) controlPoint2: CGPointMake(79.68, 115.24)];
        [bezier5Path addCurveToPoint: CGPointMake(53.77, 131.7) controlPoint1: CGPointMake(38.02, 158.5) controlPoint2: CGPointMake(53.77, 131.7)];
        [bezier5Path addLineToPoint: CGPointMake(26.84, 158.5)];
        [bezier5Path addLineToPoint: CGPointMake(42.08, 106.31)];
        [bezier5Path addCurveToPoint: CGPointMake(5.51, 112.89) controlPoint1: CGPointMake(42.08, 106.31) controlPoint2: CGPointMake(6.01, 112.89)];
        [bezier5Path addCurveToPoint: CGPointMake(42.08, 87.97) controlPoint1: CGPointMake(5, 112.89) controlPoint2: CGPointMake(42.08, 87.97)];
        [bezier5Path addLineToPoint: CGPointMake(26.84, 73.86)];
        [color15 setFill];
        [bezier5Path fill];
        [color16 setStroke];
        bezier5Path.lineWidth = 1;
        [bezier5Path stroke];


        //// Bezier 6 Drawing
        UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
        [bezier6Path moveToPoint: CGPointMake(49.76, 61.01)];
        [bezier6Path addCurveToPoint: CGPointMake(60.45, 60.47) controlPoint1: CGPointMake(-0.61, 30.15) controlPoint2: CGPointMake(60.45, 60.47)];
        [color15 setFill];
        [bezier6Path fill];
        [color16 setStroke];
        bezier6Path.lineWidth = 1;
        [bezier6Path stroke];


        //// Text Drawing
        CGRect textRect = CGRectMake(68, 92, 40, 38);
        {
            NSString* textContent = @"SUN";
            NSMutableParagraphStyle* textStyle = [NSMutableParagraphStyle new];
            textStyle.alignment = NSTextAlignmentLeft;

            NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"MarkerFelt-Thin" size: 22], NSForegroundColorAttributeName: color16, NSParagraphStyleAttributeName: textStyle};

            CGFloat textTextHeight = [textContent boundingRectWithSize: CGSizeMake(textRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, textRect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(textRect), CGRectGetMinY(textRect) + (CGRectGetHeight(textRect) - textTextHeight) / 2, CGRectGetWidth(textRect), textTextHeight) withAttributes: textFontAttributes];
            CGContextRestoreGState(context);
        }


        //// Text 2 Drawing
        CGRect text2Rect = CGRectMake(64, 74, 46, 29);
        {
            NSString* textContent = @"UGLY";
            NSMutableParagraphStyle* text2Style = [NSMutableParagraphStyle new];
            text2Style.alignment = NSTextAlignmentLeft;

            NSDictionary* text2FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"MarkerFelt-Thin" size: 22], NSForegroundColorAttributeName: color16, NSParagraphStyleAttributeName: text2Style};

            CGFloat text2TextHeight = [textContent boundingRectWithSize: CGSizeMake(text2Rect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes context: nil].size.height;
            CGContextSaveGState(context);
            CGContextClipToRect(context, text2Rect);
            [textContent drawInRect: CGRectMake(CGRectGetMinX(text2Rect), CGRectGetMinY(text2Rect) + (CGRectGetHeight(text2Rect) - text2TextHeight) / 2, CGRectGetWidth(text2Rect), text2TextHeight) withAttributes: text2FontAttributes];
            CGContextRestoreGState(context);
        }


        //// Bezier 7 Drawing
        UIBezierPath* bezier7Path = [UIBezierPath bezierPath];
        [bezier7Path moveToPoint: CGPointMake(27.38, 74)];
        [bezier7Path addLineToPoint: CGPointMake(53.33, 67.51)];
        [color16 setStroke];
        bezier7Path.lineWidth = 1;
        [bezier7Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas81
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* shadow2Color = [UIColor colorWithRed: 1 green: 0.799 blue: 0.229 alpha: 1];
    UIColor* tableViewGradientColor = [UIColor colorWithRed: 0.004 green: 0.167 blue: 0.631 alpha: 1];
    UIColor* tableViewGradientColor3 = [UIColor colorWithRed: 0.003 green: 0.014 blue: 0.024 alpha: 1];
    UIColor* tableViewGradientColor4 = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* color5 = [UIColor colorWithRed: 0 green: 0.331 blue: 1 alpha: 1];

    //// Gradient Declarations
    CGFloat tableViewGradientLocations[] = {0, 0.3, 0.42, 0.86, 1};
    CGGradientRef tableViewGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)tableViewGradientColor4.CGColor, (id)[tableViewGradientColor4 blendedColorWithFraction: 0.5 ofColor: tableViewGradientColor3].CGColor, (id)tableViewGradientColor3.CGColor, (id)[tableViewGradientColor3 blendedColorWithFraction: 0.5 ofColor: tableViewGradientColor].CGColor, (id)tableViewGradientColor.CGColor], tableViewGradientLocations);

    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPath];
    [rectangle2Path moveToPoint: CGPointMake(0, 736)];
    [rectangle2Path addLineToPoint: CGPointMake(414, 736)];
    [rectangle2Path addLineToPoint: CGPointMake(414, 0)];
    [rectangle2Path addLineToPoint: CGPointMake(0, 0)];
    [rectangle2Path addLineToPoint: CGPointMake(0, 736)];
    [rectangle2Path closePath];
    CGContextSaveGState(context);
    [rectangle2Path addClip];
    CGContextDrawLinearGradient(context, tableViewGradient, CGPointMake(207, -0), CGPointMake(207, 736), 0);
    CGContextRestoreGState(context);


    //// Group 33
    {
        //// Star 5 Drawing
        UIBezierPath* star5Path = [UIBezierPath bezierPath];
        [star5Path moveToPoint: CGPointMake(176, 41.5)];
        [star5Path addLineToPoint: CGPointMake(178.82, 45.62)];
        [star5Path addLineToPoint: CGPointMake(183.61, 47.03)];
        [star5Path addLineToPoint: CGPointMake(180.57, 50.98)];
        [star5Path addLineToPoint: CGPointMake(180.7, 55.97)];
        [star5Path addLineToPoint: CGPointMake(176, 54.3)];
        [star5Path addLineToPoint: CGPointMake(171.3, 55.97)];
        [star5Path addLineToPoint: CGPointMake(171.43, 50.98)];
        [star5Path addLineToPoint: CGPointMake(168.39, 47.03)];
        [star5Path addLineToPoint: CGPointMake(173.18, 45.62)];
        [star5Path closePath];
        [color11 setFill];
        [star5Path fill];
        [shadow2Color setStroke];
        star5Path.lineWidth = 1;
        [star5Path stroke];


        //// Star 23 Drawing
        UIBezierPath* star23Path = [UIBezierPath bezierPath];
        [star23Path moveToPoint: CGPointMake(220.5, 61)];
        [star23Path addLineToPoint: CGPointMake(222.97, 64.6)];
        [star23Path addLineToPoint: CGPointMake(227.16, 65.84)];
        [star23Path addLineToPoint: CGPointMake(224.49, 69.3)];
        [star23Path addLineToPoint: CGPointMake(224.61, 73.66)];
        [star23Path addLineToPoint: CGPointMake(220.5, 72.2)];
        [star23Path addLineToPoint: CGPointMake(216.39, 73.66)];
        [star23Path addLineToPoint: CGPointMake(216.51, 69.3)];
        [star23Path addLineToPoint: CGPointMake(213.84, 65.84)];
        [star23Path addLineToPoint: CGPointMake(218.03, 64.6)];
        [star23Path closePath];
        [color11 setFill];
        [star23Path fill];
        [shadow2Color setStroke];
        star23Path.lineWidth = 1;
        [star23Path stroke];


        //// Star 24 Drawing
        UIBezierPath* star24Path = [UIBezierPath bezierPath];
        [star24Path moveToPoint: CGPointMake(223.5, 20)];
        [star24Path addLineToPoint: CGPointMake(226.32, 24.12)];
        [star24Path addLineToPoint: CGPointMake(231.11, 25.53)];
        [star24Path addLineToPoint: CGPointMake(228.07, 29.48)];
        [star24Path addLineToPoint: CGPointMake(228.2, 34.47)];
        [star24Path addLineToPoint: CGPointMake(223.5, 32.8)];
        [star24Path addLineToPoint: CGPointMake(218.8, 34.47)];
        [star24Path addLineToPoint: CGPointMake(218.93, 29.48)];
        [star24Path addLineToPoint: CGPointMake(215.89, 25.53)];
        [star24Path addLineToPoint: CGPointMake(220.68, 24.12)];
        [star24Path closePath];
        [color11 setFill];
        [star24Path fill];
        [shadow2Color setStroke];
        star24Path.lineWidth = 1;
        [star24Path stroke];


        //// Star 25 Drawing
        UIBezierPath* star25Path = [UIBezierPath bezierPath];
        [star25Path moveToPoint: CGPointMake(275.5, 21)];
        [star25Path addLineToPoint: CGPointMake(277.26, 23.57)];
        [star25Path addLineToPoint: CGPointMake(280.26, 24.45)];
        [star25Path addLineToPoint: CGPointMake(278.35, 26.93)];
        [star25Path addLineToPoint: CGPointMake(278.44, 30.05)];
        [star25Path addLineToPoint: CGPointMake(275.5, 29)];
        [star25Path addLineToPoint: CGPointMake(272.56, 30.05)];
        [star25Path addLineToPoint: CGPointMake(272.65, 26.93)];
        [star25Path addLineToPoint: CGPointMake(270.74, 24.45)];
        [star25Path addLineToPoint: CGPointMake(273.74, 23.57)];
        [star25Path closePath];
        [color11 setFill];
        [star25Path fill];
        [shadow2Color setStroke];
        star25Path.lineWidth = 1;
        [star25Path stroke];


        //// Star 26 Drawing
        UIBezierPath* star26Path = [UIBezierPath bezierPath];
        [star26Path moveToPoint: CGPointMake(274, 47.5)];
        [star26Path addLineToPoint: CGPointMake(277.17, 52.13)];
        [star26Path addLineToPoint: CGPointMake(282.56, 53.72)];
        [star26Path addLineToPoint: CGPointMake(279.14, 58.17)];
        [star26Path addLineToPoint: CGPointMake(279.29, 63.78)];
        [star26Path addLineToPoint: CGPointMake(274, 61.9)];
        [star26Path addLineToPoint: CGPointMake(268.71, 63.78)];
        [star26Path addLineToPoint: CGPointMake(268.86, 58.17)];
        [star26Path addLineToPoint: CGPointMake(265.44, 53.72)];
        [star26Path addLineToPoint: CGPointMake(270.83, 52.13)];
        [star26Path closePath];
        [color11 setFill];
        [star26Path fill];
        [shadow2Color setStroke];
        star26Path.lineWidth = 1;
        [star26Path stroke];


        //// Star 27 Drawing
        UIBezierPath* star27Path = [UIBezierPath bezierPath];
        [star27Path moveToPoint: CGPointMake(220.5, 102)];
        [star27Path addLineToPoint: CGPointMake(223.67, 106.63)];
        [star27Path addLineToPoint: CGPointMake(229.06, 108.22)];
        [star27Path addLineToPoint: CGPointMake(225.64, 112.67)];
        [star27Path addLineToPoint: CGPointMake(225.79, 118.28)];
        [star27Path addLineToPoint: CGPointMake(220.5, 116.4)];
        [star27Path addLineToPoint: CGPointMake(215.21, 118.28)];
        [star27Path addLineToPoint: CGPointMake(215.36, 112.67)];
        [star27Path addLineToPoint: CGPointMake(211.94, 108.22)];
        [star27Path addLineToPoint: CGPointMake(217.33, 106.63)];
        [star27Path closePath];
        [color11 setFill];
        [star27Path fill];
        [shadow2Color setStroke];
        star27Path.lineWidth = 1;
        [star27Path stroke];


        //// Star 28 Drawing
        UIBezierPath* star28Path = [UIBezierPath bezierPath];
        [star28Path moveToPoint: CGPointMake(111.5, 6.5)];
        [star28Path addLineToPoint: CGPointMake(114.67, 11.13)];
        [star28Path addLineToPoint: CGPointMake(120.06, 12.72)];
        [star28Path addLineToPoint: CGPointMake(116.64, 17.17)];
        [star28Path addLineToPoint: CGPointMake(116.79, 22.78)];
        [star28Path addLineToPoint: CGPointMake(111.5, 20.9)];
        [star28Path addLineToPoint: CGPointMake(106.21, 22.78)];
        [star28Path addLineToPoint: CGPointMake(106.36, 17.17)];
        [star28Path addLineToPoint: CGPointMake(102.94, 12.72)];
        [star28Path addLineToPoint: CGPointMake(108.33, 11.13)];
        [star28Path closePath];
        [color11 setFill];
        [star28Path fill];
        [shadow2Color setStroke];
        star28Path.lineWidth = 1;
        [star28Path stroke];


        //// Star 29 Drawing
        UIBezierPath* star29Path = [UIBezierPath bezierPath];
        [star29Path moveToPoint: CGPointMake(189, 75)];
        [star29Path addLineToPoint: CGPointMake(191.12, 78.09)];
        [star29Path addLineToPoint: CGPointMake(194.71, 79.15)];
        [star29Path addLineToPoint: CGPointMake(192.42, 82.11)];
        [star29Path addLineToPoint: CGPointMake(192.53, 85.85)];
        [star29Path addLineToPoint: CGPointMake(189, 84.6)];
        [star29Path addLineToPoint: CGPointMake(185.47, 85.85)];
        [star29Path addLineToPoint: CGPointMake(185.58, 82.11)];
        [star29Path addLineToPoint: CGPointMake(183.29, 79.15)];
        [star29Path addLineToPoint: CGPointMake(186.88, 78.09)];
        [star29Path closePath];
        [color11 setFill];
        [star29Path fill];
        [shadow2Color setStroke];
        star29Path.lineWidth = 1;
        [star29Path stroke];


        //// Star 30 Drawing
        UIBezierPath* star30Path = [UIBezierPath bezierPath];
        [star30Path moveToPoint: CGPointMake(152.5, 83.5)];
        [star30Path addLineToPoint: CGPointMake(155.67, 88.13)];
        [star30Path addLineToPoint: CGPointMake(161.06, 89.72)];
        [star30Path addLineToPoint: CGPointMake(157.64, 94.17)];
        [star30Path addLineToPoint: CGPointMake(157.79, 99.78)];
        [star30Path addLineToPoint: CGPointMake(152.5, 97.9)];
        [star30Path addLineToPoint: CGPointMake(147.21, 99.78)];
        [star30Path addLineToPoint: CGPointMake(147.36, 94.17)];
        [star30Path addLineToPoint: CGPointMake(143.94, 89.72)];
        [star30Path addLineToPoint: CGPointMake(149.33, 88.13)];
        [star30Path closePath];
        [color11 setFill];
        [star30Path fill];
        [shadow2Color setStroke];
        star30Path.lineWidth = 1;
        [star30Path stroke];


        //// Star 31 Drawing
        UIBezierPath* star31Path = [UIBezierPath bezierPath];
        [star31Path moveToPoint: CGPointMake(348, 173.5)];
        [star31Path addLineToPoint: CGPointMake(351.88, 179.16)];
        [star31Path addLineToPoint: CGPointMake(358.46, 181.1)];
        [star31Path addLineToPoint: CGPointMake(354.28, 186.54)];
        [star31Path addLineToPoint: CGPointMake(354.47, 193.4)];
        [star31Path addLineToPoint: CGPointMake(348, 191.1)];
        [star31Path addLineToPoint: CGPointMake(341.53, 193.4)];
        [star31Path addLineToPoint: CGPointMake(341.72, 186.54)];
        [star31Path addLineToPoint: CGPointMake(337.54, 181.1)];
        [star31Path addLineToPoint: CGPointMake(344.12, 179.16)];
        [star31Path closePath];
        [color11 setFill];
        [star31Path fill];
        [shadow2Color setStroke];
        star31Path.lineWidth = 1;
        [star31Path stroke];


        //// Star 32 Drawing
        UIBezierPath* star32Path = [UIBezierPath bezierPath];
        [star32Path moveToPoint: CGPointMake(183, 146.5)];
        [star32Path addLineToPoint: CGPointMake(187.58, 153.19)];
        [star32Path addLineToPoint: CGPointMake(195.36, 155.48)];
        [star32Path addLineToPoint: CGPointMake(190.42, 161.91)];
        [star32Path addLineToPoint: CGPointMake(190.64, 170.02)];
        [star32Path addLineToPoint: CGPointMake(183, 167.3)];
        [star32Path addLineToPoint: CGPointMake(175.36, 170.02)];
        [star32Path addLineToPoint: CGPointMake(175.58, 161.91)];
        [star32Path addLineToPoint: CGPointMake(170.64, 155.48)];
        [star32Path addLineToPoint: CGPointMake(178.42, 153.19)];
        [star32Path closePath];
        [color11 setFill];
        [star32Path fill];
        [shadow2Color setStroke];
        star32Path.lineWidth = 1;
        [star32Path stroke];


        //// Star 33 Drawing
        UIBezierPath* star33Path = [UIBezierPath bezierPath];
        [star33Path moveToPoint: CGPointMake(198, 68.5)];
        [star33Path addLineToPoint: CGPointMake(199.06, 70.04)];
        [star33Path addLineToPoint: CGPointMake(200.85, 70.57)];
        [star33Path addLineToPoint: CGPointMake(199.71, 72.06)];
        [star33Path addLineToPoint: CGPointMake(199.76, 73.93)];
        [star33Path addLineToPoint: CGPointMake(198, 73.3)];
        [star33Path addLineToPoint: CGPointMake(196.24, 73.93)];
        [star33Path addLineToPoint: CGPointMake(196.29, 72.06)];
        [star33Path addLineToPoint: CGPointMake(195.15, 70.57)];
        [star33Path addLineToPoint: CGPointMake(196.94, 70.04)];
        [star33Path closePath];
        [color11 setFill];
        [star33Path fill];
        [shadow2Color setStroke];
        star33Path.lineWidth = 1;
        [star33Path stroke];


        //// Star 34 Drawing
        UIBezierPath* star34Path = [UIBezierPath bezierPath];
        [star34Path moveToPoint: CGPointMake(207, 62.5)];
        [star34Path addLineToPoint: CGPointMake(208.06, 64.04)];
        [star34Path addLineToPoint: CGPointMake(209.85, 64.57)];
        [star34Path addLineToPoint: CGPointMake(208.71, 66.06)];
        [star34Path addLineToPoint: CGPointMake(208.76, 67.93)];
        [star34Path addLineToPoint: CGPointMake(207, 67.3)];
        [star34Path addLineToPoint: CGPointMake(205.24, 67.93)];
        [star34Path addLineToPoint: CGPointMake(205.29, 66.06)];
        [star34Path addLineToPoint: CGPointMake(204.15, 64.57)];
        [star34Path addLineToPoint: CGPointMake(205.94, 64.04)];
        [star34Path closePath];
        [color11 setFill];
        [star34Path fill];
        [shadow2Color setStroke];
        star34Path.lineWidth = 1;
        [star34Path stroke];


        //// Star Drawing
        UIBezierPath* starPath = [UIBezierPath bezierPath];
        [starPath moveToPoint: CGPointMake(24, 134.5)];
        [starPath addLineToPoint: CGPointMake(28.58, 141.19)];
        [starPath addLineToPoint: CGPointMake(36.36, 143.48)];
        [starPath addLineToPoint: CGPointMake(31.42, 149.91)];
        [starPath addLineToPoint: CGPointMake(31.64, 158.02)];
        [starPath addLineToPoint: CGPointMake(24, 155.3)];
        [starPath addLineToPoint: CGPointMake(16.36, 158.02)];
        [starPath addLineToPoint: CGPointMake(16.58, 149.91)];
        [starPath addLineToPoint: CGPointMake(11.64, 143.48)];
        [starPath addLineToPoint: CGPointMake(19.42, 141.19)];
        [starPath closePath];
        [color11 setFill];
        [starPath fill];
        [shadow2Color setStroke];
        starPath.lineWidth = 1;
        [starPath stroke];


        //// Star 2 Drawing
        UIBezierPath* star2Path = [UIBezierPath bezierPath];
        [star2Path moveToPoint: CGPointMake(18.5, 29)];
        [star2Path addLineToPoint: CGPointMake(21.32, 33.12)];
        [star2Path addLineToPoint: CGPointMake(26.11, 34.53)];
        [star2Path addLineToPoint: CGPointMake(23.07, 38.48)];
        [star2Path addLineToPoint: CGPointMake(23.2, 43.47)];
        [star2Path addLineToPoint: CGPointMake(18.5, 41.8)];
        [star2Path addLineToPoint: CGPointMake(13.8, 43.47)];
        [star2Path addLineToPoint: CGPointMake(13.93, 38.48)];
        [star2Path addLineToPoint: CGPointMake(10.89, 34.53)];
        [star2Path addLineToPoint: CGPointMake(15.68, 33.12)];
        [star2Path closePath];
        [color11 setFill];
        [star2Path fill];
        [shadow2Color setStroke];
        star2Path.lineWidth = 1;
        [star2Path stroke];


        //// Star 3 Drawing
        UIBezierPath* star3Path = [UIBezierPath bezierPath];
        [star3Path moveToPoint: CGPointMake(50, 19)];
        [star3Path addLineToPoint: CGPointMake(52.12, 22.09)];
        [star3Path addLineToPoint: CGPointMake(55.71, 23.15)];
        [star3Path addLineToPoint: CGPointMake(53.42, 26.11)];
        [star3Path addLineToPoint: CGPointMake(53.53, 29.85)];
        [star3Path addLineToPoint: CGPointMake(50, 28.6)];
        [star3Path addLineToPoint: CGPointMake(46.47, 29.85)];
        [star3Path addLineToPoint: CGPointMake(46.58, 26.11)];
        [star3Path addLineToPoint: CGPointMake(44.29, 23.15)];
        [star3Path addLineToPoint: CGPointMake(47.88, 22.09)];
        [star3Path closePath];
        [color11 setFill];
        [star3Path fill];
        [shadow2Color setStroke];
        star3Path.lineWidth = 1;
        [star3Path stroke];


        //// Star 11 Drawing
        UIBezierPath* star11Path = [UIBezierPath bezierPath];
        [star11Path moveToPoint: CGPointMake(138.5, 48)];
        [star11Path addLineToPoint: CGPointMake(140.62, 51.09)];
        [star11Path addLineToPoint: CGPointMake(144.21, 52.15)];
        [star11Path addLineToPoint: CGPointMake(141.92, 55.11)];
        [star11Path addLineToPoint: CGPointMake(142.03, 58.85)];
        [star11Path addLineToPoint: CGPointMake(138.5, 57.6)];
        [star11Path addLineToPoint: CGPointMake(134.97, 58.85)];
        [star11Path addLineToPoint: CGPointMake(135.08, 55.11)];
        [star11Path addLineToPoint: CGPointMake(132.79, 52.15)];
        [star11Path addLineToPoint: CGPointMake(136.38, 51.09)];
        [star11Path closePath];
        [color11 setFill];
        [star11Path fill];
        [shadow2Color setStroke];
        star11Path.lineWidth = 1;
        [star11Path stroke];


        //// Star 6 Drawing
        UIBezierPath* star6Path = [UIBezierPath bezierPath];
        [star6Path moveToPoint: CGPointMake(79.5, 187.5)];
        [star6Path addLineToPoint: CGPointMake(83.03, 192.65)];
        [star6Path addLineToPoint: CGPointMake(89.01, 194.41)];
        [star6Path addLineToPoint: CGPointMake(85.21, 199.35)];
        [star6Path addLineToPoint: CGPointMake(85.38, 205.59)];
        [star6Path addLineToPoint: CGPointMake(79.5, 203.5)];
        [star6Path addLineToPoint: CGPointMake(73.62, 205.59)];
        [star6Path addLineToPoint: CGPointMake(73.79, 199.35)];
        [star6Path addLineToPoint: CGPointMake(69.99, 194.41)];
        [star6Path addLineToPoint: CGPointMake(75.97, 192.65)];
        [star6Path closePath];
        [color11 setFill];
        [star6Path fill];
        [shadow2Color setStroke];
        star6Path.lineWidth = 1;
        [star6Path stroke];


        //// Star 17 Drawing
        UIBezierPath* star17Path = [UIBezierPath bezierPath];
        [star17Path moveToPoint: CGPointMake(25.5, 93)];
        [star17Path addLineToPoint: CGPointMake(27.26, 95.57)];
        [star17Path addLineToPoint: CGPointMake(30.26, 96.45)];
        [star17Path addLineToPoint: CGPointMake(28.35, 98.93)];
        [star17Path addLineToPoint: CGPointMake(28.44, 102.05)];
        [star17Path addLineToPoint: CGPointMake(25.5, 101)];
        [star17Path addLineToPoint: CGPointMake(22.56, 102.05)];
        [star17Path addLineToPoint: CGPointMake(22.65, 98.93)];
        [star17Path addLineToPoint: CGPointMake(20.74, 96.45)];
        [star17Path addLineToPoint: CGPointMake(23.74, 95.57)];
        [star17Path closePath];
        [color11 setFill];
        [star17Path fill];
        [shadow2Color setStroke];
        star17Path.lineWidth = 1;
        [star17Path stroke];
    }


    //// Group 16
    {
        //// Group 18
        {
            //// Bezier 11 Drawing
            UIBezierPath* bezier11Path = [UIBezierPath bezierPath];
            [UIColor.blackColor setStroke];
            bezier11Path.lineWidth = 1;
            [bezier11Path stroke];
        }
    }


    //// Group 34
    {
        //// Star 7 Drawing
        UIBezierPath* star7Path = [UIBezierPath bezierPath];
        [star7Path moveToPoint: CGPointMake(329.5, 21)];
        [star7Path addLineToPoint: CGPointMake(332.32, 25.12)];
        [star7Path addLineToPoint: CGPointMake(337.11, 26.53)];
        [star7Path addLineToPoint: CGPointMake(334.07, 30.48)];
        [star7Path addLineToPoint: CGPointMake(334.2, 35.47)];
        [star7Path addLineToPoint: CGPointMake(329.5, 33.8)];
        [star7Path addLineToPoint: CGPointMake(324.8, 35.47)];
        [star7Path addLineToPoint: CGPointMake(324.93, 30.48)];
        [star7Path addLineToPoint: CGPointMake(321.89, 26.53)];
        [star7Path addLineToPoint: CGPointMake(326.68, 25.12)];
        [star7Path closePath];
        [color11 setFill];
        [star7Path fill];
        [shadow2Color setStroke];
        star7Path.lineWidth = 1;
        [star7Path stroke];


        //// Star 8 Drawing
        UIBezierPath* star8Path = [UIBezierPath bezierPath];
        [star8Path moveToPoint: CGPointMake(363.5, 44)];
        [star8Path addLineToPoint: CGPointMake(365.26, 46.57)];
        [star8Path addLineToPoint: CGPointMake(368.26, 47.45)];
        [star8Path addLineToPoint: CGPointMake(366.35, 49.93)];
        [star8Path addLineToPoint: CGPointMake(366.44, 53.05)];
        [star8Path addLineToPoint: CGPointMake(363.5, 52)];
        [star8Path addLineToPoint: CGPointMake(360.56, 53.05)];
        [star8Path addLineToPoint: CGPointMake(360.65, 49.93)];
        [star8Path addLineToPoint: CGPointMake(358.74, 47.45)];
        [star8Path addLineToPoint: CGPointMake(361.74, 46.57)];
        [star8Path closePath];
        [color11 setFill];
        [star8Path fill];
        [shadow2Color setStroke];
        star8Path.lineWidth = 1;
        [star8Path stroke];


        //// Star 13 Drawing
        UIBezierPath* star13Path = [UIBezierPath bezierPath];
        [star13Path moveToPoint: CGPointMake(260.5, 93.5)];
        [star13Path addLineToPoint: CGPointMake(263.67, 98.13)];
        [star13Path addLineToPoint: CGPointMake(269.06, 99.72)];
        [star13Path addLineToPoint: CGPointMake(265.64, 104.17)];
        [star13Path addLineToPoint: CGPointMake(265.79, 109.78)];
        [star13Path addLineToPoint: CGPointMake(260.5, 107.9)];
        [star13Path addLineToPoint: CGPointMake(255.21, 109.78)];
        [star13Path addLineToPoint: CGPointMake(255.36, 104.17)];
        [star13Path addLineToPoint: CGPointMake(251.94, 99.72)];
        [star13Path addLineToPoint: CGPointMake(257.33, 98.13)];
        [star13Path closePath];
        [color11 setFill];
        [star13Path fill];
        [shadow2Color setStroke];
        star13Path.lineWidth = 1;
        [star13Path stroke];


        //// Star 14 Drawing
        UIBezierPath* star14Path = [UIBezierPath bezierPath];
        [star14Path moveToPoint: CGPointMake(410, 136.5)];
        [star14Path addLineToPoint: CGPointMake(413.88, 142.16)];
        [star14Path addLineToPoint: CGPointMake(420.46, 144.1)];
        [star14Path addLineToPoint: CGPointMake(416.28, 149.54)];
        [star14Path addLineToPoint: CGPointMake(416.47, 156.4)];
        [star14Path addLineToPoint: CGPointMake(410, 154.1)];
        [star14Path addLineToPoint: CGPointMake(403.53, 156.4)];
        [star14Path addLineToPoint: CGPointMake(403.72, 149.54)];
        [star14Path addLineToPoint: CGPointMake(399.54, 144.1)];
        [star14Path addLineToPoint: CGPointMake(406.12, 142.16)];
        [star14Path closePath];
        [color11 setFill];
        [star14Path fill];
        [shadow2Color setStroke];
        star14Path.lineWidth = 1;
        [star14Path stroke];


        //// Star 15 Drawing
        UIBezierPath* star15Path = [UIBezierPath bezierPath];
        [star15Path moveToPoint: CGPointMake(279, 152.5)];
        [star15Path addLineToPoint: CGPointMake(283.58, 159.19)];
        [star15Path addLineToPoint: CGPointMake(291.36, 161.48)];
        [star15Path addLineToPoint: CGPointMake(286.42, 167.91)];
        [star15Path addLineToPoint: CGPointMake(286.64, 176.02)];
        [star15Path addLineToPoint: CGPointMake(279, 173.3)];
        [star15Path addLineToPoint: CGPointMake(271.36, 176.02)];
        [star15Path addLineToPoint: CGPointMake(271.58, 167.91)];
        [star15Path addLineToPoint: CGPointMake(266.64, 161.48)];
        [star15Path addLineToPoint: CGPointMake(274.42, 159.19)];
        [star15Path closePath];
        [color11 setFill];
        [star15Path fill];
        [shadow2Color setStroke];
        star15Path.lineWidth = 1;
        [star15Path stroke];


        //// Star 18 Drawing
        UIBezierPath* star18Path = [UIBezierPath bezierPath];
        [star18Path moveToPoint: CGPointMake(133, 131.5)];
        [star18Path addLineToPoint: CGPointMake(137.58, 138.19)];
        [star18Path addLineToPoint: CGPointMake(145.36, 140.48)];
        [star18Path addLineToPoint: CGPointMake(140.42, 146.91)];
        [star18Path addLineToPoint: CGPointMake(140.64, 155.02)];
        [star18Path addLineToPoint: CGPointMake(133, 152.3)];
        [star18Path addLineToPoint: CGPointMake(125.36, 155.02)];
        [star18Path addLineToPoint: CGPointMake(125.58, 146.91)];
        [star18Path addLineToPoint: CGPointMake(120.64, 140.48)];
        [star18Path addLineToPoint: CGPointMake(128.42, 138.19)];
        [star18Path closePath];
        [color11 setFill];
        [star18Path fill];
        [shadow2Color setStroke];
        star18Path.lineWidth = 1;
        [star18Path stroke];


        //// Star 20 Drawing
        UIBezierPath* star20Path = [UIBezierPath bezierPath];
        [star20Path moveToPoint: CGPointMake(159, 16)];
        [star20Path addLineToPoint: CGPointMake(161.12, 19.09)];
        [star20Path addLineToPoint: CGPointMake(164.71, 20.15)];
        [star20Path addLineToPoint: CGPointMake(162.42, 23.11)];
        [star20Path addLineToPoint: CGPointMake(162.53, 26.85)];
        [star20Path addLineToPoint: CGPointMake(159, 25.6)];
        [star20Path addLineToPoint: CGPointMake(155.47, 26.85)];
        [star20Path addLineToPoint: CGPointMake(155.58, 23.11)];
        [star20Path addLineToPoint: CGPointMake(153.29, 20.15)];
        [star20Path addLineToPoint: CGPointMake(156.88, 19.09)];
        [star20Path closePath];
        [color11 setFill];
        [star20Path fill];
        [shadow2Color setStroke];
        star20Path.lineWidth = 1;
        [star20Path stroke];


        //// Star 4 Drawing
        UIBezierPath* star4Path = [UIBezierPath bezierPath];
        [star4Path moveToPoint: CGPointMake(394.5, 65.5)];
        [star4Path addLineToPoint: CGPointMake(397.67, 70.13)];
        [star4Path addLineToPoint: CGPointMake(403.06, 71.72)];
        [star4Path addLineToPoint: CGPointMake(399.64, 76.17)];
        [star4Path addLineToPoint: CGPointMake(399.79, 81.78)];
        [star4Path addLineToPoint: CGPointMake(394.5, 79.9)];
        [star4Path addLineToPoint: CGPointMake(389.21, 81.78)];
        [star4Path addLineToPoint: CGPointMake(389.36, 76.17)];
        [star4Path addLineToPoint: CGPointMake(385.94, 71.72)];
        [star4Path addLineToPoint: CGPointMake(391.33, 70.13)];
        [star4Path closePath];
        [color11 setFill];
        [star4Path fill];
        [shadow2Color setStroke];
        star4Path.lineWidth = 1;
        [star4Path stroke];


        //// Star 9 Drawing
        UIBezierPath* star9Path = [UIBezierPath bezierPath];
        [star9Path moveToPoint: CGPointMake(380.5, 128)];
        [star9Path addLineToPoint: CGPointMake(381.91, 130.06)];
        [star9Path addLineToPoint: CGPointMake(384.3, 130.76)];
        [star9Path addLineToPoint: CGPointMake(382.78, 132.74)];
        [star9Path addLineToPoint: CGPointMake(382.85, 135.24)];
        [star9Path addLineToPoint: CGPointMake(380.5, 134.4)];
        [star9Path addLineToPoint: CGPointMake(378.15, 135.24)];
        [star9Path addLineToPoint: CGPointMake(378.22, 132.74)];
        [star9Path addLineToPoint: CGPointMake(376.7, 130.76)];
        [star9Path addLineToPoint: CGPointMake(379.09, 130.06)];
        [star9Path closePath];
        [color11 setFill];
        [star9Path fill];
        [shadow2Color setStroke];
        star9Path.lineWidth = 1;
        [star9Path stroke];


        //// Star 10 Drawing
        UIBezierPath* star10Path = [UIBezierPath bezierPath];
        [star10Path moveToPoint: CGPointMake(330.5, 131.5)];
        [star10Path addLineToPoint: CGPointMake(332.62, 134.59)];
        [star10Path addLineToPoint: CGPointMake(336.21, 135.65)];
        [star10Path addLineToPoint: CGPointMake(333.92, 138.61)];
        [star10Path addLineToPoint: CGPointMake(334.03, 142.35)];
        [star10Path addLineToPoint: CGPointMake(330.5, 141.1)];
        [star10Path addLineToPoint: CGPointMake(326.97, 142.35)];
        [star10Path addLineToPoint: CGPointMake(327.08, 138.61)];
        [star10Path addLineToPoint: CGPointMake(324.79, 135.65)];
        [star10Path addLineToPoint: CGPointMake(328.38, 134.59)];
        [star10Path closePath];
        [color11 setFill];
        [star10Path fill];
        [shadow2Color setStroke];
        star10Path.lineWidth = 1;
        [star10Path stroke];


        //// Star 12 Drawing
        UIBezierPath* star12Path = [UIBezierPath bezierPath];
        [star12Path moveToPoint: CGPointMake(370, 9.5)];
        [star12Path addLineToPoint: CGPointMake(372.12, 12.59)];
        [star12Path addLineToPoint: CGPointMake(375.71, 13.65)];
        [star12Path addLineToPoint: CGPointMake(373.42, 16.61)];
        [star12Path addLineToPoint: CGPointMake(373.53, 20.35)];
        [star12Path addLineToPoint: CGPointMake(370, 19.1)];
        [star12Path addLineToPoint: CGPointMake(366.47, 20.35)];
        [star12Path addLineToPoint: CGPointMake(366.58, 16.61)];
        [star12Path addLineToPoint: CGPointMake(364.29, 13.65)];
        [star12Path addLineToPoint: CGPointMake(367.88, 12.59)];
        [star12Path closePath];
        [color11 setFill];
        [star12Path fill];
        [shadow2Color setStroke];
        star12Path.lineWidth = 1;
        [star12Path stroke];


        //// Star 16 Drawing
        UIBezierPath* star16Path = [UIBezierPath bezierPath];
        [star16Path moveToPoint: CGPointMake(406, 23.5)];
        [star16Path addLineToPoint: CGPointMake(408.12, 26.59)];
        [star16Path addLineToPoint: CGPointMake(411.71, 27.65)];
        [star16Path addLineToPoint: CGPointMake(409.42, 30.61)];
        [star16Path addLineToPoint: CGPointMake(409.53, 34.35)];
        [star16Path addLineToPoint: CGPointMake(406, 33.1)];
        [star16Path addLineToPoint: CGPointMake(402.47, 34.35)];
        [star16Path addLineToPoint: CGPointMake(402.58, 30.61)];
        [star16Path addLineToPoint: CGPointMake(400.29, 27.65)];
        [star16Path addLineToPoint: CGPointMake(403.88, 26.59)];
        [star16Path closePath];
        [color11 setFill];
        [star16Path fill];
        [shadow2Color setStroke];
        star16Path.lineWidth = 1;
        [star16Path stroke];
    }


    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [color5 setFill];
    [bezierPath fill];
    [UIColor.blackColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Cleanup
    CGGradientRelease(tableViewGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas82
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color7 = [UIColor colorWithRed: 0.644 green: 0.169 blue: 0.012 alpha: 1];
    UIColor* sunBallGradientColor = [UIColor colorWithRed: 0.989 green: 0.508 blue: 0.012 alpha: 0.733];
    UIColor* sunBallGradientColor2 = [UIColor colorWithRed: 0.938 green: 0.137 blue: 0 alpha: 0.834];
    UIColor* sunStarDradientColor = [UIColor colorWithRed: 1 green: 0.765 blue: 0 alpha: 0.841];
    UIColor* sunStarDradientColor2 = [UIColor colorWithRed: 1 green: 0.386 blue: 0 alpha: 0.94];
    UIColor* lightningShadowColor = [UIColor colorWithRed: 1 green: 0.979 blue: 0.615 alpha: 1];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Gradient Declarations
    CGFloat sunBallGradientLocations[] = {0, 0.75, 1};
    CGGradientRef sunBallGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunBallGradientColor.CGColor, (id)[sunBallGradientColor blendedColorWithFraction: 0.5 ofColor: sunBallGradientColor2].CGColor, (id)sunBallGradientColor2.CGColor], sunBallGradientLocations);
    CGFloat sunStarDradientLocations[] = {0, 1};
    CGGradientRef sunStarDradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunStarDradientColor.CGColor, (id)sunStarDradientColor2.CGColor], sunStarDradientLocations);

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* lightningShadow = [[NSShadow alloc] init];
    [lightningShadow setShadowColor: lightningShadowColor];
    [lightningShadow setShadowOffset: CGSizeMake(0.1, 16.1)];
    [lightningShadow setShadowBlurRadius: 11];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 19
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, lightningShadow.shadowOffset, lightningShadow.shadowBlurRadius, [lightningShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(93.71, 57.89)];
        [bezierPath addLineToPoint: CGPointMake(101.58, 43.17)];
        [bezierPath addLineToPoint: CGPointMake(101.58, 62.8)];
        [bezierPath addLineToPoint: CGPointMake(125.17, 26.81)];
        [bezierPath addLineToPoint: CGPointMake(115.73, 67.71)];
        [bezierPath addLineToPoint: CGPointMake(139.33, 57.89)];
        [bezierPath addLineToPoint: CGPointMake(125.17, 75.89)];
        [bezierPath addLineToPoint: CGPointMake(175.5, 62.8)];
        [bezierPath addLineToPoint: CGPointMake(133.03, 95.52)];
        [bezierPath addLineToPoint: CGPointMake(147.19, 100.42)];
        [bezierPath addLineToPoint: CGPointMake(133.03, 108.6)];
        [bezierPath addLineToPoint: CGPointMake(162.92, 138.05)];
        [bezierPath addLineToPoint: CGPointMake(125.17, 123.33)];
        [bezierPath addLineToPoint: CGPointMake(125.41, 138.25)];
        [bezierPath addLineToPoint: CGPointMake(115.73, 133.14)];
        [bezierPath addLineToPoint: CGPointMake(125.41, 164.95)];
        [bezierPath addLineToPoint: CGPointMake(101.58, 138.05)];
        [bezierPath addLineToPoint: CGPointMake(93.43, 155.34)];
        [bezierPath addLineToPoint: CGPointMake(87.42, 138.05)];
        [bezierPath addLineToPoint: CGPointMake(75.32, 173.5)];
        [bezierPath addLineToPoint: CGPointMake(74.84, 138.05)];
        [bezierPath addLineToPoint: CGPointMake(60.68, 142.95)];
        [bezierPath addLineToPoint: CGPointMake(63.83, 126.6)];
        [bezierPath addLineToPoint: CGPointMake(29.23, 149.5)];
        [bezierPath addLineToPoint: CGPointMake(55.97, 113.51)];
        [bezierPath addLineToPoint: CGPointMake(37.09, 108.6)];
        [bezierPath addLineToPoint: CGPointMake(55.97, 100.42)];
        [bezierPath addLineToPoint: CGPointMake(13.5, 67.71)];
        [bezierPath addLineToPoint: CGPointMake(55.97, 82.43)];
        [bezierPath addLineToPoint: CGPointMake(46.53, 67.71)];
        [bezierPath addLineToPoint: CGPointMake(60.68, 75.89)];
        [bezierPath addLineToPoint: CGPointMake(37.09, 26.81)];
        [bezierPath addLineToPoint: CGPointMake(74.84, 67.71)];
        [bezierPath addLineToPoint: CGPointMake(74.84, 52.99)];
        [bezierPath addLineToPoint: CGPointMake(74.84, 52.99)];
        [bezierPath addLineToPoint: CGPointMake(81.13, 62.8)];
        [bezierPath addLineToPoint: CGPointMake(81.13, 17)];
        [bezierPath addLineToPoint: CGPointMake(93.71, 57.89)];
        [bezierPath closePath];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        [lightningShadowColor setFill];
        [bezierPath fill];
        CGContextRestoreGState(context);



        //// Bezier 13 Drawing
        UIBezierPath* bezier13Path = [UIBezierPath bezierPath];
        [bezier13Path moveToPoint: CGPointMake(93.67, 54.98)];
        [bezier13Path addLineToPoint: CGPointMake(101.93, 39.51)];
        [bezier13Path addLineToPoint: CGPointMake(101.93, 60.14)];
        [bezier13Path addLineToPoint: CGPointMake(126.68, 22.32)];
        [bezier13Path addLineToPoint: CGPointMake(116.78, 65.3)];
        [bezier13Path addLineToPoint: CGPointMake(141.54, 54.98)];
        [bezier13Path addLineToPoint: CGPointMake(126.68, 73.9)];
        [bezier13Path addLineToPoint: CGPointMake(179.5, 60.14)];
        [bezier13Path addLineToPoint: CGPointMake(134.94, 94.53)];
        [bezier13Path addLineToPoint: CGPointMake(149.79, 99.69)];
        [bezier13Path addLineToPoint: CGPointMake(134.94, 108.29)];
        [bezier13Path addLineToPoint: CGPointMake(166.3, 139.23)];
        [bezier13Path addLineToPoint: CGPointMake(126.68, 123.76)];
        [bezier13Path addLineToPoint: CGPointMake(126.93, 139.45)];
        [bezier13Path addLineToPoint: CGPointMake(116.78, 134.08)];
        [bezier13Path addLineToPoint: CGPointMake(126.93, 167.52)];
        [bezier13Path addLineToPoint: CGPointMake(101.93, 139.23)];
        [bezier13Path addLineToPoint: CGPointMake(93.38, 157.41)];
        [bezier13Path addLineToPoint: CGPointMake(87.07, 139.23)];
        [bezier13Path addLineToPoint: CGPointMake(74.37, 176.5)];
        [bezier13Path addLineToPoint: CGPointMake(73.87, 139.23)];
        [bezier13Path addLineToPoint: CGPointMake(59.01, 144.39)];
        [bezier13Path addLineToPoint: CGPointMake(62.32, 127.2)];
        [bezier13Path addLineToPoint: CGPointMake(26, 151.27)];
        [bezier13Path addLineToPoint: CGPointMake(54.06, 113.44)];
        [bezier13Path addLineToPoint: CGPointMake(34.26, 108.29)];
        [bezier13Path addLineToPoint: CGPointMake(54.06, 99.69)];
        [bezier13Path addLineToPoint: CGPointMake(9.5, 65.3)];
        [bezier13Path addLineToPoint: CGPointMake(54.06, 80.78)];
        [bezier13Path addLineToPoint: CGPointMake(44.16, 65.3)];
        [bezier13Path addLineToPoint: CGPointMake(59.01, 73.9)];
        [bezier13Path addLineToPoint: CGPointMake(34.26, 22.32)];
        [bezier13Path addLineToPoint: CGPointMake(73.87, 65.3)];
        [bezier13Path addLineToPoint: CGPointMake(73.87, 49.83)];
        [bezier13Path addLineToPoint: CGPointMake(73.87, 49.83)];
        [bezier13Path addLineToPoint: CGPointMake(80.47, 60.14)];
        [bezier13Path addLineToPoint: CGPointMake(80.47, 12)];
        [bezier13Path addLineToPoint: CGPointMake(93.67, 54.98)];
        [bezier13Path closePath];
        CGContextSaveGState(context);
        [bezier13Path addClip];
        CGContextDrawLinearGradient(context, sunStarDradient, CGPointMake(94.5, 12), CGPointMake(94.5, 176.5), 0);
        CGContextRestoreGState(context);

        ////// Bezier 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(bezier13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [bezier13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color7 setStroke];
        bezier13Path.lineWidth = 1;
        [bezier13Path stroke];


        //// Oval 79 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 94.18, 99.14);
        CGContextRotateCTM(context, -0.02 * M_PI / 180);

        UIBezierPath* oval79Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-38.1, -39.09, 76.21, 78.19)];
        CGContextSaveGState(context);
        [oval79Path addClip];
        CGContextDrawLinearGradient(context, sunBallGradient, CGPointMake(0, -39.09), CGPointMake(0, 39.09), 0);
        CGContextRestoreGState(context);

        ////// Oval 79 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval79Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval79Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color7 setStroke];
        oval79Path.lineWidth = 1;
        [oval79Path stroke];

        CGContextRestoreGState(context);


        //// Oval 80 Drawing
        UIBezierPath* oval80Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(55.5, 66.5, 66.5, 64)];
        [color7 setStroke];
        oval80Path.lineWidth = 1;
        [oval80Path stroke];


        //// Oval 81 Drawing
        UIBezierPath* oval81Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(65.5, 67, 48.5, 52.5)];
        [color7 setStroke];
        oval81Path.lineWidth = 1;
        [oval81Path stroke];


        //// Oval 82 Drawing
        UIBezierPath* oval82Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(75.5, 74.5, 37.5, 39)];
        [color7 setStroke];
        oval82Path.lineWidth = 1;
        [oval82Path stroke];


        //// Oval 83 Drawing
        UIBezierPath* oval83Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(81.5, 85, 26, 28)];
        [color7 setStroke];
        oval83Path.lineWidth = 1;
        [oval83Path stroke];


        //// Oval 84 Drawing
        UIBezierPath* oval84Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(82.5, 90, 16, 18)];
        [color7 setStroke];
        oval84Path.lineWidth = 1;
        [oval84Path stroke];


        //// Oval 85 Drawing
        UIBezierPath* oval85Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(86.5, 91, 8, 9.5)];
        [color7 setStroke];
        oval85Path.lineWidth = 1;
        [oval85Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(sunBallGradient);
    CGGradientRelease(sunStarDradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas83
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* moonGradientColor = [UIColor colorWithRed: 1 green: 0.945 blue: 0.698 alpha: 1];
    UIColor* moonGradientColor2 = [UIColor colorWithRed: 0.538 green: 0.507 blue: 0.337 alpha: 1];
    UIColor* darkSideMoonGradientColor = [UIColor colorWithRed: 0.723 green: 0.715 blue: 0.715 alpha: 1];
    UIColor* darkSideMoonGradientColor2 = [UIColor colorWithRed: 0.189 green: 0.184 blue: 0.184 alpha: 1];
    UIColor* color5 = [UIColor colorWithRed: 0 green: 0.331 blue: 1 alpha: 1];

    //// Gradient Declarations
    CGFloat lightSideMoonGradientLocations[] = {0, 0.77, 1};
    CGGradientRef lightSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)moonGradientColor.CGColor, (id)[moonGradientColor blendedColorWithFraction: 0.5 ofColor: moonGradientColor2].CGColor, (id)moonGradientColor2.CGColor], lightSideMoonGradientLocations);
    CGFloat darkSideMoonGradientLocations[] = {0, 0.55, 1};
    CGGradientRef darkSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)darkSideMoonGradientColor.CGColor, (id)[darkSideMoonGradientColor blendedColorWithFraction: 0.5 ofColor: darkSideMoonGradientColor2].CGColor, (id)darkSideMoonGradientColor2.CGColor], darkSideMoonGradientLocations);

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* innerMoonDarksideShadow = [[NSShadow alloc] init];
    [innerMoonDarksideShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.43]];
    [innerMoonDarksideShadow setShadowOffset: CGSizeMake(-9.1, 1.1)];
    [innerMoonDarksideShadow setShadowBlurRadius: 10];

    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 333, 92);
        CGContextRotateCTM(context, -0.04 * M_PI / 180);

        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-42.5, -42.5, 85, 85)];
        CGContextSaveGState(context);
        [ovalPath addClip];
        CGContextDrawLinearGradient(context, darkSideMoonGradient, CGPointMake(0, -42.5), CGPointMake(0, 42.5), 0);
        CGContextRestoreGState(context);

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([innerMoonDarksideShadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [innerMoonDarksideShadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, innerMoonDarksideShadow.shadowOffset, innerMoonDarksideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];

        CGContextRestoreGState(context);


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPath];
        [oval2Path moveToPoint: CGPointMake(319.13, 71.2)];
        [oval2Path addCurveToPoint: CGPointMake(316.76, 82.13) controlPoint1: CGPointMake(320.29, 73.02) controlPoint2: CGPointMake(318.1, 77.67)];
        [oval2Path addCurveToPoint: CGPointMake(319.13, 91.77) controlPoint1: CGPointMake(315.46, 86.46) controlPoint2: CGPointMake(315.68, 88.77)];
        [oval2Path addCurveToPoint: CGPointMake(314.52, 98.01) controlPoint1: CGPointMake(321.28, 93.64) controlPoint2: CGPointMake(315.22, 96.83)];
        [oval2Path addCurveToPoint: CGPointMake(311.75, 109.85) controlPoint1: CGPointMake(312.67, 101.12) controlPoint2: CGPointMake(311.75, 104.95)];
        [oval2Path addCurveToPoint: CGPointMake(330.5, 134.17) controlPoint1: CGPointMake(311.75, 133.1) controlPoint2: CGPointMake(353.43, 134.17)];
        [oval2Path addCurveToPoint: CGPointMake(289, 92.08) controlPoint1: CGPointMake(307.58, 134.17) controlPoint2: CGPointMake(289, 115.33)];
        [oval2Path addCurveToPoint: CGPointMake(330.5, 50) controlPoint1: CGPointMake(289, 68.84) controlPoint2: CGPointMake(307.58, 50)];
        [oval2Path addCurveToPoint: CGPointMake(319.13, 71.2) controlPoint1: CGPointMake(340.81, 50) controlPoint2: CGPointMake(315.16, 64.97)];
        [oval2Path closePath];
        CGContextSaveGState(context);
        [oval2Path addClip];
        CGContextDrawLinearGradient(context, lightSideMoonGradient, CGPointMake(313.19, 50), CGPointMake(313.19, 134.17), 0);
        CGContextRestoreGState(context);
        [color setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [color5 setFill];
    [bezierPath fill];
    [UIColor.blackColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Cleanup
    CGGradientRelease(lightSideMoonGradient);
    CGGradientRelease(darkSideMoonGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas78
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* color11 = [UIColor colorWithRed: 0.917 green: 0.865 blue: 0.629 alpha: 0.976];
    UIColor* shadow2Color = [UIColor colorWithRed: 1 green: 0.799 blue: 0.229 alpha: 1];
    UIColor* moonGradientColor = [UIColor colorWithRed: 1 green: 0.945 blue: 0.698 alpha: 1];
    UIColor* moonGradientColor2 = [UIColor colorWithRed: 0.538 green: 0.507 blue: 0.337 alpha: 1];
    UIColor* darkSideMoonGradientColor = [UIColor colorWithRed: 0.723 green: 0.715 blue: 0.715 alpha: 1];
    UIColor* darkSideMoonGradientColor2 = [UIColor colorWithRed: 0.189 green: 0.184 blue: 0.184 alpha: 1];
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* innerMoonShadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Gradient Declarations
    CGFloat lightSideMoonGradientLocations[] = {0, 0.77, 1};
    CGGradientRef lightSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)moonGradientColor.CGColor, (id)[moonGradientColor blendedColorWithFraction: 0.5 ofColor: moonGradientColor2].CGColor, (id)moonGradientColor2.CGColor], lightSideMoonGradientLocations);
    CGFloat darkSideMoonGradientLocations[] = {0, 0.55, 1};
    CGGradientRef darkSideMoonGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)darkSideMoonGradientColor.CGColor, (id)[darkSideMoonGradientColor blendedColorWithFraction: 0.5 ofColor: darkSideMoonGradientColor2].CGColor, (id)darkSideMoonGradientColor2.CGColor], darkSideMoonGradientLocations);

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* moonFrontShadow = [[NSShadow alloc] init];
    [moonFrontShadow setShadowColor: [moonFrontShadowColor colorWithAlphaComponent: CGColorGetAlpha(moonFrontShadowColor.CGColor) * 0.17]];
    [moonFrontShadow setShadowOffset: CGSizeMake(-33.1, 66.1)];
    [moonFrontShadow setShadowBlurRadius: 57];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];
    NSShadow* innerMoonLightSideShadow = [[NSShadow alloc] init];
    [innerMoonLightSideShadow setShadowColor: [innerMoonShadowColor colorWithAlphaComponent: CGColorGetAlpha(innerMoonShadowColor.CGColor) * 0.5]];
    [innerMoonLightSideShadow setShadowOffset: CGSizeMake(-1.1, -1.1)];
    [innerMoonLightSideShadow setShadowBlurRadius: 2];
    NSShadow* innerMoonDarksideShadow = [[NSShadow alloc] init];
    [innerMoonDarksideShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.43]];
    [innerMoonDarksideShadow setShadowOffset: CGSizeMake(-9.1, 1.1)];
    [innerMoonDarksideShadow setShadowBlurRadius: 10];

    //// Star 15 Drawing
    UIBezierPath* star15Path = [UIBezierPath bezierPath];
    [star15Path moveToPoint: CGPointMake(282.5, 11.5)];
    [star15Path addLineToPoint: CGPointMake(286.03, 16.65)];
    [star15Path addLineToPoint: CGPointMake(292.01, 18.41)];
    [star15Path addLineToPoint: CGPointMake(288.21, 23.35)];
    [star15Path addLineToPoint: CGPointMake(288.38, 29.59)];
    [star15Path addLineToPoint: CGPointMake(282.5, 27.5)];
    [star15Path addLineToPoint: CGPointMake(276.62, 29.59)];
    [star15Path addLineToPoint: CGPointMake(276.79, 23.35)];
    [star15Path addLineToPoint: CGPointMake(272.99, 18.41)];
    [star15Path addLineToPoint: CGPointMake(278.97, 16.65)];
    [star15Path closePath];
    [color11 setFill];
    [star15Path fill];
    [shadow2Color setStroke];
    star15Path.lineWidth = 1;
    [star15Path stroke];


    //// Bezier 8 Drawing
    UIBezierPath* bezier8Path = [UIBezierPath bezierPath];
    [UIColor.blackColor setStroke];
    bezier8Path.lineWidth = 1;
    [bezier8Path stroke];


    //// Star 5 Drawing
    UIBezierPath* star5Path = [UIBezierPath bezierPath];
    [star5Path moveToPoint: CGPointMake(203, 20)];
    [star5Path addLineToPoint: CGPointMake(207.58, 26.69)];
    [star5Path addLineToPoint: CGPointMake(215.36, 28.98)];
    [star5Path addLineToPoint: CGPointMake(210.42, 35.41)];
    [star5Path addLineToPoint: CGPointMake(210.64, 43.52)];
    [star5Path addLineToPoint: CGPointMake(203, 40.8)];
    [star5Path addLineToPoint: CGPointMake(195.36, 43.52)];
    [star5Path addLineToPoint: CGPointMake(195.58, 35.41)];
    [star5Path addLineToPoint: CGPointMake(190.64, 28.98)];
    [star5Path addLineToPoint: CGPointMake(198.42, 26.69)];
    [star5Path closePath];
    [color11 setFill];
    [star5Path fill];
    [shadow2Color setStroke];
    star5Path.lineWidth = 1;
    [star5Path stroke];


    //// Group 2
    {
        //// Star 18 Drawing
        UIBezierPath* star18Path = [UIBezierPath bezierPath];
        [star18Path moveToPoint: CGPointMake(364.5, 72.5)];
        [star18Path addLineToPoint: CGPointMake(367.32, 76.62)];
        [star18Path addLineToPoint: CGPointMake(372.11, 78.03)];
        [star18Path addLineToPoint: CGPointMake(369.07, 81.98)];
        [star18Path addLineToPoint: CGPointMake(369.2, 86.97)];
        [star18Path addLineToPoint: CGPointMake(364.5, 85.3)];
        [star18Path addLineToPoint: CGPointMake(359.8, 86.97)];
        [star18Path addLineToPoint: CGPointMake(359.93, 81.98)];
        [star18Path addLineToPoint: CGPointMake(356.89, 78.03)];
        [star18Path addLineToPoint: CGPointMake(361.68, 76.62)];
        [star18Path closePath];
        [color11 setFill];
        [star18Path fill];
        [shadow2Color setStroke];
        star18Path.lineWidth = 1;
        [star18Path stroke];


        //// Star 12 Drawing
        UIBezierPath* star12Path = [UIBezierPath bezierPath];
        [star12Path moveToPoint: CGPointMake(344.5, 9.5)];
        [star12Path addLineToPoint: CGPointMake(347.67, 14.13)];
        [star12Path addLineToPoint: CGPointMake(353.06, 15.72)];
        [star12Path addLineToPoint: CGPointMake(349.64, 20.17)];
        [star12Path addLineToPoint: CGPointMake(349.79, 25.78)];
        [star12Path addLineToPoint: CGPointMake(344.5, 23.9)];
        [star12Path addLineToPoint: CGPointMake(339.21, 25.78)];
        [star12Path addLineToPoint: CGPointMake(339.36, 20.17)];
        [star12Path addLineToPoint: CGPointMake(335.94, 15.72)];
        [star12Path addLineToPoint: CGPointMake(341.33, 14.13)];
        [star12Path closePath];
        [color11 setFill];
        [star12Path fill];
        [shadow2Color setStroke];
        star12Path.lineWidth = 1;
        [star12Path stroke];


        //// Star 16 Drawing
        UIBezierPath* star16Path = [UIBezierPath bezierPath];
        [star16Path moveToPoint: CGPointMake(400, 11)];
        [star16Path addLineToPoint: CGPointMake(402.82, 15.12)];
        [star16Path addLineToPoint: CGPointMake(407.61, 16.53)];
        [star16Path addLineToPoint: CGPointMake(404.57, 20.48)];
        [star16Path addLineToPoint: CGPointMake(404.7, 25.47)];
        [star16Path addLineToPoint: CGPointMake(400, 23.8)];
        [star16Path addLineToPoint: CGPointMake(395.3, 25.47)];
        [star16Path addLineToPoint: CGPointMake(395.43, 20.48)];
        [star16Path addLineToPoint: CGPointMake(392.39, 16.53)];
        [star16Path addLineToPoint: CGPointMake(397.18, 15.12)];
        [star16Path closePath];
        [color11 setFill];
        [star16Path fill];
        [shadow2Color setStroke];
        star16Path.lineWidth = 1;
        [star16Path stroke];


        //// Star 19 Drawing
        UIBezierPath* star19Path = [UIBezierPath bezierPath];
        [star19Path moveToPoint: CGPointMake(378.5, 42.5)];
        [star19Path addLineToPoint: CGPointMake(380.26, 45.07)];
        [star19Path addLineToPoint: CGPointMake(383.26, 45.95)];
        [star19Path addLineToPoint: CGPointMake(381.35, 48.43)];
        [star19Path addLineToPoint: CGPointMake(381.44, 51.55)];
        [star19Path addLineToPoint: CGPointMake(378.5, 50.5)];
        [star19Path addLineToPoint: CGPointMake(375.56, 51.55)];
        [star19Path addLineToPoint: CGPointMake(375.65, 48.43)];
        [star19Path addLineToPoint: CGPointMake(373.74, 45.95)];
        [star19Path addLineToPoint: CGPointMake(376.74, 45.07)];
        [star19Path closePath];
        [color11 setFill];
        [star19Path fill];
        [shadow2Color setStroke];
        star19Path.lineWidth = 1;
        [star19Path stroke];


        //// Star 20 Drawing
        UIBezierPath* star20Path = [UIBezierPath bezierPath];
        [star20Path moveToPoint: CGPointMake(400, 100)];
        [star20Path addLineToPoint: CGPointMake(404.94, 107.2)];
        [star20Path addLineToPoint: CGPointMake(413.31, 109.67)];
        [star20Path addLineToPoint: CGPointMake(407.99, 116.6)];
        [star20Path addLineToPoint: CGPointMake(408.23, 125.33)];
        [star20Path addLineToPoint: CGPointMake(400, 122.4)];
        [star20Path addLineToPoint: CGPointMake(391.77, 125.33)];
        [star20Path addLineToPoint: CGPointMake(392.01, 116.6)];
        [star20Path addLineToPoint: CGPointMake(386.69, 109.67)];
        [star20Path addLineToPoint: CGPointMake(395.06, 107.2)];
        [star20Path closePath];
        [color11 setFill];
        [star20Path fill];
        [shadow2Color setStroke];
        star20Path.lineWidth = 1;
        [star20Path stroke];


        //// Star 13 Drawing
        UIBezierPath* star13Path = [UIBezierPath bezierPath];
        [star13Path moveToPoint: CGPointMake(348.5, 150.5)];
        [star13Path addLineToPoint: CGPointMake(352.73, 156.68)];
        [star13Path addLineToPoint: CGPointMake(359.91, 158.79)];
        [star13Path addLineToPoint: CGPointMake(355.35, 164.72)];
        [star13Path addLineToPoint: CGPointMake(355.55, 172.21)];
        [star13Path addLineToPoint: CGPointMake(348.5, 169.7)];
        [star13Path addLineToPoint: CGPointMake(341.45, 172.21)];
        [star13Path addLineToPoint: CGPointMake(341.65, 164.72)];
        [star13Path addLineToPoint: CGPointMake(337.09, 158.79)];
        [star13Path addLineToPoint: CGPointMake(344.27, 156.68)];
        [star13Path closePath];
        [color11 setFill];
        [star13Path fill];
        [shadow2Color setStroke];
        star13Path.lineWidth = 1;
        [star13Path stroke];


        //// Star 23 Drawing
        UIBezierPath* star23Path = [UIBezierPath bezierPath];
        [star23Path moveToPoint: CGPointMake(297.5, 67)];
        [star23Path addLineToPoint: CGPointMake(299.26, 69.57)];
        [star23Path addLineToPoint: CGPointMake(302.26, 70.45)];
        [star23Path addLineToPoint: CGPointMake(300.35, 72.93)];
        [star23Path addLineToPoint: CGPointMake(300.44, 76.05)];
        [star23Path addLineToPoint: CGPointMake(297.5, 75)];
        [star23Path addLineToPoint: CGPointMake(294.56, 76.05)];
        [star23Path addLineToPoint: CGPointMake(294.65, 72.93)];
        [star23Path addLineToPoint: CGPointMake(292.74, 70.45)];
        [star23Path addLineToPoint: CGPointMake(295.74, 69.57)];
        [star23Path closePath];
        [color11 setFill];
        [star23Path fill];
        [shadow2Color setStroke];
        star23Path.lineWidth = 1;
        [star23Path stroke];
    }


    //// Group
    {
        //// Star Drawing
        UIBezierPath* starPath = [UIBezierPath bezierPath];
        [starPath moveToPoint: CGPointMake(44.5, 60.5)];
        [starPath addLineToPoint: CGPointMake(47.32, 64.62)];
        [starPath addLineToPoint: CGPointMake(52.11, 66.03)];
        [starPath addLineToPoint: CGPointMake(49.07, 69.98)];
        [starPath addLineToPoint: CGPointMake(49.2, 74.97)];
        [starPath addLineToPoint: CGPointMake(44.5, 73.3)];
        [starPath addLineToPoint: CGPointMake(39.8, 74.97)];
        [starPath addLineToPoint: CGPointMake(39.93, 69.98)];
        [starPath addLineToPoint: CGPointMake(36.89, 66.03)];
        [starPath addLineToPoint: CGPointMake(41.68, 64.62)];
        [starPath closePath];
        [color11 setFill];
        [starPath fill];
        [shadow2Color setStroke];
        starPath.lineWidth = 1;
        [starPath stroke];


        //// Star 2 Drawing
        UIBezierPath* star2Path = [UIBezierPath bezierPath];
        [star2Path moveToPoint: CGPointMake(106, 58)];
        [star2Path addLineToPoint: CGPointMake(108.47, 61.6)];
        [star2Path addLineToPoint: CGPointMake(112.66, 62.84)];
        [star2Path addLineToPoint: CGPointMake(109.99, 66.3)];
        [star2Path addLineToPoint: CGPointMake(110.11, 70.66)];
        [star2Path addLineToPoint: CGPointMake(106, 69.2)];
        [star2Path addLineToPoint: CGPointMake(101.89, 70.66)];
        [star2Path addLineToPoint: CGPointMake(102.01, 66.3)];
        [star2Path addLineToPoint: CGPointMake(99.34, 62.84)];
        [star2Path addLineToPoint: CGPointMake(103.53, 61.6)];
        [star2Path closePath];
        [color11 setFill];
        [star2Path fill];
        [shadow2Color setStroke];
        star2Path.lineWidth = 1;
        [star2Path stroke];


        //// Star 3 Drawing
        UIBezierPath* star3Path = [UIBezierPath bezierPath];
        [star3Path moveToPoint: CGPointMake(108, 14)];
        [star3Path addLineToPoint: CGPointMake(111.17, 18.63)];
        [star3Path addLineToPoint: CGPointMake(116.56, 20.22)];
        [star3Path addLineToPoint: CGPointMake(113.14, 24.67)];
        [star3Path addLineToPoint: CGPointMake(113.29, 30.28)];
        [star3Path addLineToPoint: CGPointMake(108, 28.4)];
        [star3Path addLineToPoint: CGPointMake(102.71, 30.28)];
        [star3Path addLineToPoint: CGPointMake(102.86, 24.67)];
        [star3Path addLineToPoint: CGPointMake(99.44, 20.22)];
        [star3Path addLineToPoint: CGPointMake(104.83, 18.63)];
        [star3Path closePath];
        [color11 setFill];
        [star3Path fill];
        [shadow2Color setStroke];
        star3Path.lineWidth = 1;
        [star3Path stroke];


        //// Star 4 Drawing
        UIBezierPath* star4Path = [UIBezierPath bezierPath];
        [star4Path moveToPoint: CGPointMake(147, 20)];
        [star4Path addLineToPoint: CGPointMake(148.76, 22.57)];
        [star4Path addLineToPoint: CGPointMake(151.76, 23.45)];
        [star4Path addLineToPoint: CGPointMake(149.85, 25.93)];
        [star4Path addLineToPoint: CGPointMake(149.94, 29.05)];
        [star4Path addLineToPoint: CGPointMake(147, 28)];
        [star4Path addLineToPoint: CGPointMake(144.06, 29.05)];
        [star4Path addLineToPoint: CGPointMake(144.15, 25.93)];
        [star4Path addLineToPoint: CGPointMake(142.24, 23.45)];
        [star4Path addLineToPoint: CGPointMake(145.24, 22.57)];
        [star4Path closePath];
        [color11 setFill];
        [star4Path fill];
        [shadow2Color setStroke];
        star4Path.lineWidth = 1;
        [star4Path stroke];


        //// Star 6 Drawing
        UIBezierPath* star6Path = [UIBezierPath bezierPath];
        [star6Path moveToPoint: CGPointMake(159.5, 64.5)];
        [star6Path addLineToPoint: CGPointMake(163.38, 70.16)];
        [star6Path addLineToPoint: CGPointMake(169.96, 72.1)];
        [star6Path addLineToPoint: CGPointMake(165.78, 77.54)];
        [star6Path addLineToPoint: CGPointMake(165.97, 84.4)];
        [star6Path addLineToPoint: CGPointMake(159.5, 82.1)];
        [star6Path addLineToPoint: CGPointMake(153.03, 84.4)];
        [star6Path addLineToPoint: CGPointMake(153.22, 77.54)];
        [star6Path addLineToPoint: CGPointMake(149.04, 72.1)];
        [star6Path addLineToPoint: CGPointMake(155.62, 70.16)];
        [star6Path closePath];
        [color11 setFill];
        [star6Path fill];
        [shadow2Color setStroke];
        star6Path.lineWidth = 1;
        [star6Path stroke];


        //// Star 7 Drawing
        UIBezierPath* star7Path = [UIBezierPath bezierPath];
        [star7Path moveToPoint: CGPointMake(106, 99)];
        [star7Path addLineToPoint: CGPointMake(109.17, 103.63)];
        [star7Path addLineToPoint: CGPointMake(114.56, 105.22)];
        [star7Path addLineToPoint: CGPointMake(111.14, 109.67)];
        [star7Path addLineToPoint: CGPointMake(111.29, 115.28)];
        [star7Path addLineToPoint: CGPointMake(106, 113.4)];
        [star7Path addLineToPoint: CGPointMake(100.71, 115.28)];
        [star7Path addLineToPoint: CGPointMake(100.86, 109.67)];
        [star7Path addLineToPoint: CGPointMake(97.44, 105.22)];
        [star7Path addLineToPoint: CGPointMake(102.83, 103.63)];
        [star7Path closePath];
        [color11 setFill];
        [star7Path fill];
        [shadow2Color setStroke];
        star7Path.lineWidth = 1;
        [star7Path stroke];


        //// Star 8 Drawing
        UIBezierPath* star8Path = [UIBezierPath bezierPath];
        [star8Path moveToPoint: CGPointMake(25.5, 6.5)];
        [star8Path addLineToPoint: CGPointMake(28.67, 11.13)];
        [star8Path addLineToPoint: CGPointMake(34.06, 12.72)];
        [star8Path addLineToPoint: CGPointMake(30.64, 17.17)];
        [star8Path addLineToPoint: CGPointMake(30.79, 22.78)];
        [star8Path addLineToPoint: CGPointMake(25.5, 20.9)];
        [star8Path addLineToPoint: CGPointMake(20.21, 22.78)];
        [star8Path addLineToPoint: CGPointMake(20.36, 17.17)];
        [star8Path addLineToPoint: CGPointMake(16.94, 12.72)];
        [star8Path addLineToPoint: CGPointMake(22.33, 11.13)];
        [star8Path closePath];
        [color11 setFill];
        [star8Path fill];
        [shadow2Color setStroke];
        star8Path.lineWidth = 1;
        [star8Path stroke];


        //// Star 9 Drawing
        UIBezierPath* star9Path = [UIBezierPath bezierPath];
        [star9Path moveToPoint: CGPointMake(74.5, 72)];
        [star9Path addLineToPoint: CGPointMake(76.62, 75.09)];
        [star9Path addLineToPoint: CGPointMake(80.21, 76.15)];
        [star9Path addLineToPoint: CGPointMake(77.92, 79.11)];
        [star9Path addLineToPoint: CGPointMake(78.03, 82.85)];
        [star9Path addLineToPoint: CGPointMake(74.5, 81.6)];
        [star9Path addLineToPoint: CGPointMake(70.97, 82.85)];
        [star9Path addLineToPoint: CGPointMake(71.08, 79.11)];
        [star9Path addLineToPoint: CGPointMake(68.79, 76.15)];
        [star9Path addLineToPoint: CGPointMake(72.38, 75.09)];
        [star9Path closePath];
        [color11 setFill];
        [star9Path fill];
        [shadow2Color setStroke];
        star9Path.lineWidth = 1;
        [star9Path stroke];


        //// Star 10 Drawing
        UIBezierPath* star10Path = [UIBezierPath bezierPath];
        [star10Path moveToPoint: CGPointMake(25, 83.5)];
        [star10Path addLineToPoint: CGPointMake(28.17, 88.13)];
        [star10Path addLineToPoint: CGPointMake(33.56, 89.72)];
        [star10Path addLineToPoint: CGPointMake(30.14, 94.17)];
        [star10Path addLineToPoint: CGPointMake(30.29, 99.78)];
        [star10Path addLineToPoint: CGPointMake(25, 97.9)];
        [star10Path addLineToPoint: CGPointMake(19.71, 99.78)];
        [star10Path addLineToPoint: CGPointMake(19.86, 94.17)];
        [star10Path addLineToPoint: CGPointMake(16.44, 89.72)];
        [star10Path addLineToPoint: CGPointMake(21.83, 88.13)];
        [star10Path closePath];
        [color11 setFill];
        [star10Path fill];
        [shadow2Color setStroke];
        star10Path.lineWidth = 1;
        [star10Path stroke];


        //// Star 11 Drawing
        UIBezierPath* star11Path = [UIBezierPath bezierPath];
        [star11Path moveToPoint: CGPointMake(185.5, 133.5)];
        [star11Path addLineToPoint: CGPointMake(189.38, 139.16)];
        [star11Path addLineToPoint: CGPointMake(195.96, 141.1)];
        [star11Path addLineToPoint: CGPointMake(191.78, 146.54)];
        [star11Path addLineToPoint: CGPointMake(191.97, 153.4)];
        [star11Path addLineToPoint: CGPointMake(185.5, 151.1)];
        [star11Path addLineToPoint: CGPointMake(179.03, 153.4)];
        [star11Path addLineToPoint: CGPointMake(179.22, 146.54)];
        [star11Path addLineToPoint: CGPointMake(175.04, 141.1)];
        [star11Path addLineToPoint: CGPointMake(181.62, 139.16)];
        [star11Path closePath];
        [color11 setFill];
        [star11Path fill];
        [shadow2Color setStroke];
        star11Path.lineWidth = 1;
        [star11Path stroke];


        //// Star 14 Drawing
        UIBezierPath* star14Path = [UIBezierPath bezierPath];
        [star14Path moveToPoint: CGPointMake(51.5, 146.5)];
        [star14Path addLineToPoint: CGPointMake(56.08, 153.19)];
        [star14Path addLineToPoint: CGPointMake(63.86, 155.48)];
        [star14Path addLineToPoint: CGPointMake(58.92, 161.91)];
        [star14Path addLineToPoint: CGPointMake(59.14, 170.02)];
        [star14Path addLineToPoint: CGPointMake(51.5, 167.3)];
        [star14Path addLineToPoint: CGPointMake(43.86, 170.02)];
        [star14Path addLineToPoint: CGPointMake(44.08, 161.91)];
        [star14Path addLineToPoint: CGPointMake(39.14, 155.48)];
        [star14Path addLineToPoint: CGPointMake(46.92, 153.19)];
        [star14Path closePath];
        [color11 setFill];
        [star14Path fill];
        [shadow2Color setStroke];
        star14Path.lineWidth = 1;
        [star14Path stroke];


        //// Star 17 Drawing
        UIBezierPath* star17Path = [UIBezierPath bezierPath];
        [star17Path moveToPoint: CGPointMake(83.5, 65.5)];
        [star17Path addLineToPoint: CGPointMake(84.56, 67.04)];
        [star17Path addLineToPoint: CGPointMake(86.35, 67.57)];
        [star17Path addLineToPoint: CGPointMake(85.21, 69.06)];
        [star17Path addLineToPoint: CGPointMake(85.26, 70.93)];
        [star17Path addLineToPoint: CGPointMake(83.5, 70.3)];
        [star17Path addLineToPoint: CGPointMake(81.74, 70.93)];
        [star17Path addLineToPoint: CGPointMake(81.79, 69.06)];
        [star17Path addLineToPoint: CGPointMake(80.65, 67.57)];
        [star17Path addLineToPoint: CGPointMake(82.44, 67.04)];
        [star17Path closePath];
        [color11 setFill];
        [star17Path fill];
        [shadow2Color setStroke];
        star17Path.lineWidth = 1;
        [star17Path stroke];


        //// Star 22 Drawing
        UIBezierPath* star22Path = [UIBezierPath bezierPath];
        [star22Path moveToPoint: CGPointMake(92.5, 59.5)];
        [star22Path addLineToPoint: CGPointMake(93.56, 61.04)];
        [star22Path addLineToPoint: CGPointMake(95.35, 61.57)];
        [star22Path addLineToPoint: CGPointMake(94.21, 63.06)];
        [star22Path addLineToPoint: CGPointMake(94.26, 64.93)];
        [star22Path addLineToPoint: CGPointMake(92.5, 64.3)];
        [star22Path addLineToPoint: CGPointMake(90.74, 64.93)];
        [star22Path addLineToPoint: CGPointMake(90.79, 63.06)];
        [star22Path addLineToPoint: CGPointMake(89.65, 61.57)];
        [star22Path addLineToPoint: CGPointMake(91.44, 61.04)];
        [star22Path closePath];
        [color11 setFill];
        [star22Path fill];
        [shadow2Color setStroke];
        star22Path.lineWidth = 1;
        [star22Path stroke];
    }


    //// Star 21 Drawing
    UIBezierPath* star21Path = [UIBezierPath bezierPath];
    [star21Path moveToPoint: CGPointMake(261, 114)];
    [star21Path addLineToPoint: CGPointMake(264.88, 119.66)];
    [star21Path addLineToPoint: CGPointMake(271.46, 121.6)];
    [star21Path addLineToPoint: CGPointMake(267.28, 127.04)];
    [star21Path addLineToPoint: CGPointMake(267.47, 133.9)];
    [star21Path addLineToPoint: CGPointMake(261, 131.6)];
    [star21Path addLineToPoint: CGPointMake(254.53, 133.9)];
    [star21Path addLineToPoint: CGPointMake(254.72, 127.04)];
    [star21Path addLineToPoint: CGPointMake(250.54, 121.6)];
    [star21Path addLineToPoint: CGPointMake(257.12, 119.66)];
    [star21Path closePath];
    [color11 setFill];
    [star21Path fill];
    [shadow2Color setStroke];
    star21Path.lineWidth = 1;
    [star21Path stroke];


    //// Star 24 Drawing
    UIBezierPath* star24Path = [UIBezierPath bezierPath];
    [star24Path moveToPoint: CGPointMake(221.5, 68.5)];
    [star24Path addLineToPoint: CGPointMake(223.97, 72.1)];
    [star24Path addLineToPoint: CGPointMake(228.16, 73.34)];
    [star24Path addLineToPoint: CGPointMake(225.49, 76.8)];
    [star24Path addLineToPoint: CGPointMake(225.61, 81.16)];
    [star24Path addLineToPoint: CGPointMake(221.5, 79.7)];
    [star24Path addLineToPoint: CGPointMake(217.39, 81.16)];
    [star24Path addLineToPoint: CGPointMake(217.51, 76.8)];
    [star24Path addLineToPoint: CGPointMake(214.84, 73.34)];
    [star24Path addLineToPoint: CGPointMake(219.03, 72.1)];
    [star24Path closePath];
    [color11 setFill];
    [star24Path fill];
    [shadow2Color setStroke];
    star24Path.lineWidth = 1;
    [star24Path stroke];


    //// Group 3
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(231.5, 22.5, 133, 135)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonFrontShadow.shadowOffset, moonFrontShadow.shadowBlurRadius, [moonFrontShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);
        [ovalPath addClip];
        CGContextDrawLinearGradient(context, darkSideMoonGradient, CGPointMake(298, 22.5), CGPointMake(298, 157.5), 0);
        CGContextEndTransparencyLayer(context);

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([innerMoonDarksideShadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [innerMoonDarksideShadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, innerMoonDarksideShadow.shadowOffset, innerMoonDarksideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [color setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPath];
        [oval2Path moveToPoint: CGPointMake(280, 56)];
        [oval2Path addCurveToPoint: CGPointMake(276.15, 73.53) controlPoint1: CGPointMake(281.89, 58.93) controlPoint2: CGPointMake(278.33, 66.39)];
        [oval2Path addCurveToPoint: CGPointMake(280, 89) controlPoint1: CGPointMake(274.03, 80.47) controlPoint2: CGPointMake(274.39, 84.19)];
        [oval2Path addCurveToPoint: CGPointMake(272.5, 99) controlPoint1: CGPointMake(283.5, 92) controlPoint2: CGPointMake(273.64, 97.11)];
        [oval2Path addCurveToPoint: CGPointMake(268, 118) controlPoint1: CGPointMake(269.5, 104) controlPoint2: CGPointMake(268, 110.13)];
        [oval2Path addCurveToPoint: CGPointMake(298.5, 157) controlPoint1: CGPointMake(268, 155.28) controlPoint2: CGPointMake(335.78, 157)];
        [oval2Path addCurveToPoint: CGPointMake(231, 89.5) controlPoint1: CGPointMake(261.22, 157) controlPoint2: CGPointMake(231, 126.78)];
        [oval2Path addCurveToPoint: CGPointMake(298.5, 22) controlPoint1: CGPointMake(231, 52.22) controlPoint2: CGPointMake(261.22, 22)];
        [oval2Path addCurveToPoint: CGPointMake(280, 56) controlPoint1: CGPointMake(315.25, 22) controlPoint2: CGPointMake(273.54, 46.01)];
        [oval2Path closePath];
        CGContextSaveGState(context);
        [oval2Path addClip];
        CGContextDrawLinearGradient(context, lightSideMoonGradient, CGPointMake(270.35, 22), CGPointMake(270.35, 157), 0);
        CGContextRestoreGState(context);

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([innerMoonLightSideShadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [innerMoonLightSideShadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, innerMoonLightSideShadow.shadowOffset, innerMoonLightSideShadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Group 4
        {
            //// Oval 3 Drawing
            UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(296, 63, 14, 20)];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
            [UIColor.whiteColor setFill];
            [oval3Path fill];
            CGContextRestoreGState(context);

            [color setStroke];
            oval3Path.lineWidth = 1;
            [oval3Path stroke];


            //// Oval 6 Drawing
            UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(283, 60, 13.5, 23)];
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [shadow.shadowColor CGColor]);
            [UIColor.whiteColor setFill];
            [oval6Path fill];
            CGContextRestoreGState(context);

            [color setStroke];
            oval6Path.lineWidth = 1;
            [oval6Path stroke];


            //// Oval 15 Drawing
            UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(283.5, 67, 3.5, 8.5)];
            [UIColor.blackColor setFill];
            [oval15Path fill];
            [color setStroke];
            oval15Path.lineWidth = 1;
            [oval15Path stroke];


            //// Bezier 2 Drawing
            UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
            [UIColor.blackColor setStroke];
            bezier2Path.lineWidth = 1;
            [bezier2Path stroke];


            //// Bezier 3 Drawing
            UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
            [UIColor.darkGrayColor setFill];
            [bezier3Path fill];
            [color setStroke];
            bezier3Path.lineWidth = 1;
            [bezier3Path stroke];


            //// Oval 16 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 257.95, 65.49);
            CGContextRotateCTM(context, 11.2 * M_PI / 180);

            UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-5.75, -4.02, 11.5, 8.04)];
            [UIColor.whiteColor setFill];
            [oval16Path fill];
            [UIColor.darkGrayColor setStroke];
            oval16Path.lineWidth = 1;
            [oval16Path stroke];

            CGContextRestoreGState(context);


            //// Oval 17 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 271.06, 71.6);
            CGContextRotateCTM(context, 10.56 * M_PI / 180);

            UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6.56, -6.24, 8.23, 6.85)];
            [UIColor.whiteColor setFill];
            [oval17Path fill];
            [UIColor.darkGrayColor setStroke];
            oval17Path.lineWidth = 1;
            [oval17Path stroke];

            CGContextRestoreGState(context);


            //// Bezier 4 Drawing
            UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
            [color11 setFill];
            [bezier4Path fill];
            [UIColor.darkGrayColor setStroke];
            bezier4Path.lineWidth = 1;
            [bezier4Path stroke];


            //// Bezier 5 Drawing
            UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
            [UIColor.darkGrayColor setStroke];
            bezier5Path.lineWidth = 1;
            [bezier5Path stroke];


            //// Bezier 6 Drawing
            UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
            [UIColor.darkGrayColor setStroke];
            bezier6Path.lineWidth = 1;
            [bezier6Path stroke];


            //// Oval 18 Drawing
            UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(260, 64, 4, 4)];
            [color setFill];
            [oval18Path fill];


            //// Oval 19 Drawing
            UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(270, 66.5, 3.5, 4)];
            [color setFill];
            [oval19Path fill];


            //// Bezier 7 Drawing
            UIBezierPath* bezier7Path = [UIBezierPath bezierPath];
            [bezier7Path moveToPoint: CGPointMake(264.5, 124.5)];
            [bezier7Path addCurveToPoint: CGPointMake(264.51, 118.61) controlPoint1: CGPointMake(268.37, 122.01) controlPoint2: CGPointMake(266.64, 117)];
            [bezier7Path addCurveToPoint: CGPointMake(246, 111.5) controlPoint1: CGPointMake(259.35, 122.52) controlPoint2: CGPointMake(246, 111.5)];
            [bezier7Path addCurveToPoint: CGPointMake(264.5, 124.5) controlPoint1: CGPointMake(246, 111.5) controlPoint2: CGPointMake(258.98, 128.05)];
            [bezier7Path closePath];
            [UIColor.whiteColor setFill];
            [bezier7Path fill];
            [color setStroke];
            bezier7Path.lineWidth = 1;
            [bezier7Path stroke];


            //// Bezier Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 297.6, 118.37);
            CGContextRotateCTM(context, -9.13 * M_PI / 180);

            UIBezierPath* bezierPath = [UIBezierPath bezierPath];
            [bezierPath moveToPoint: CGPointMake(-14.49, -6.25)];
            [bezierPath addCurveToPoint: CGPointMake(18.65, -6.25) controlPoint1: CGPointMake(-1.66, 10.32) controlPoint2: CGPointMake(18.65, -6.25)];
            [bezierPath addLineToPoint: CGPointMake(1.69, 11.16)];
            [bezierPath addLineToPoint: CGPointMake(-6.34, 7.76)];
            [bezierPath addCurveToPoint: CGPointMake(-14.49, -6.25) controlPoint1: CGPointMake(-6.34, 7.76) controlPoint2: CGPointMake(-27.32, -22.81)];
            [bezierPath closePath];
            [UIColor.whiteColor setFill];
            [bezierPath fill];
            [UIColor.blackColor setStroke];
            bezierPath.lineWidth = 1;
            [bezierPath stroke];

            CGContextRestoreGState(context);


            //// Oval 20 Drawing
            UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(296.5, 69, 3.5, 8.5)];
            [UIColor.blackColor setFill];
            [oval20Path fill];
            [color setStroke];
            oval20Path.lineWidth = 1;
            [oval20Path stroke];
        }
    }


    //// Group 5
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 29 Drawing
        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(387, 39.5, 29, 23)];
        [color10 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];


        //// Oval 30 Drawing
        UIBezierPath* oval30Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(366.5, 37, 27, 21)];
        [color10 setFill];
        [oval30Path fill];

        ////// Oval 30 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval30Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval30Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval30Path.lineWidth = 1;
        [oval30Path stroke];


        //// Oval 32 Drawing
        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(340.5, 40.5, 28, 22)];
        [color10 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];


        //// Oval 33 Drawing
        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(315.5, 55, 23, 17)];
        [color10 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];


        //// Oval 34 Drawing
        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(324, 50.5, 28, 20)];
        [color10 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];


        //// Oval 35 Drawing
        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(387, 49, 36.5, 23)];
        [color10 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];


        //// Oval 37 Drawing
        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(359, 50, 33.5, 22)];
        [color10 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];


        //// Oval 38 Drawing
        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(347, 49, 29, 20)];
        [color10 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];


        //// Oval 39 Drawing
        UIBezierPath* oval39Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(377, 47.5, 28, 20)];
        [color10 setFill];
        [oval39Path fill];

        ////// Oval 39 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval39Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval39Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval39Path.lineWidth = 1;
        [oval39Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 41 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 91.87, 42.92);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval41Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.49, 19.73)];
        [color3 setFill];
        [oval41Path fill];

        ////// Oval 41 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval41Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval41Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval41Path.lineWidth = 1;
        [oval41Path stroke];

        CGContextRestoreGState(context);


        //// Oval 43 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 28.28, 54.01);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval43Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.98, 17.4)];
        [color3 setFill];
        [oval43Path fill];

        ////// Oval 43 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval43Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval43Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval43Path.lineWidth = 1;
        [oval43Path stroke];

        CGContextRestoreGState(context);


        //// Oval 44 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 46.48, 49.51);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval44Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.98, 17.4)];
        [color3 setFill];
        [oval44Path fill];

        ////// Oval 44 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval44Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval44Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval44Path.lineWidth = 1;
        [oval44Path stroke];

        CGContextRestoreGState(context);


        //// Oval 45 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 128.53, 39.84);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval45Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.49, 19.73)];
        [color3 setFill];
        [oval45Path fill];

        ////// Oval 45 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval45Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval45Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval45Path.lineWidth = 1;
        [oval45Path stroke];

        CGContextRestoreGState(context);


        //// Oval 46 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 35.07, 62.48);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval46Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.48, 14.61)];
        [color3 setFill];
        [oval46Path fill];

        ////// Oval 46 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval46Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval46Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval46Path.lineWidth = 1;
        [oval46Path stroke];

        CGContextRestoreGState(context);


        //// Oval 47 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 155.12, 44.21);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval47Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.83, 22.38)];
        [color3 setFill];
        [oval47Path fill];

        ////// Oval 47 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval47Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval47Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval47Path.lineWidth = 1;
        [oval47Path stroke];

        CGContextRestoreGState(context);


        //// Oval 49 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 107.87, 43.42);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval49Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.49, 19.73)];
        [color3 setFill];
        [oval49Path fill];

        ////// Oval 49 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval49Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval49Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval49Path.lineWidth = 1;
        [oval49Path stroke];

        CGContextRestoreGState(context);


        //// Oval 50 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 169.31, 55.69);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval50Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.08, 20.95)];
        [color3 setFill];
        [oval50Path fill];

        ////// Oval 50 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval50Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval50Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval50Path.lineWidth = 1;
        [oval50Path stroke];

        CGContextRestoreGState(context);


        //// Oval 51 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 72.96, 45.44);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval51Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.98, 17.4)];
        [color3 setFill];
        [oval51Path fill];

        ////// Oval 51 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval51Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval51Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval51Path.lineWidth = 1;
        [oval51Path stroke];

        CGContextRestoreGState(context);


        //// Oval 52 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 64.23, 49.83);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval52Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 24.48, 14.61)];
        [color3 setFill];
        [oval52Path fill];

        ////// Oval 52 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval52Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval52Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval52Path.lineWidth = 1;
        [oval52Path stroke];

        CGContextRestoreGState(context);


        //// Oval 53 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 56.06, 60.8);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval53Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.75, 17.95)];
        [color3 setFill];
        [oval53Path fill];

        ////// Oval 53 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval53Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval53Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval53Path.lineWidth = 1;
        [oval53Path stroke];

        CGContextRestoreGState(context);


        //// Oval 54 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 81.74, 54.93);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval54Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.39, 23.07)];
        [color3 setFill];
        [oval54Path fill];

        ////// Oval 54 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval54Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval54Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval54Path.lineWidth = 1;
        [oval54Path stroke];

        CGContextRestoreGState(context);


        //// Oval 55 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 108.78, 58.52);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval55Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26.1, 20.32)];
        [color3 setFill];
        [oval55Path fill];

        ////// Oval 55 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval55Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval55Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval55Path.lineWidth = 1;
        [oval55Path stroke];

        CGContextRestoreGState(context);


        //// Oval 56 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 151.92, 56.98);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval56Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.39, 23.07)];
        [color3 setFill];
        [oval56Path fill];

        ////// Oval 56 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval56Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval56Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval56Path.lineWidth = 1;
        [oval56Path stroke];

        CGContextRestoreGState(context);


        //// Oval 57 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 127.3, 55.34);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval57Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 33.05, 22.41)];
        [color3 setFill];
        [oval57Path fill];

        ////// Oval 57 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval57Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval57Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval57Path.lineWidth = 1;
        [oval57Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 8
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 58 Drawing
        UIBezierPath* oval58Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-16, 130.5, 30, 19)];
        [color3 setFill];
        [oval58Path fill];

        ////// Oval 58 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval58Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval58Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval58Path.lineWidth = 1;
        [oval58Path stroke];


        //// Oval 59 Drawing
        UIBezierPath* oval59Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(11, 132.5, 30, 19)];
        [color3 setFill];
        [oval59Path fill];

        ////// Oval 59 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval59Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval59Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval59Path.lineWidth = 1;
        [oval59Path stroke];


        //// Oval 62 Drawing
        UIBezierPath* oval62Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-9, 136.5, 35, 24)];
        [color3 setFill];
        [oval62Path fill];

        ////// Oval 62 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval62Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval62Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval62Path.lineWidth = 1;
        [oval62Path stroke];


        //// Oval 63 Drawing
        UIBezierPath* oval63Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-15, 151.5, 28, 18)];
        [color3 setFill];
        [oval63Path fill];

        ////// Oval 63 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval63Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval63Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval63Path.lineWidth = 1;
        [oval63Path stroke];


        //// Oval 64 Drawing
        UIBezierPath* oval64Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(36, 131.5, 29, 21)];
        [color3 setFill];
        [oval64Path fill];

        ////// Oval 64 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval64Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval64Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval64Path.lineWidth = 1;
        [oval64Path stroke];


        //// Oval 65 Drawing
        UIBezierPath* oval65Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(60, 138.5, 32, 23)];
        [color3 setFill];
        [oval65Path fill];

        ////// Oval 65 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval65Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval65Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval65Path.lineWidth = 1;
        [oval65Path stroke];


        //// Oval 66 Drawing
        UIBezierPath* oval66Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(23, 146.5, 36, 23)];
        [color3 setFill];
        [oval66Path fill];

        ////// Oval 66 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval66Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval66Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval66Path.lineWidth = 1;
        [oval66Path stroke];


        //// Oval 67 Drawing
        UIBezierPath* oval67Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(71, 151.5, 30, 19)];
        [color3 setFill];
        [oval67Path fill];

        ////// Oval 67 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval67Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval67Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval67Path.lineWidth = 1;
        [oval67Path stroke];


        //// Oval 68 Drawing
        UIBezierPath* oval68Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(8, 149.5, 33, 23)];
        [color3 setFill];
        [oval68Path fill];

        ////// Oval 68 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval68Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval68Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval68Path.lineWidth = 1;
        [oval68Path stroke];


        //// Oval 69 Drawing
        UIBezierPath* oval69Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(43, 151.5, 32, 19)];
        [color3 setFill];
        [oval69Path fill];

        ////// Oval 69 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval69Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval69Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval69Path.lineWidth = 1;
        [oval69Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 10
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 70 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 390.91, 142.85);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval70Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.42, 19.54)];
        [color3 setFill];
        [oval70Path fill];

        ////// Oval 70 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval70Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval70Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval70Path.lineWidth = 1;
        [oval70Path stroke];

        CGContextRestoreGState(context);


        //// Oval 71 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 361.43, 136.76);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval71Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 35.56, 26.14)];
        [color3 setFill];
        [oval71Path fill];

        ////// Oval 71 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval71Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval71Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval71Path.lineWidth = 1;
        [oval71Path stroke];

        CGContextRestoreGState(context);


        //// Oval 72 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 339.77, 139.22);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval72Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.97, 19.82)];
        [color3 setFill];
        [oval72Path fill];

        ////// Oval 72 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval72Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval72Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval72Path.lineWidth = 1;
        [oval72Path stroke];

        CGContextRestoreGState(context);


        //// Oval 73 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 291.74, 153.01);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval73Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.4, 21.94)];
        [color3 setFill];
        [oval73Path fill];

        ////// Oval 73 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval73Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval73Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval73Path.lineWidth = 1;
        [oval73Path stroke];

        CGContextRestoreGState(context);


        //// Oval 74 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 317.1, 145.44);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval74Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.4, 17.76)];
        [color3 setFill];
        [oval74Path fill];

        ////// Oval 74 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval74Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval74Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval74Path.lineWidth = 1;
        [oval74Path stroke];

        CGContextRestoreGState(context);


        //// Oval 75 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 381.84, 154.64);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval75Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 35.35, 22.41)];
        [color3 setFill];
        [oval75Path fill];

        ////// Oval 75 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval75Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval75Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval75Path.lineWidth = 1;
        [oval75Path stroke];

        CGContextRestoreGState(context);


        //// Oval 78 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 333.05, 152.82);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval78Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.31, 23.02)];
        [color3 setFill];
        [oval78Path fill];

        ////// Oval 78 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval78Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval78Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval78Path.lineWidth = 1;
        [oval78Path stroke];

        CGContextRestoreGState(context);


        //// Oval 86 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 355.95, 154.46);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval86Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.69, 21.61)];
        [color3 setFill];
        [oval86Path fill];

        ////// Oval 86 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval86Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval86Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval86Path.lineWidth = 1;
        [oval86Path stroke];

        CGContextRestoreGState(context);


        //// Oval 87 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 309.01, 153.42);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval87Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.32, 22.97)];
        [color3 setFill];
        [oval87Path fill];

        ////// Oval 87 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval87Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval87Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval87Path.lineWidth = 1;
        [oval87Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 11
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 88 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 230.79, 135.78);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval88Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 25.84, 22.92)];
        [color10 setFill];
        [oval88Path fill];

        ////// Oval 88 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval88Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval88Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval88Path.lineWidth = 1;
        [oval88Path stroke];

        CGContextRestoreGState(context);


        //// Oval 89 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 127.57, 143.98);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval89Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31.03, 19.02)];
        [color10 setFill];
        [oval89Path fill];

        ////// Oval 89 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval89Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval89Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval89Path.lineWidth = 1;
        [oval89Path stroke];

        CGContextRestoreGState(context);


        //// Oval 90 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 194.59, 129.45);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval90Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29.1, 17.71)];
        [color10 setFill];
        [oval90Path fill];

        ////// Oval 90 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval90Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval90Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval90Path.lineWidth = 1;
        [oval90Path stroke];

        CGContextRestoreGState(context);


        //// Oval 91 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 209.63, 132.83);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval91Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 32.05, 23.96)];
        [color10 setFill];
        [oval91Path fill];

        ////// Oval 91 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval91Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval91Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval91Path.lineWidth = 1;
        [oval91Path stroke];

        CGContextRestoreGState(context);


        //// Oval 92 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 173.42, 134.43);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval92Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 33.24, 21.43)];
        [color10 setFill];
        [oval92Path fill];

        ////// Oval 92 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval92Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval92Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval92Path.lineWidth = 1;
        [oval92Path stroke];

        CGContextRestoreGState(context);


        //// Oval 93 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 152.11, 137.55);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval93Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.92, 21.52)];
        [color10 setFill];
        [oval93Path fill];

        ////// Oval 93 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval93Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval93Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval93Path.lineWidth = 1;
        [oval93Path stroke];

        CGContextRestoreGState(context);


        //// Oval 94 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 144.92, 144.76);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval94Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.92, 21.52)];
        [color10 setFill];
        [oval94Path fill];

        ////// Oval 94 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval94Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval94Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval94Path.lineWidth = 1;
        [oval94Path stroke];

        CGContextRestoreGState(context);


        //// Oval 95 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 171.15, 150.44);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval95Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26, 19.17)];
        [color10 setFill];
        [oval95Path fill];

        ////// Oval 95 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval95Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval95Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval95Path.lineWidth = 1;
        [oval95Path stroke];

        CGContextRestoreGState(context);


        //// Oval 96 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 185.79, 145.12);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval96Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 37.47, 25.06)];
        [color10 setFill];
        [oval96Path fill];

        ////// Oval 96 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval96Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval96Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval96Path.lineWidth = 1;
        [oval96Path stroke];

        CGContextRestoreGState(context);


        //// Oval 97 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 211.57, 148.28);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval97Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30.92, 21.52)];
        [color10 setFill];
        [oval97Path fill];

        ////// Oval 97 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval97Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval97Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval97Path.lineWidth = 1;
        [oval97Path stroke];

        CGContextRestoreGState(context);


        //// Oval 98 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 235.35, 145.99);
        CGContextRotateCTM(context, -6.8 * M_PI / 180);

        UIBezierPath* oval98Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 27.57, 21.62)];
        [color10 setFill];
        [oval98Path fill];

        ////// Oval 98 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval98Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval98Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        oval98Path.lineWidth = 1;
        [oval98Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(lightSideMoonGradient);
    CGGradientRelease(darkSideMoonGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas2
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color7 = [UIColor colorWithRed: 0.644 green: 0.169 blue: 0.012 alpha: 1];
    UIColor* sunBallGradientColor = [UIColor colorWithRed: 0.989 green: 0.508 blue: 0.012 alpha: 0.733];
    UIColor* sunBallGradientColor2 = [UIColor colorWithRed: 0.938 green: 0.137 blue: 0 alpha: 0.834];
    UIColor* sunStarDradientColor = [UIColor colorWithRed: 1 green: 0.765 blue: 0 alpha: 0.841];
    UIColor* sunStarDradientColor2 = [UIColor colorWithRed: 1 green: 0.386 blue: 0 alpha: 0.94];
    UIColor* shadow3Color = [UIColor colorWithRed: 1 green: 0.809 blue: 0.235 alpha: 1];
    UIColor* shadow4Color = [UIColor colorWithRed: 1 green: 0.869 blue: 0.333 alpha: 1];
    UIColor* sunFrontShadowColor = [UIColor colorWithRed: 1 green: 0.924 blue: 0.457 alpha: 0.9];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Gradient Declarations
    CGFloat sunBallGradientLocations[] = {0, 0.75, 1};
    CGGradientRef sunBallGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunBallGradientColor.CGColor, (id)[sunBallGradientColor blendedColorWithFraction: 0.5 ofColor: sunBallGradientColor2].CGColor, (id)sunBallGradientColor2.CGColor], sunBallGradientLocations);
    CGFloat sunStarDradientLocations[] = {0, 1};
    CGGradientRef sunStarDradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunStarDradientColor.CGColor, (id)sunStarDradientColor2.CGColor], sunStarDradientLocations);

    //// Shadow Declarations
    NSShadow* sunFrontShadow = [[NSShadow alloc] init];
    [sunFrontShadow setShadowColor: [sunFrontShadowColor colorWithAlphaComponent: CGColorGetAlpha(sunFrontShadowColor.CGColor) * 0.48]];
    [sunFrontShadow setShadowOffset: CGSizeMake(18.1, 15.1)];
    [sunFrontShadow setShadowBlurRadius: 9];
    NSShadow* shadow3 = [[NSShadow alloc] init];
    [shadow3 setShadowColor: [shadow3Color colorWithAlphaComponent: CGColorGetAlpha(shadow3Color.CGColor) * 0.34]];
    [shadow3 setShadowOffset: CGSizeMake(-27.1, -8.1)];
    [shadow3 setShadowBlurRadius: 8];
    NSShadow* shadow4 = [[NSShadow alloc] init];
    [shadow4 setShadowColor: [shadow4Color colorWithAlphaComponent: CGColorGetAlpha(shadow4Color.CGColor) * 0.47]];
    [shadow4 setShadowOffset: CGSizeMake(6.1, -25.1)];
    [shadow4 setShadowBlurRadius: 8];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, shadow3.shadowOffset, shadow3.shadowBlurRadius, [shadow3.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Group 3
        {
            //// Group
            {
                //// Group 2
                {
                    CGContextSaveGState(context);
                    CGContextSetShadowWithColor(context, shadow4.shadowOffset, shadow4.shadowBlurRadius, [shadow4.shadowColor CGColor]);
                    CGContextBeginTransparencyLayer(context, NULL);


                    //// Bezier Drawing
                    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                    [bezierPath moveToPoint: CGPointMake(108.76, 77.28)];
                    [bezierPath addLineToPoint: CGPointMake(116.14, 63.5)];
                    [bezierPath addLineToPoint: CGPointMake(116.14, 81.88)];
                    [bezierPath addLineToPoint: CGPointMake(138.28, 48.19)];
                    [bezierPath addLineToPoint: CGPointMake(129.42, 86.47)];
                    [bezierPath addLineToPoint: CGPointMake(151.56, 77.28)];
                    [bezierPath addLineToPoint: CGPointMake(138.28, 94.12)];
                    [bezierPath addLineToPoint: CGPointMake(185.5, 81.88)];
                    [bezierPath addLineToPoint: CGPointMake(145.66, 112.5)];
                    [bezierPath addLineToPoint: CGPointMake(158.94, 117.09)];
                    [bezierPath addLineToPoint: CGPointMake(145.66, 124.75)];
                    [bezierPath addLineToPoint: CGPointMake(173.69, 152.31)];
                    [bezierPath addLineToPoint: CGPointMake(138.28, 138.53)];
                    [bezierPath addLineToPoint: CGPointMake(138.5, 152.5)];
                    [bezierPath addLineToPoint: CGPointMake(129.42, 147.72)];
                    [bezierPath addLineToPoint: CGPointMake(138.5, 177.5)];
                    [bezierPath addLineToPoint: CGPointMake(116.14, 152.31)];
                    [bezierPath addLineToPoint: CGPointMake(108.5, 168.5)];
                    [bezierPath addLineToPoint: CGPointMake(102.86, 152.31)];
                    [bezierPath addLineToPoint: CGPointMake(91.5, 185.5)];
                    [bezierPath addLineToPoint: CGPointMake(91.05, 152.31)];
                    [bezierPath addLineToPoint: CGPointMake(77.77, 156.91)];
                    [bezierPath addLineToPoint: CGPointMake(80.72, 141.59)];
                    [bezierPath addLineToPoint: CGPointMake(48.26, 163.03)];
                    [bezierPath addLineToPoint: CGPointMake(73.34, 129.34)];
                    [bezierPath addLineToPoint: CGPointMake(55.64, 124.75)];
                    [bezierPath addLineToPoint: CGPointMake(73.34, 117.09)];
                    [bezierPath addLineToPoint: CGPointMake(33.5, 86.47)];
                    [bezierPath addLineToPoint: CGPointMake(73.34, 100.25)];
                    [bezierPath addLineToPoint: CGPointMake(64.49, 86.47)];
                    [bezierPath addLineToPoint: CGPointMake(77.77, 94.12)];
                    [bezierPath addLineToPoint: CGPointMake(55.64, 48.19)];
                    [bezierPath addLineToPoint: CGPointMake(91.05, 86.47)];
                    [bezierPath addLineToPoint: CGPointMake(91.05, 72.69)];
                    [bezierPath addLineToPoint: CGPointMake(91.05, 72.69)];
                    [bezierPath addLineToPoint: CGPointMake(96.96, 81.88)];
                    [bezierPath addLineToPoint: CGPointMake(96.96, 39)];
                    [bezierPath addLineToPoint: CGPointMake(108.76, 77.28)];
                    [bezierPath closePath];
                    CGContextSaveGState(context);
                    CGContextSetShadowWithColor(context, sunFrontShadow.shadowOffset, sunFrontShadow.shadowBlurRadius, [sunFrontShadow.shadowColor CGColor]);
                    CGContextBeginTransparencyLayer(context, NULL);
                    [bezierPath addClip];
                    CGContextDrawLinearGradient(context, sunStarDradient, CGPointMake(109.5, 39), CGPointMake(109.5, 185.5), 0);
                    CGContextEndTransparencyLayer(context);

                    ////// Bezier Inner Shadow
                    CGContextSaveGState(context);
                    UIRectClip(bezierPath.bounds);
                    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

                    CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
                    CGContextBeginTransparencyLayer(context, NULL);
                    {
                        UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                        CGContextBeginTransparencyLayer(context, NULL);

                        [opaqueShadow setFill];
                        [bezierPath fill];

                        CGContextEndTransparencyLayer(context);
                    }
                    CGContextEndTransparencyLayer(context);
                    CGContextRestoreGState(context);

                    CGContextRestoreGState(context);

                    [color7 setStroke];
                    bezierPath.lineWidth = 1;
                    [bezierPath stroke];


                    //// Oval 77 Drawing
                    CGContextSaveGState(context);
                    CGContextTranslateCTM(context, 109.18, 117.14);
                    CGContextRotateCTM(context, -0.02 * M_PI / 180);

                    UIBezierPath* oval77Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-34.1, -35.09, 68.21, 70.19)];
                    CGContextSaveGState(context);
                    [oval77Path addClip];
                    CGContextDrawLinearGradient(context, sunBallGradient, CGPointMake(0, -35.09), CGPointMake(0, 35.09), 0);
                    CGContextRestoreGState(context);

                    ////// Oval 77 Inner Shadow
                    CGContextSaveGState(context);
                    UIRectClip(oval77Path.bounds);
                    CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

                    CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
                    CGContextBeginTransparencyLayer(context, NULL);
                    {
                        UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
                        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
                        CGContextSetBlendMode(context, kCGBlendModeSourceOut);
                        CGContextBeginTransparencyLayer(context, NULL);

                        [opaqueShadow setFill];
                        [oval77Path fill];

                        CGContextEndTransparencyLayer(context);
                    }
                    CGContextEndTransparencyLayer(context);
                    CGContextRestoreGState(context);

                    [color7 setStroke];
                    oval77Path.lineWidth = 1;
                    [oval77Path stroke];

                    CGContextRestoreGState(context);


                    //// Oval 78 Drawing
                    UIBezierPath* oval78Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(74.5, 88.5, 58.5, 56)];
                    [color7 setStroke];
                    oval78Path.lineWidth = 1;
                    [oval78Path stroke];


                    //// Oval 79 Drawing
                    UIBezierPath* oval79Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(84.5, 89, 40.5, 44.5)];
                    [color7 setStroke];
                    oval79Path.lineWidth = 1;
                    [oval79Path stroke];


                    //// Oval 80 Drawing
                    UIBezierPath* oval80Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(94.5, 96.5, 29.5, 31)];
                    [color7 setStroke];
                    oval80Path.lineWidth = 1;
                    [oval80Path stroke];


                    //// Oval 81 Drawing
                    UIBezierPath* oval81Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(100.5, 107, 18, 20)];
                    [color7 setStroke];
                    oval81Path.lineWidth = 1;
                    [oval81Path stroke];


                    //// Oval 82 Drawing
                    UIBezierPath* oval82Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(101.5, 110, 11.5, 14)];
                    [color7 setStroke];
                    oval82Path.lineWidth = 1;
                    [oval82Path stroke];


                    //// Oval 83 Drawing
                    UIBezierPath* oval83Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(104.5, 111, 5.5, 6)];
                    [color7 setStroke];
                    oval83Path.lineWidth = 1;
                    [oval83Path stroke];


                    CGContextEndTransparencyLayer(context);
                    CGContextRestoreGState(context);
                }
            }
        }


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(sunBallGradient);
    CGGradientRelease(sunStarDradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas3
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color7 = [UIColor colorWithRed: 0.644 green: 0.169 blue: 0.012 alpha: 1];
    UIColor* sunBallGradientColor = [UIColor colorWithRed: 0.989 green: 0.508 blue: 0.012 alpha: 0.733];
    UIColor* sunBallGradientColor2 = [UIColor colorWithRed: 0.938 green: 0.137 blue: 0 alpha: 0.834];
    UIColor* sunStarDradientColor = [UIColor colorWithRed: 1 green: 0.765 blue: 0 alpha: 0.841];
    UIColor* sunStarDradientColor2 = [UIColor colorWithRed: 1 green: 0.386 blue: 0 alpha: 0.94];
    UIColor* sunFrontShadowColor = [UIColor colorWithRed: 1 green: 0.924 blue: 0.457 alpha: 0.9];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Gradient Declarations
    CGFloat sunBallGradientLocations[] = {0, 0.75, 1};
    CGGradientRef sunBallGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunBallGradientColor.CGColor, (id)[sunBallGradientColor blendedColorWithFraction: 0.5 ofColor: sunBallGradientColor2].CGColor, (id)sunBallGradientColor2.CGColor], sunBallGradientLocations);
    CGFloat sunStarDradientLocations[] = {0, 1};
    CGGradientRef sunStarDradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunStarDradientColor.CGColor, (id)sunStarDradientColor2.CGColor], sunStarDradientLocations);

    //// Shadow Declarations
    NSShadow* sunFrontShadow = [[NSShadow alloc] init];
    [sunFrontShadow setShadowColor: [sunFrontShadowColor colorWithAlphaComponent: CGColorGetAlpha(sunFrontShadowColor.CGColor) * 0.48]];
    [sunFrontShadow setShadowOffset: CGSizeMake(18.1, 15.1)];
    [sunFrontShadow setShadowBlurRadius: 9];
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunFrontShadow.shadowOffset, sunFrontShadow.shadowBlurRadius, [sunFrontShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(99.76, 59.28)];
        [bezier2Path addLineToPoint: CGPointMake(107.14, 45.5)];
        [bezier2Path addLineToPoint: CGPointMake(107.14, 63.88)];
        [bezier2Path addLineToPoint: CGPointMake(129.28, 30.19)];
        [bezier2Path addLineToPoint: CGPointMake(120.42, 68.47)];
        [bezier2Path addLineToPoint: CGPointMake(142.56, 59.28)];
        [bezier2Path addLineToPoint: CGPointMake(129.28, 76.12)];
        [bezier2Path addLineToPoint: CGPointMake(176.5, 63.88)];
        [bezier2Path addLineToPoint: CGPointMake(136.66, 94.5)];
        [bezier2Path addLineToPoint: CGPointMake(149.94, 99.09)];
        [bezier2Path addLineToPoint: CGPointMake(136.66, 106.75)];
        [bezier2Path addLineToPoint: CGPointMake(164.69, 134.31)];
        [bezier2Path addLineToPoint: CGPointMake(129.28, 120.53)];
        [bezier2Path addLineToPoint: CGPointMake(129.5, 134.5)];
        [bezier2Path addLineToPoint: CGPointMake(120.42, 129.72)];
        [bezier2Path addLineToPoint: CGPointMake(129.5, 159.5)];
        [bezier2Path addLineToPoint: CGPointMake(107.14, 134.31)];
        [bezier2Path addLineToPoint: CGPointMake(99.5, 150.5)];
        [bezier2Path addLineToPoint: CGPointMake(93.86, 134.31)];
        [bezier2Path addLineToPoint: CGPointMake(82.5, 167.5)];
        [bezier2Path addLineToPoint: CGPointMake(82.05, 134.31)];
        [bezier2Path addLineToPoint: CGPointMake(68.77, 138.91)];
        [bezier2Path addLineToPoint: CGPointMake(71.72, 123.59)];
        [bezier2Path addLineToPoint: CGPointMake(39.26, 145.03)];
        [bezier2Path addLineToPoint: CGPointMake(64.34, 111.34)];
        [bezier2Path addLineToPoint: CGPointMake(46.64, 106.75)];
        [bezier2Path addLineToPoint: CGPointMake(64.34, 99.09)];
        [bezier2Path addLineToPoint: CGPointMake(24.5, 68.47)];
        [bezier2Path addLineToPoint: CGPointMake(64.34, 82.25)];
        [bezier2Path addLineToPoint: CGPointMake(55.49, 68.47)];
        [bezier2Path addLineToPoint: CGPointMake(68.77, 76.12)];
        [bezier2Path addLineToPoint: CGPointMake(46.64, 30.19)];
        [bezier2Path addLineToPoint: CGPointMake(82.05, 68.47)];
        [bezier2Path addLineToPoint: CGPointMake(82.05, 54.69)];
        [bezier2Path addLineToPoint: CGPointMake(82.05, 54.69)];
        [bezier2Path addLineToPoint: CGPointMake(87.96, 63.88)];
        [bezier2Path addLineToPoint: CGPointMake(87.96, 21)];
        [bezier2Path addLineToPoint: CGPointMake(99.76, 59.28)];
        [bezier2Path closePath];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);
        [bezier2Path addClip];
        CGContextDrawLinearGradient(context, sunStarDradient, CGPointMake(100.5, 21), CGPointMake(100.5, 167.5), 0);
        CGContextEndTransparencyLayer(context);

        ////// Bezier 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(bezier2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [bezier2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);

        [color7 setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];


        //// Oval 6 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 100.18, 99.14);
        CGContextRotateCTM(context, -0.02 * M_PI / 180);

        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-34.1, -35.09, 68.21, 70.19)];
        CGContextSaveGState(context);
        [oval6Path addClip];
        CGContextDrawLinearGradient(context, sunBallGradient, CGPointMake(0, -35.09), CGPointMake(0, 35.09), 0);
        CGContextRestoreGState(context);

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color7 setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];

        CGContextRestoreGState(context);


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(65.5, 70.5, 58.5, 56)];
        [color7 setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(73.5, 71, 42.5, 44.5)];
        [color7 setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(85.5, 78.5, 29.5, 31)];
        [color7 setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];


        //// Oval 13 Drawing
        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(91.5, 89, 18, 20)];
        [color7 setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];


        //// Oval 14 Drawing
        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(92.5, 92, 11.5, 14)];
        [color7 setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];


        //// Oval 15 Drawing
        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(95.5, 93, 5.5, 6.5)];
        [color7 setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(sunBallGradient);
    CGGradientRelease(sunStarDradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas41
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* skyGradientColor2 = [UIColor colorWithRed: 0.325 green: 0.537 blue: 0.184 alpha: 1];
    UIColor* daySkyGradientColor = [UIColor colorWithRed: 0.094 green: 0.449 blue: 0.775 alpha: 1];

    //// Gradient Declarations
    CGFloat daySkyGradientLocations[] = {0, 0.9, 1};
    CGGradientRef daySkyGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)daySkyGradientColor.CGColor, (id)[daySkyGradientColor blendedColorWithFraction: 0.5 ofColor: skyGradientColor2].CGColor, (id)skyGradientColor2.CGColor], daySkyGradientLocations);

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 414, 736)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, daySkyGradient, CGPointMake(207, -0), CGPointMake(207, 736), 0);
    CGContextRestoreGState(context);


    //// Cleanup
    CGGradientRelease(daySkyGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas44
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(16.5, 152.5, 31, 25)];
        [color10 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(74.5, 152.5, 36, 27)];
        [color10 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];


        //// Oval 18 Drawing
        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(100.5, 163.5, 29, 22)];
        [color10 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(74.5, 152.5, 36, 27)];
        [color10 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(47.5, 152.5, 37, 27)];
        [color10 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 160, 38, 28)];
        [color10 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(19.5, 163.5, 38, 26)];
        [color10 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(35, 164, 29, 22)];
        [color10 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(80.5, 168.5, 26, 20)];
        [color10 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(57.5, 168.5, 31, 25)];
        [color10 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(247.5, 97.5, 31, 23)];
        [color10 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(266.5, 101, 29, 21)];
        [color10 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(250, 106, 31, 23)];
        [color10 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        //// Oval 16 Drawing
        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(220, 95, 30, 21)];
        [color10 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];


        //// Oval 21 Drawing
        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(144, 105, 27, 18)];
        [color10 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];


        //// Oval 22 Drawing
        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(162, 95, 35, 21)];
        [color10 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];


        //// Oval 23 Drawing
        UIBezierPath* oval23Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(187, 95, 33, 21)];
        [color10 setFill];
        [oval23Path fill];

        ////// Oval 23 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval23Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval23Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval23Path.lineWidth = 1;
        [oval23Path stroke];


        //// Oval 26 Drawing
        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(228.5, 100.5, 37, 25)];
        [color10 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];


        //// Oval 27 Drawing
        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(211, 105, 36, 22)];
        [color10 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];


        //// Oval 28 Drawing
        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(204.5, 105.5, 26, 18)];
        [color10 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];


        //// Oval 29 Drawing
        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(167, 108, 23, 16)];
        [color10 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];


        //// Oval 30 Drawing
        UIBezierPath* oval30Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(181, 108, 30, 21)];
        [color10 setFill];
        [oval30Path fill];

        ////// Oval 30 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval30Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval30Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval30Path.lineWidth = 1;
        [oval30Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas45
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(336, 64, 28, 19)];
        [color10 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(357.5, 64, 28, 19)];
        [color10 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 19 Drawing
        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(378, 69, 28, 19)];
        [color10 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];


        //// Oval 24 Drawing
        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(324.5, 73.5, 33, 22)];
        [color10 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];


        //// Oval 25 Drawing
        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(342, 72.5, 34, 23)];
        [color10 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];


        //// Oval 26 Drawing
        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(357.5, 76, 28, 19)];
        [color10 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];


        //// Oval 27 Drawing
        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(401, 74.5, 26, 18)];
        [color10 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];


        //// Oval 28 Drawing
        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(378, 76.5, 31, 21)];
        [color10 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 16 Drawing
        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(327, 158.5, 32, 19)];
        [color10 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(359, 157.5, 34, 21)];
        [color10 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(390, 171.5, 30, 16)];
        [color10 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(378, 165.5, 30, 17)];
        [color10 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(342.5, 165.5, 29, 20)];
        [color10 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];


        //// Oval 13 Drawing
        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(282.5, 165.5, 34, 21)];
        [color10 setFill];
        [oval13Path fill];

        ////// Oval 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];


        //// Oval 14 Drawing
        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(264.5, 174.5, 28, 18)];
        [color10 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(307.5, 165.5, 35, 21)];
        [color10 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(333.5, 174.5, 35, 22)];
        [color10 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(286.5, 178.5, 25, 15)];
        [color10 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(303.5, 178.5, 30, 20)];
        [color10 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(326, 175, 27, 18)];
        [color10 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(372, 176.5, 28, 15)];
        [color10 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 35 Drawing
        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(343, 171.5, 35, 23)];
        [color10 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas46
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color7 = [UIColor colorWithRed: 0.644 green: 0.169 blue: 0.012 alpha: 1];
    UIColor* sunBallGradientColor = [UIColor colorWithRed: 0.989 green: 0.508 blue: 0.012 alpha: 0.733];
    UIColor* sunBallGradientColor2 = [UIColor colorWithRed: 0.938 green: 0.137 blue: 0 alpha: 0.834];
    UIColor* sunStarDradientColor = [UIColor colorWithRed: 1 green: 0.765 blue: 0 alpha: 0.841];
    UIColor* sunStarDradientColor2 = [UIColor colorWithRed: 1 green: 0.386 blue: 0 alpha: 0.94];
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* shadow3Color = [UIColor colorWithRed: 1 green: 0.809 blue: 0.235 alpha: 1];
    UIColor* shadow4Color = [UIColor colorWithRed: 1 green: 0.869 blue: 0.333 alpha: 1];
    UIColor* sunFrontShadowColor = [UIColor colorWithRed: 1 green: 0.924 blue: 0.457 alpha: 0.9];

    //// Gradient Declarations
    CGFloat sunBallGradientLocations[] = {0, 0.75, 1};
    CGGradientRef sunBallGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunBallGradientColor.CGColor, (id)[sunBallGradientColor blendedColorWithFraction: 0.5 ofColor: sunBallGradientColor2].CGColor, (id)sunBallGradientColor2.CGColor], sunBallGradientLocations);
    CGFloat sunStarDradientLocations[] = {0, 1};
    CGGradientRef sunStarDradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunStarDradientColor.CGColor, (id)sunStarDradientColor2.CGColor], sunStarDradientLocations);

    //// Shadow Declarations
    NSShadow* sunFrontShadow = [[NSShadow alloc] init];
    [sunFrontShadow setShadowColor: [sunFrontShadowColor colorWithAlphaComponent: CGColorGetAlpha(sunFrontShadowColor.CGColor) * 0.48]];
    [sunFrontShadow setShadowOffset: CGSizeMake(18.1, 15.1)];
    [sunFrontShadow setShadowBlurRadius: 9];
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow3 = [[NSShadow alloc] init];
    [shadow3 setShadowColor: [shadow3Color colorWithAlphaComponent: CGColorGetAlpha(shadow3Color.CGColor) * 0.34]];
    [shadow3 setShadowOffset: CGSizeMake(-27.1, -8.1)];
    [shadow3 setShadowBlurRadius: 8];
    NSShadow* shadow4 = [[NSShadow alloc] init];
    [shadow4 setShadowColor: [shadow4Color colorWithAlphaComponent: CGColorGetAlpha(shadow4Color.CGColor) * 0.47]];
    [shadow4 setShadowOffset: CGSizeMake(6.1, -25.1)];
    [shadow4 setShadowBlurRadius: 8];

    //// Group 5
    {
        //// Bezier 7 Drawing
        UIBezierPath* bezier7Path = [UIBezierPath bezierPath];
        [bezier7Path moveToPoint: CGPointMake(59, 188)];
        [bezier7Path addLineToPoint: CGPointMake(0, 313)];
        [shadow4Color setStroke];
        bezier7Path.lineWidth = 1.5;
        [bezier7Path stroke];


        //// Bezier 10 Drawing
        UIBezierPath* bezier10Path = [UIBezierPath bezierPath];
        [bezier10Path moveToPoint: CGPointMake(235, 84)];
        [bezier10Path addLineToPoint: CGPointMake(413, 66)];
        [bezier10Path addCurveToPoint: CGPointMake(413, 84) controlPoint1: CGPointMake(413, 66) controlPoint2: CGPointMake(416, 84)];
        [bezier10Path addCurveToPoint: CGPointMake(235, 84) controlPoint1: CGPointMake(410, 84) controlPoint2: CGPointMake(235, 84)];
        [bezier10Path closePath];
        [moonFrontShadowColor setFill];
        [bezier10Path fill];
        [shadow4Color setStroke];
        bezier10Path.lineWidth = 1.5;
        [bezier10Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(0, 313)];
        [bezier3Path addLineToPoint: CGPointMake(0, 341)];
        [bezier3Path addLineToPoint: CGPointMake(59, 188)];
        [moonFrontShadowColor setFill];
        [bezier3Path fill];
        [shadow4Color setStroke];
        bezier3Path.lineWidth = 1.5;
        [bezier3Path stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(102, 219)];
        [bezier2Path addLineToPoint: CGPointMake(74, 730.55)];
        [bezier2Path addLineToPoint: CGPointMake(102, 735)];
        [bezier2Path addLineToPoint: CGPointMake(102, 219)];
        [bezier2Path closePath];
        [moonFrontShadowColor setFill];
        [bezier2Path fill];
        [shadow4Color setStroke];
        bezier2Path.lineWidth = 1.5;
        [bezier2Path stroke];
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Group 6
        {
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow3.shadowOffset, shadow3.shadowBlurRadius, [shadow3.shadowColor CGColor]);
            CGContextBeginTransparencyLayer(context, NULL);


            //// Group 7
            {
                //// Group 8
                {
                    CGContextSaveGState(context);
                    CGContextSetShadowWithColor(context, shadow4.shadowOffset, shadow4.shadowBlurRadius, [shadow4.shadowColor CGColor]);
                    CGContextBeginTransparencyLayer(context, NULL);


                    //// Bezier Drawing
                    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                    [bezierPath moveToPoint: CGPointMake(107.76, 74.28)];
                    [bezierPath addLineToPoint: CGPointMake(115.14, 60.5)];
                    [bezierPath addLineToPoint: CGPointMake(115.14, 78.88)];
                    [bezierPath addLineToPoint: CGPointMake(137.28, 45.19)];
                    [bezierPath addLineToPoint: CGPointMake(128.42, 83.47)];
                    [bezierPath addLineToPoint: CGPointMake(150.56, 74.28)];
                    [bezierPath addLineToPoint: CGPointMake(137.28, 91.12)];
                    [bezierPath addLineToPoint: CGPointMake(184.5, 78.88)];
                    [bezierPath addLineToPoint: CGPointMake(144.66, 109.5)];
                    [bezierPath addLineToPoint: CGPointMake(157.94, 114.09)];
                    [bezierPath addLineToPoint: CGPointMake(144.66, 121.75)];
                    [bezierPath addLineToPoint: CGPointMake(172.69, 149.31)];
                    [bezierPath addLineToPoint: CGPointMake(137.28, 135.53)];
                    [bezierPath addLineToPoint: CGPointMake(137.5, 149.5)];
                    [bezierPath addLineToPoint: CGPointMake(128.42, 144.72)];
                    [bezierPath addLineToPoint: CGPointMake(137.5, 174.5)];
                    [bezierPath addLineToPoint: CGPointMake(115.14, 149.31)];
                    [bezierPath addLineToPoint: CGPointMake(107.5, 165.5)];
                    [bezierPath addLineToPoint: CGPointMake(101.86, 149.31)];
                    [bezierPath addLineToPoint: CGPointMake(90.5, 182.5)];
                    [bezierPath addLineToPoint: CGPointMake(90.05, 149.31)];
                    [bezierPath addLineToPoint: CGPointMake(76.77, 153.91)];
                    [bezierPath addLineToPoint: CGPointMake(79.72, 138.59)];
                    [bezierPath addLineToPoint: CGPointMake(47.26, 160.03)];
                    [bezierPath addLineToPoint: CGPointMake(72.34, 126.34)];
                    [bezierPath addLineToPoint: CGPointMake(54.64, 121.75)];
                    [bezierPath addLineToPoint: CGPointMake(72.34, 114.09)];
                    [bezierPath addLineToPoint: CGPointMake(32.5, 83.47)];
                    [bezierPath addLineToPoint: CGPointMake(72.34, 97.25)];
                    [bezierPath addLineToPoint: CGPointMake(63.49, 83.47)];
                    [bezierPath addLineToPoint: CGPointMake(76.77, 91.12)];
                    [bezierPath addLineToPoint: CGPointMake(54.64, 45.19)];
                    [bezierPath addLineToPoint: CGPointMake(90.05, 83.47)];
                    [bezierPath addLineToPoint: CGPointMake(90.05, 69.69)];
                    [bezierPath addLineToPoint: CGPointMake(90.05, 69.69)];
                    [bezierPath addLineToPoint: CGPointMake(95.96, 78.88)];
                    [bezierPath addLineToPoint: CGPointMake(95.96, 36)];
                    [bezierPath addLineToPoint: CGPointMake(107.76, 74.28)];
                    [bezierPath closePath];
                    CGContextSaveGState(context);
                    CGContextSetShadowWithColor(context, sunFrontShadow.shadowOffset, sunFrontShadow.shadowBlurRadius, [sunFrontShadow.shadowColor CGColor]);
                    CGContextBeginTransparencyLayer(context, NULL);
                    [bezierPath addClip];
                    CGContextDrawLinearGradient(context, sunStarDradient, CGPointMake(108.5, 36), CGPointMake(108.5, 182.5), 0);
                    CGContextEndTransparencyLayer(context);
                    CGContextRestoreGState(context);

                    [color7 setStroke];
                    bezierPath.lineWidth = 1;
                    [bezierPath stroke];


                    //// Oval Drawing
                    CGContextSaveGState(context);
                    CGContextTranslateCTM(context, 108.18, 114.14);
                    CGContextRotateCTM(context, -0.02 * M_PI / 180);

                    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-34.1, -35.09, 68.21, 70.19)];
                    CGContextSaveGState(context);
                    [ovalPath addClip];
                    CGContextDrawLinearGradient(context, sunBallGradient, CGPointMake(0, -35.09), CGPointMake(0, 35.09), 0);
                    CGContextRestoreGState(context);
                    [color7 setStroke];
                    ovalPath.lineWidth = 1;
                    [ovalPath stroke];

                    CGContextRestoreGState(context);


                    //// Oval 2 Drawing
                    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(73.5, 85.5, 58.5, 56)];
                    [color7 setStroke];
                    oval2Path.lineWidth = 1;
                    [oval2Path stroke];


                    //// Oval 3 Drawing
                    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(83.5, 86, 40.5, 44.5)];
                    [color7 setStroke];
                    oval3Path.lineWidth = 1;
                    [oval3Path stroke];


                    //// Oval 4 Drawing
                    UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(94.5, 93.5, 29.5, 31)];
                    [color7 setStroke];
                    oval4Path.lineWidth = 1;
                    [oval4Path stroke];


                    //// Oval 5 Drawing
                    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(98.5, 103, 18, 20)];
                    [color7 setStroke];
                    oval5Path.lineWidth = 1;
                    [oval5Path stroke];


                    //// Oval 6 Drawing
                    UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(98.5, 106, 11.5, 14)];
                    [color7 setStroke];
                    oval6Path.lineWidth = 1;
                    [oval6Path stroke];


                    //// Oval 7 Drawing
                    UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(101.5, 108, 5.5, 6)];
                    [color7 setStroke];
                    oval7Path.lineWidth = 1;
                    [oval7Path stroke];


                    CGContextEndTransparencyLayer(context);
                    CGContextRestoreGState(context);
                }
            }


            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);
        }


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(sunBallGradient);
    CGGradientRelease(sunStarDradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas47
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color7 = [UIColor colorWithRed: 0.644 green: 0.169 blue: 0.012 alpha: 1];
    UIColor* moonGradientColor = [UIColor colorWithRed: 1 green: 0.945 blue: 0.698 alpha: 1];
    UIColor* sunBallGradientColor = [UIColor colorWithRed: 0.989 green: 0.508 blue: 0.012 alpha: 0.733];
    UIColor* sunBallGradientColor2 = [UIColor colorWithRed: 0.938 green: 0.137 blue: 0 alpha: 0.834];
    UIColor* sunStarDradientColor = [UIColor colorWithRed: 1 green: 0.765 blue: 0 alpha: 0.841];
    UIColor* sunStarDradientColor2 = [UIColor colorWithRed: 1 green: 0.386 blue: 0 alpha: 0.94];
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* shadow3Color = [UIColor colorWithRed: 1 green: 0.809 blue: 0.235 alpha: 1];
    UIColor* shadow4Color = [UIColor colorWithRed: 1 green: 0.869 blue: 0.333 alpha: 1];
    UIColor* sunFrontShadowColor = [UIColor colorWithRed: 1 green: 0.924 blue: 0.457 alpha: 0.9];

    //// Gradient Declarations
    CGFloat sunBallGradientLocations[] = {0, 0.75, 1};
    CGGradientRef sunBallGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunBallGradientColor.CGColor, (id)[sunBallGradientColor blendedColorWithFraction: 0.5 ofColor: sunBallGradientColor2].CGColor, (id)sunBallGradientColor2.CGColor], sunBallGradientLocations);
    CGFloat sunStarDradientLocations[] = {0, 1};
    CGGradientRef sunStarDradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunStarDradientColor.CGColor, (id)sunStarDradientColor2.CGColor], sunStarDradientLocations);

    //// Shadow Declarations
    NSShadow* sunFrontShadow = [[NSShadow alloc] init];
    [sunFrontShadow setShadowColor: [sunFrontShadowColor colorWithAlphaComponent: CGColorGetAlpha(sunFrontShadowColor.CGColor) * 0.48]];
    [sunFrontShadow setShadowOffset: CGSizeMake(18.1, 15.1)];
    [sunFrontShadow setShadowBlurRadius: 9];
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow3 = [[NSShadow alloc] init];
    [shadow3 setShadowColor: [shadow3Color colorWithAlphaComponent: CGColorGetAlpha(shadow3Color.CGColor) * 0.34]];
    [shadow3 setShadowOffset: CGSizeMake(-27.1, -8.1)];
    [shadow3 setShadowBlurRadius: 8];
    NSShadow* shadow4 = [[NSShadow alloc] init];
    [shadow4 setShadowColor: [shadow4Color colorWithAlphaComponent: CGColorGetAlpha(shadow4Color.CGColor) * 0.47]];
    [shadow4 setShadowOffset: CGSizeMake(6.1, -25.1)];
    [shadow4 setShadowBlurRadius: 8];

    //// Group 5
    {
        //// Bezier 14 Drawing
        UIBezierPath* bezier14Path = [UIBezierPath bezierPath];
        [bezier14Path moveToPoint: CGPointMake(182, 319)];
        [bezier14Path addLineToPoint: CGPointMake(331, 736)];
        [bezier14Path addLineToPoint: CGPointMake(309, 736)];
        [bezier14Path addLineToPoint: CGPointMake(182, 319)];
        [bezier14Path closePath];
        bezier14Path.lineCapStyle = kCGLineCapRound;

        [moonFrontShadowColor setFill];
        [bezier14Path fill];
        [moonFrontShadowColor setStroke];
        bezier14Path.lineWidth = 1;
        [bezier14Path stroke];


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(192.5, 194.5)];
        [bezierPath addLineToPoint: CGPointMake(414, 437)];
        [bezierPath addLineToPoint: CGPointMake(414, 407)];
        [moonGradientColor setFill];
        [bezierPath fill];
        [moonFrontShadowColor setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Group 6
        {
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow3.shadowOffset, shadow3.shadowBlurRadius, [shadow3.shadowColor CGColor]);
            CGContextBeginTransparencyLayer(context, NULL);


            //// Group 7
            {
                //// Group 8
                {
                    CGContextSaveGState(context);
                    CGContextSetShadowWithColor(context, shadow4.shadowOffset, shadow4.shadowBlurRadius, [shadow4.shadowColor CGColor]);
                    CGContextBeginTransparencyLayer(context, NULL);


                    //// Bezier 2 Drawing
                    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
                    [bezier2Path moveToPoint: CGPointMake(118.76, 80.28)];
                    [bezier2Path addLineToPoint: CGPointMake(126.14, 66.5)];
                    [bezier2Path addLineToPoint: CGPointMake(126.14, 84.88)];
                    [bezier2Path addLineToPoint: CGPointMake(148.28, 51.19)];
                    [bezier2Path addLineToPoint: CGPointMake(139.42, 89.47)];
                    [bezier2Path addLineToPoint: CGPointMake(161.56, 80.28)];
                    [bezier2Path addLineToPoint: CGPointMake(148.28, 97.12)];
                    [bezier2Path addLineToPoint: CGPointMake(195.5, 84.88)];
                    [bezier2Path addLineToPoint: CGPointMake(155.66, 115.5)];
                    [bezier2Path addLineToPoint: CGPointMake(168.94, 120.09)];
                    [bezier2Path addLineToPoint: CGPointMake(155.66, 127.75)];
                    [bezier2Path addLineToPoint: CGPointMake(183.69, 155.31)];
                    [bezier2Path addLineToPoint: CGPointMake(148.28, 141.53)];
                    [bezier2Path addLineToPoint: CGPointMake(148.5, 155.5)];
                    [bezier2Path addLineToPoint: CGPointMake(139.42, 150.72)];
                    [bezier2Path addLineToPoint: CGPointMake(148.5, 180.5)];
                    [bezier2Path addLineToPoint: CGPointMake(126.14, 155.31)];
                    [bezier2Path addLineToPoint: CGPointMake(118.5, 171.5)];
                    [bezier2Path addLineToPoint: CGPointMake(112.86, 155.31)];
                    [bezier2Path addLineToPoint: CGPointMake(101.5, 188.5)];
                    [bezier2Path addLineToPoint: CGPointMake(101.05, 155.31)];
                    [bezier2Path addLineToPoint: CGPointMake(87.77, 159.91)];
                    [bezier2Path addLineToPoint: CGPointMake(90.72, 144.59)];
                    [bezier2Path addLineToPoint: CGPointMake(58.26, 166.03)];
                    [bezier2Path addLineToPoint: CGPointMake(83.34, 132.34)];
                    [bezier2Path addLineToPoint: CGPointMake(65.64, 127.75)];
                    [bezier2Path addLineToPoint: CGPointMake(83.34, 120.09)];
                    [bezier2Path addLineToPoint: CGPointMake(43.5, 89.47)];
                    [bezier2Path addLineToPoint: CGPointMake(83.34, 103.25)];
                    [bezier2Path addLineToPoint: CGPointMake(74.49, 89.47)];
                    [bezier2Path addLineToPoint: CGPointMake(87.77, 97.12)];
                    [bezier2Path addLineToPoint: CGPointMake(65.64, 51.19)];
                    [bezier2Path addLineToPoint: CGPointMake(101.05, 89.47)];
                    [bezier2Path addLineToPoint: CGPointMake(101.05, 75.69)];
                    [bezier2Path addLineToPoint: CGPointMake(101.05, 75.69)];
                    [bezier2Path addLineToPoint: CGPointMake(106.96, 84.88)];
                    [bezier2Path addLineToPoint: CGPointMake(106.96, 42)];
                    [bezier2Path addLineToPoint: CGPointMake(118.76, 80.28)];
                    [bezier2Path closePath];
                    CGContextSaveGState(context);
                    CGContextSetShadowWithColor(context, sunFrontShadow.shadowOffset, sunFrontShadow.shadowBlurRadius, [sunFrontShadow.shadowColor CGColor]);
                    CGContextBeginTransparencyLayer(context, NULL);
                    [bezier2Path addClip];
                    CGContextDrawLinearGradient(context, sunStarDradient, CGPointMake(119.5, 42), CGPointMake(119.5, 188.5), 0);
                    CGContextEndTransparencyLayer(context);
                    CGContextRestoreGState(context);

                    [color7 setStroke];
                    bezier2Path.lineWidth = 1;
                    [bezier2Path stroke];


                    //// Oval Drawing
                    CGContextSaveGState(context);
                    CGContextTranslateCTM(context, 119.18, 120.14);
                    CGContextRotateCTM(context, -0.02 * M_PI / 180);

                    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-34.1, -35.09, 68.21, 70.19)];
                    CGContextSaveGState(context);
                    [ovalPath addClip];
                    CGContextDrawLinearGradient(context, sunBallGradient, CGPointMake(0, -35.09), CGPointMake(0, 35.09), 0);
                    CGContextRestoreGState(context);
                    [color7 setStroke];
                    ovalPath.lineWidth = 1;
                    [ovalPath stroke];

                    CGContextRestoreGState(context);


                    //// Oval 2 Drawing
                    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(84.5, 91.5, 58.5, 56)];
                    [color7 setStroke];
                    oval2Path.lineWidth = 1;
                    [oval2Path stroke];


                    //// Oval 3 Drawing
                    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(94.5, 92, 40.5, 44.5)];
                    [color7 setStroke];
                    oval3Path.lineWidth = 1;
                    [oval3Path stroke];


                    //// Oval 4 Drawing
                    UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(105.5, 99.5, 29.5, 31)];
                    [color7 setStroke];
                    oval4Path.lineWidth = 1;
                    [oval4Path stroke];


                    //// Oval 5 Drawing
                    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(109.5, 109, 18, 20)];
                    [color7 setStroke];
                    oval5Path.lineWidth = 1;
                    [oval5Path stroke];


                    //// Oval 6 Drawing
                    UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(109.5, 112, 11.5, 14)];
                    [color7 setStroke];
                    oval6Path.lineWidth = 1;
                    [oval6Path stroke];


                    //// Oval 7 Drawing
                    UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(112.5, 114, 5.5, 6)];
                    [color7 setStroke];
                    oval7Path.lineWidth = 1;
                    [oval7Path stroke];


                    CGContextEndTransparencyLayer(context);
                    CGContextRestoreGState(context);
                }
            }


            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);
        }


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(sunBallGradient);
    CGGradientRelease(sunStarDradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas48
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color7 = [UIColor colorWithRed: 0.644 green: 0.169 blue: 0.012 alpha: 1];
    UIColor* sunBallGradientColor = [UIColor colorWithRed: 0.989 green: 0.508 blue: 0.012 alpha: 0.733];
    UIColor* sunBallGradientColor2 = [UIColor colorWithRed: 0.938 green: 0.137 blue: 0 alpha: 0.834];
    UIColor* sunStarDradientColor = [UIColor colorWithRed: 1 green: 0.765 blue: 0 alpha: 0.841];
    UIColor* sunStarDradientColor2 = [UIColor colorWithRed: 1 green: 0.386 blue: 0 alpha: 0.94];
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* shadow3Color = [UIColor colorWithRed: 1 green: 0.809 blue: 0.235 alpha: 1];
    UIColor* shadow4Color = [UIColor colorWithRed: 1 green: 0.869 blue: 0.333 alpha: 1];
    UIColor* sunFrontShadowColor = [UIColor colorWithRed: 1 green: 0.924 blue: 0.457 alpha: 0.9];

    //// Gradient Declarations
    CGFloat sunBallGradientLocations[] = {0, 0.75, 1};
    CGGradientRef sunBallGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunBallGradientColor.CGColor, (id)[sunBallGradientColor blendedColorWithFraction: 0.5 ofColor: sunBallGradientColor2].CGColor, (id)sunBallGradientColor2.CGColor], sunBallGradientLocations);
    CGFloat sunStarDradientLocations[] = {0, 1};
    CGGradientRef sunStarDradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunStarDradientColor.CGColor, (id)sunStarDradientColor2.CGColor], sunStarDradientLocations);

    //// Shadow Declarations
    NSShadow* sunFrontShadow = [[NSShadow alloc] init];
    [sunFrontShadow setShadowColor: [sunFrontShadowColor colorWithAlphaComponent: CGColorGetAlpha(sunFrontShadowColor.CGColor) * 0.48]];
    [sunFrontShadow setShadowOffset: CGSizeMake(18.1, 15.1)];
    [sunFrontShadow setShadowBlurRadius: 9];
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow3 = [[NSShadow alloc] init];
    [shadow3 setShadowColor: [shadow3Color colorWithAlphaComponent: CGColorGetAlpha(shadow3Color.CGColor) * 0.34]];
    [shadow3 setShadowOffset: CGSizeMake(-27.1, -8.1)];
    [shadow3 setShadowBlurRadius: 8];
    NSShadow* shadow4 = [[NSShadow alloc] init];
    [shadow4 setShadowColor: [shadow4Color colorWithAlphaComponent: CGColorGetAlpha(shadow4Color.CGColor) * 0.47]];
    [shadow4 setShadowOffset: CGSizeMake(6.1, -25.1)];
    [shadow4 setShadowBlurRadius: 8];

    //// Group 5
    {
        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(198, 290)];
        [bezier3Path addLineToPoint: CGPointMake(414, 735)];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        [shadow4Color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(432.5, 718.5)];
        [bezierPath addLineToPoint: CGPointMake(406.5, 745.5)];
        [bezierPath addLineToPoint: CGPointMake(157.5, 218.5)];
        [moonFrontShadowColor setFill];
        [bezierPath fill];
        [shadow4Color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(414.5, 242.5)];
        [bezier2Path addLineToPoint: CGPointMake(414.5, 264.5)];
        [bezier2Path addLineToPoint: CGPointMake(196.5, 151.5)];
        [moonFrontShadowColor setFill];
        [bezier2Path fill];
        [shadow4Color setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Group 3
        {
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow3.shadowOffset, shadow3.shadowBlurRadius, [shadow3.shadowColor CGColor]);
            CGContextBeginTransparencyLayer(context, NULL);


            //// Group 4
            {
                //// Group 9
                {
                    CGContextSaveGState(context);
                    CGContextSetShadowWithColor(context, shadow4.shadowOffset, shadow4.shadowBlurRadius, [shadow4.shadowColor CGColor]);
                    CGContextBeginTransparencyLayer(context, NULL);


                    //// Bezier 5 Drawing
                    UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
                    [bezier5Path moveToPoint: CGPointMake(107.76, 78.78)];
                    [bezier5Path addLineToPoint: CGPointMake(115.14, 65)];
                    [bezier5Path addLineToPoint: CGPointMake(115.14, 83.38)];
                    [bezier5Path addLineToPoint: CGPointMake(137.28, 49.69)];
                    [bezier5Path addLineToPoint: CGPointMake(128.42, 87.97)];
                    [bezier5Path addLineToPoint: CGPointMake(150.56, 78.78)];
                    [bezier5Path addLineToPoint: CGPointMake(137.28, 95.62)];
                    [bezier5Path addLineToPoint: CGPointMake(184.5, 83.38)];
                    [bezier5Path addLineToPoint: CGPointMake(144.66, 114)];
                    [bezier5Path addLineToPoint: CGPointMake(157.94, 118.59)];
                    [bezier5Path addLineToPoint: CGPointMake(144.66, 126.25)];
                    [bezier5Path addLineToPoint: CGPointMake(172.69, 153.81)];
                    [bezier5Path addLineToPoint: CGPointMake(137.28, 140.03)];
                    [bezier5Path addLineToPoint: CGPointMake(137.5, 154)];
                    [bezier5Path addLineToPoint: CGPointMake(128.42, 149.22)];
                    [bezier5Path addLineToPoint: CGPointMake(137.5, 179)];
                    [bezier5Path addLineToPoint: CGPointMake(115.14, 153.81)];
                    [bezier5Path addLineToPoint: CGPointMake(107.5, 170)];
                    [bezier5Path addLineToPoint: CGPointMake(101.86, 153.81)];
                    [bezier5Path addLineToPoint: CGPointMake(90.5, 187)];
                    [bezier5Path addLineToPoint: CGPointMake(90.05, 153.81)];
                    [bezier5Path addLineToPoint: CGPointMake(76.77, 158.41)];
                    [bezier5Path addLineToPoint: CGPointMake(79.72, 143.09)];
                    [bezier5Path addLineToPoint: CGPointMake(47.26, 164.53)];
                    [bezier5Path addLineToPoint: CGPointMake(72.34, 130.84)];
                    [bezier5Path addLineToPoint: CGPointMake(54.64, 126.25)];
                    [bezier5Path addLineToPoint: CGPointMake(72.34, 118.59)];
                    [bezier5Path addLineToPoint: CGPointMake(32.5, 87.97)];
                    [bezier5Path addLineToPoint: CGPointMake(72.34, 101.75)];
                    [bezier5Path addLineToPoint: CGPointMake(63.49, 87.97)];
                    [bezier5Path addLineToPoint: CGPointMake(76.77, 95.62)];
                    [bezier5Path addLineToPoint: CGPointMake(54.64, 49.69)];
                    [bezier5Path addLineToPoint: CGPointMake(90.05, 87.97)];
                    [bezier5Path addLineToPoint: CGPointMake(90.05, 74.19)];
                    [bezier5Path addLineToPoint: CGPointMake(90.05, 74.19)];
                    [bezier5Path addLineToPoint: CGPointMake(95.96, 83.38)];
                    [bezier5Path addLineToPoint: CGPointMake(95.96, 40.5)];
                    [bezier5Path addLineToPoint: CGPointMake(107.76, 78.78)];
                    [bezier5Path closePath];
                    CGContextSaveGState(context);
                    CGContextSetShadowWithColor(context, sunFrontShadow.shadowOffset, sunFrontShadow.shadowBlurRadius, [sunFrontShadow.shadowColor CGColor]);
                    CGContextBeginTransparencyLayer(context, NULL);
                    [bezier5Path addClip];
                    CGContextDrawLinearGradient(context, sunStarDradient, CGPointMake(108.5, 40.5), CGPointMake(108.5, 187), 0);
                    CGContextEndTransparencyLayer(context);
                    CGContextRestoreGState(context);

                    [color7 setStroke];
                    bezier5Path.lineWidth = 1;
                    [bezier5Path stroke];


                    //// Oval 8 Drawing
                    CGContextSaveGState(context);
                    CGContextTranslateCTM(context, 108.18, 118.64);
                    CGContextRotateCTM(context, -0.02 * M_PI / 180);

                    UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-34.1, -35.09, 68.21, 70.19)];
                    CGContextSaveGState(context);
                    [oval8Path addClip];
                    CGContextDrawLinearGradient(context, sunBallGradient, CGPointMake(0, -35.09), CGPointMake(0, 35.09), 0);
                    CGContextRestoreGState(context);
                    [color7 setStroke];
                    oval8Path.lineWidth = 1;
                    [oval8Path stroke];

                    CGContextRestoreGState(context);


                    //// Oval 9 Drawing
                    UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(73.5, 90, 58.5, 56)];
                    [color7 setStroke];
                    oval9Path.lineWidth = 1;
                    [oval9Path stroke];


                    //// Oval 10 Drawing
                    UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(83.5, 90.5, 40.5, 44.5)];
                    [color7 setStroke];
                    oval10Path.lineWidth = 1;
                    [oval10Path stroke];


                    //// Oval 11 Drawing
                    UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(94.5, 98, 29.5, 31)];
                    [color7 setStroke];
                    oval11Path.lineWidth = 1;
                    [oval11Path stroke];


                    //// Oval 12 Drawing
                    UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(98.5, 107.5, 18, 20)];
                    [color7 setStroke];
                    oval12Path.lineWidth = 1;
                    [oval12Path stroke];


                    //// Oval 13 Drawing
                    UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(98.5, 110.5, 11.5, 14)];
                    [color7 setStroke];
                    oval13Path.lineWidth = 1;
                    [oval13Path stroke];


                    //// Oval 14 Drawing
                    UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(101.5, 112.5, 5.5, 6)];
                    [color7 setStroke];
                    oval14Path.lineWidth = 1;
                    [oval14Path stroke];


                    CGContextEndTransparencyLayer(context);
                    CGContextRestoreGState(context);
                }
            }


            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);
        }


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(sunBallGradient);
    CGGradientRelease(sunStarDradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas49
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color7 = [UIColor colorWithRed: 0.644 green: 0.169 blue: 0.012 alpha: 1];
    UIColor* sunBallGradientColor = [UIColor colorWithRed: 0.989 green: 0.508 blue: 0.012 alpha: 0.733];
    UIColor* sunBallGradientColor2 = [UIColor colorWithRed: 0.938 green: 0.137 blue: 0 alpha: 0.834];
    UIColor* sunStarDradientColor = [UIColor colorWithRed: 1 green: 0.765 blue: 0 alpha: 0.841];
    UIColor* sunStarDradientColor2 = [UIColor colorWithRed: 1 green: 0.386 blue: 0 alpha: 0.94];
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* shadow3Color = [UIColor colorWithRed: 1 green: 0.809 blue: 0.235 alpha: 1];
    UIColor* shadow4Color = [UIColor colorWithRed: 1 green: 0.869 blue: 0.333 alpha: 1];
    UIColor* sunFrontShadowColor = [UIColor colorWithRed: 1 green: 0.924 blue: 0.457 alpha: 0.9];

    //// Gradient Declarations
    CGFloat sunBallGradientLocations[] = {0, 0.75, 1};
    CGGradientRef sunBallGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunBallGradientColor.CGColor, (id)[sunBallGradientColor blendedColorWithFraction: 0.5 ofColor: sunBallGradientColor2].CGColor, (id)sunBallGradientColor2.CGColor], sunBallGradientLocations);
    CGFloat sunStarDradientLocations[] = {0, 1};
    CGGradientRef sunStarDradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunStarDradientColor.CGColor, (id)sunStarDradientColor2.CGColor], sunStarDradientLocations);

    //// Shadow Declarations
    NSShadow* sunFrontShadow = [[NSShadow alloc] init];
    [sunFrontShadow setShadowColor: [sunFrontShadowColor colorWithAlphaComponent: CGColorGetAlpha(sunFrontShadowColor.CGColor) * 0.48]];
    [sunFrontShadow setShadowOffset: CGSizeMake(18.1, 15.1)];
    [sunFrontShadow setShadowBlurRadius: 9];
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow3 = [[NSShadow alloc] init];
    [shadow3 setShadowColor: [shadow3Color colorWithAlphaComponent: CGColorGetAlpha(shadow3Color.CGColor) * 0.34]];
    [shadow3 setShadowOffset: CGSizeMake(-27.1, -8.1)];
    [shadow3 setShadowBlurRadius: 8];
    NSShadow* shadow4 = [[NSShadow alloc] init];
    [shadow4 setShadowColor: [shadow4Color colorWithAlphaComponent: CGColorGetAlpha(shadow4Color.CGColor) * 0.47]];
    [shadow4 setShadowOffset: CGSizeMake(6.1, -25.1)];
    [shadow4 setShadowBlurRadius: 8];

    //// Group 5
    {
        //// Bezier 15 Drawing
        UIBezierPath* bezier15Path = [UIBezierPath bezierPath];
        [bezier15Path moveToPoint: CGPointMake(128.5, 249.5)];
        [bezier15Path addLineToPoint: CGPointMake(188.5, 732.5)];
        [bezier15Path addLineToPoint: CGPointMake(214.5, 732.5)];
        [bezier15Path addLineToPoint: CGPointMake(128.5, 249.5)];
        [bezier15Path closePath];
        [moonFrontShadowColor setFill];
        [bezier15Path fill];
        [shadow4Color setStroke];
        bezier15Path.lineWidth = 1;
        [bezier15Path stroke];


        //// Bezier 17 Drawing
        UIBezierPath* bezier17Path = [UIBezierPath bezierPath];
        [bezier17Path moveToPoint: CGPointMake(74, 248)];
        [bezier17Path addLineToPoint: CGPointMake(2, 550)];
        [bezier17Path addLineToPoint: CGPointMake(2, 605)];
        [bezier17Path addLineToPoint: CGPointMake(74, 248)];
        [bezier17Path closePath];
        [moonFrontShadowColor setFill];
        [bezier17Path fill];
        [shadow4Color setStroke];
        bezier17Path.lineWidth = 1;
        [bezier17Path stroke];


        //// Bezier 20 Drawing
        UIBezierPath* bezier20Path = [UIBezierPath bezierPath];
        [bezier20Path moveToPoint: CGPointMake(239, 68)];
        [bezier20Path addLineToPoint: CGPointMake(419, 2)];
        [bezier20Path addLineToPoint: CGPointMake(419, 23)];
        [bezier20Path addLineToPoint: CGPointMake(239, 68)];
        [bezier20Path closePath];
        [moonFrontShadowColor setFill];
        [bezier20Path fill];
        [shadow4Color setStroke];
        bezier20Path.lineWidth = 1;
        [bezier20Path stroke];
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Group 3
        {
            CGContextSaveGState(context);
            CGContextSetShadowWithColor(context, shadow3.shadowOffset, shadow3.shadowBlurRadius, [shadow3.shadowColor CGColor]);
            CGContextBeginTransparencyLayer(context, NULL);


            //// Group 4
            {
                //// Group 9
                {
                    CGContextSaveGState(context);
                    CGContextSetShadowWithColor(context, shadow4.shadowOffset, shadow4.shadowBlurRadius, [shadow4.shadowColor CGColor]);
                    CGContextBeginTransparencyLayer(context, NULL);


                    //// Bezier Drawing
                    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
                    [bezierPath moveToPoint: CGPointMake(106.76, 70.28)];
                    [bezierPath addLineToPoint: CGPointMake(114.14, 56.5)];
                    [bezierPath addLineToPoint: CGPointMake(114.14, 74.88)];
                    [bezierPath addLineToPoint: CGPointMake(136.28, 41.19)];
                    [bezierPath addLineToPoint: CGPointMake(127.42, 79.47)];
                    [bezierPath addLineToPoint: CGPointMake(149.56, 70.28)];
                    [bezierPath addLineToPoint: CGPointMake(136.28, 87.12)];
                    [bezierPath addLineToPoint: CGPointMake(183.5, 74.88)];
                    [bezierPath addLineToPoint: CGPointMake(143.66, 105.5)];
                    [bezierPath addLineToPoint: CGPointMake(156.94, 110.09)];
                    [bezierPath addLineToPoint: CGPointMake(143.66, 117.75)];
                    [bezierPath addLineToPoint: CGPointMake(171.69, 145.31)];
                    [bezierPath addLineToPoint: CGPointMake(136.28, 131.53)];
                    [bezierPath addLineToPoint: CGPointMake(136.5, 145.5)];
                    [bezierPath addLineToPoint: CGPointMake(127.42, 140.72)];
                    [bezierPath addLineToPoint: CGPointMake(136.5, 170.5)];
                    [bezierPath addLineToPoint: CGPointMake(114.14, 145.31)];
                    [bezierPath addLineToPoint: CGPointMake(106.5, 161.5)];
                    [bezierPath addLineToPoint: CGPointMake(100.86, 145.31)];
                    [bezierPath addLineToPoint: CGPointMake(89.5, 178.5)];
                    [bezierPath addLineToPoint: CGPointMake(89.05, 145.31)];
                    [bezierPath addLineToPoint: CGPointMake(75.77, 149.91)];
                    [bezierPath addLineToPoint: CGPointMake(78.72, 134.59)];
                    [bezierPath addLineToPoint: CGPointMake(46.26, 156.03)];
                    [bezierPath addLineToPoint: CGPointMake(71.34, 122.34)];
                    [bezierPath addLineToPoint: CGPointMake(53.64, 117.75)];
                    [bezierPath addLineToPoint: CGPointMake(71.34, 110.09)];
                    [bezierPath addLineToPoint: CGPointMake(31.5, 79.47)];
                    [bezierPath addLineToPoint: CGPointMake(71.34, 93.25)];
                    [bezierPath addLineToPoint: CGPointMake(62.49, 79.47)];
                    [bezierPath addLineToPoint: CGPointMake(75.77, 87.12)];
                    [bezierPath addLineToPoint: CGPointMake(53.64, 41.19)];
                    [bezierPath addLineToPoint: CGPointMake(89.05, 79.47)];
                    [bezierPath addLineToPoint: CGPointMake(89.05, 65.69)];
                    [bezierPath addLineToPoint: CGPointMake(89.05, 65.69)];
                    [bezierPath addLineToPoint: CGPointMake(94.96, 74.88)];
                    [bezierPath addLineToPoint: CGPointMake(94.96, 32)];
                    [bezierPath addLineToPoint: CGPointMake(106.76, 70.28)];
                    [bezierPath closePath];
                    CGContextSaveGState(context);
                    CGContextSetShadowWithColor(context, sunFrontShadow.shadowOffset, sunFrontShadow.shadowBlurRadius, [sunFrontShadow.shadowColor CGColor]);
                    CGContextBeginTransparencyLayer(context, NULL);
                    [bezierPath addClip];
                    CGContextDrawLinearGradient(context, sunStarDradient, CGPointMake(107.5, 32), CGPointMake(107.5, 178.5), 0);
                    CGContextEndTransparencyLayer(context);
                    CGContextRestoreGState(context);

                    [color7 setStroke];
                    bezierPath.lineWidth = 1;
                    [bezierPath stroke];


                    //// Oval 8 Drawing
                    CGContextSaveGState(context);
                    CGContextTranslateCTM(context, 107.18, 110.14);
                    CGContextRotateCTM(context, -0.02 * M_PI / 180);

                    UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-34.1, -35.09, 68.21, 70.19)];
                    CGContextSaveGState(context);
                    [oval8Path addClip];
                    CGContextDrawLinearGradient(context, sunBallGradient, CGPointMake(0, -35.09), CGPointMake(0, 35.09), 0);
                    CGContextRestoreGState(context);
                    [color7 setStroke];
                    oval8Path.lineWidth = 1;
                    [oval8Path stroke];

                    CGContextRestoreGState(context);


                    //// Oval 9 Drawing
                    UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(72.5, 81.5, 58.5, 56)];
                    [color7 setStroke];
                    oval9Path.lineWidth = 1;
                    [oval9Path stroke];


                    //// Oval 10 Drawing
                    UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(82.5, 82, 40.5, 44.5)];
                    [color7 setStroke];
                    oval10Path.lineWidth = 1;
                    [oval10Path stroke];


                    //// Oval 11 Drawing
                    UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(93.5, 89.5, 29.5, 31)];
                    [color7 setStroke];
                    oval11Path.lineWidth = 1;
                    [oval11Path stroke];


                    //// Oval 12 Drawing
                    UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(97.5, 99, 18, 20)];
                    [color7 setStroke];
                    oval12Path.lineWidth = 1;
                    [oval12Path stroke];


                    //// Oval 13 Drawing
                    UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(97.5, 102, 11.5, 14)];
                    [color7 setStroke];
                    oval13Path.lineWidth = 1;
                    [oval13Path stroke];


                    //// Oval 14 Drawing
                    UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(100.5, 104, 5.5, 6)];
                    [color7 setStroke];
                    oval14Path.lineWidth = 1;
                    [oval14Path stroke];


                    CGContextEndTransparencyLayer(context);
                    CGContextRestoreGState(context);
                }
            }


            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);
        }


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(sunBallGradient);
    CGGradientRelease(sunStarDradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas50
{
    //// Color Declarations
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];

    //// Group
    {
        //// Bezier 14 Drawing
        UIBezierPath* bezier14Path = [UIBezierPath bezierPath];
        [bezier14Path moveToPoint: CGPointMake(208.1, 393.9)];
        [bezier14Path addLineToPoint: CGPointMake(159.5, 223.5)];
        [bezier14Path addLineToPoint: CGPointMake(331, 736)];
        [bezier14Path addLineToPoint: CGPointMake(305.68, 736)];
        [bezier14Path addLineToPoint: CGPointMake(208.1, 393.9)];
        [bezier14Path closePath];
        bezier14Path.lineCapStyle = kCGLineCapRound;

        [moonFrontShadowColor setFill];
        [bezier14Path fill];
        [moonFrontShadowColor setStroke];
        bezier14Path.lineWidth = 1;
        [bezier14Path stroke];
    }
}

+ (void)drawCanvas51
{
    //// Color Declarations
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* shadow4Color = [UIColor colorWithRed: 1 green: 0.869 blue: 0.333 alpha: 1];

    //// Group 5
    {
        //// Bezier 15 Drawing
        UIBezierPath* bezier15Path = [UIBezierPath bezierPath];
        [bezier15Path moveToPoint: CGPointMake(119.5, 241.5)];
        [bezier15Path addLineToPoint: CGPointMake(176.5, 732.5)];
        [bezier15Path addLineToPoint: CGPointMake(214.5, 732.5)];
        [bezier15Path addLineToPoint: CGPointMake(119.5, 241.5)];
        [bezier15Path closePath];
        [moonFrontShadowColor setFill];
        [bezier15Path fill];
        [shadow4Color setStroke];
        bezier15Path.lineWidth = 1;
        [bezier15Path stroke];
    }
}

+ (void)drawCanvas52
{
    //// Color Declarations
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* shadow4Color = [UIColor colorWithRed: 1 green: 0.869 blue: 0.333 alpha: 1];

    //// Group 5
    {
        //// Bezier 7 Drawing
        UIBezierPath* bezier7Path = [UIBezierPath bezierPath];
        [bezier7Path moveToPoint: CGPointMake(59, 188)];
        [bezier7Path addLineToPoint: CGPointMake(0, 348)];
        [shadow4Color setStroke];
        bezier7Path.lineWidth = 1.5;
        [bezier7Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(0, 348)];
        [bezier3Path addLineToPoint: CGPointMake(0, 389)];
        [bezier3Path addLineToPoint: CGPointMake(59, 188)];
        [moonFrontShadowColor setFill];
        [bezier3Path fill];
        [shadow4Color setStroke];
        bezier3Path.lineWidth = 1.5;
        [bezier3Path stroke];
    }
}

+ (void)drawCanvas53
{
    //// Color Declarations
    UIColor* moonFrontShadowColor = [UIColor colorWithRed: 1 green: 0.985 blue: 0.815 alpha: 1];
    UIColor* shadow4Color = [UIColor colorWithRed: 1 green: 0.869 blue: 0.333 alpha: 1];

    //// Group 5
    {
        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(146, 200.1)];
        [bezier3Path addLineToPoint: CGPointMake(413.88, 735)];
        bezier3Path.lineCapStyle = kCGLineCapRound;

        [shadow4Color setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(414.5, 734.4)];
        [bezierPath addLineToPoint: CGPointMake(368.61, 734.4)];
        [bezierPath addLineToPoint: CGPointMake(146.62, 199.5)];
        [moonFrontShadowColor setFill];
        [bezierPath fill];
        [shadow4Color setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];
    }
}

+ (void)drawCanvas54
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 132 Drawing
        UIBezierPath* oval132Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(290, 166, 30, 21)];
        [color10 setFill];
        [oval132Path fill];

        ////// Oval 132 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval132Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval132Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval132Path.lineWidth = 1;
        [oval132Path stroke];


        //// Oval 133 Drawing
        UIBezierPath* oval133Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(230, 166, 34, 22)];
        [color10 setFill];
        [oval133Path fill];

        ////// Oval 133 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval133Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval133Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval133Path.lineWidth = 1;
        [oval133Path stroke];


        //// Oval 134 Drawing
        UIBezierPath* oval134Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(212, 175, 28, 18)];
        [color10 setFill];
        [oval134Path fill];

        ////// Oval 134 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval134Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval134Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval134Path.lineWidth = 1;
        [oval134Path stroke];


        //// Oval 135 Drawing
        UIBezierPath* oval135Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(230, 166, 34, 22)];
        [color10 setFill];
        [oval135Path fill];

        ////// Oval 135 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval135Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval135Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval135Path.lineWidth = 1;
        [oval135Path stroke];


        //// Oval 136 Drawing
        UIBezierPath* oval136Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(255, 166, 35, 22)];
        [color10 setFill];
        [oval136Path fill];

        ////// Oval 136 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval136Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval136Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval136Path.lineWidth = 1;
        [oval136Path stroke];


        //// Oval 137 Drawing
        UIBezierPath* oval137Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(299.5, 172.5, 36, 24)];
        [color10 setFill];
        [oval137Path fill];

        ////// Oval 137 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval137Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval137Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval137Path.lineWidth = 1;
        [oval137Path stroke];


        //// Oval 138 Drawing
        UIBezierPath* oval138Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(281, 175, 36, 23)];
        [color10 setFill];
        [oval138Path fill];

        ////// Oval 138 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval138Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval138Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval138Path.lineWidth = 1;
        [oval138Path stroke];


        //// Oval 139 Drawing
        UIBezierPath* oval139Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(273.5, 175.5, 28, 18)];
        [color10 setFill];
        [oval139Path fill];

        ////// Oval 139 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval139Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval139Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval139Path.lineWidth = 1;
        [oval139Path stroke];


        //// Oval 140 Drawing
        UIBezierPath* oval140Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(234, 179, 25, 16)];
        [color10 setFill];
        [oval140Path fill];

        ////// Oval 140 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval140Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval140Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval140Path.lineWidth = 1;
        [oval140Path stroke];


        //// Oval 141 Drawing
        UIBezierPath* oval141Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(251, 178, 30, 21)];
        [color10 setFill];
        [oval141Path fill];

        ////// Oval 141 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval141Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval141Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval141Path.lineWidth = 1;
        [oval141Path stroke];


        //// Oval 21 Drawing
        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(372, 165.5, 30, 20)];
        [color10 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];


        //// Oval 22 Drawing
        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(312, 165.5, 34, 21)];
        [color10 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];


        //// Oval 23 Drawing
        UIBezierPath* oval23Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(294, 173.5, 28, 18)];
        [color10 setFill];
        [oval23Path fill];

        ////// Oval 23 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval23Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval23Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval23Path.lineWidth = 1;
        [oval23Path stroke];


        //// Oval 24 Drawing
        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(312, 165.5, 34, 21)];
        [color10 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];


        //// Oval 25 Drawing
        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(337, 165.5, 35, 21)];
        [color10 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];


        //// Oval 26 Drawing
        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(381.5, 171, 36, 23)];
        [color10 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];


        //// Oval 27 Drawing
        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(363, 173.5, 36, 22)];
        [color10 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];


        //// Oval 28 Drawing
        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(355.5, 174, 28, 18)];
        [color10 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];


        //// Oval 29 Drawing
        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(316, 177.5, 25, 15)];
        [color10 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];


        //// Oval 30 Drawing
        UIBezierPath* oval30Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(333, 177.5, 30, 20)];
        [color10 setFill];
        [oval30Path fill];

        ////// Oval 30 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval30Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval30Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval30Path.lineWidth = 1;
        [oval30Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 105 Drawing
        UIBezierPath* oval105Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(339.5, 109.5, 30, 18)];
        [color10 setFill];
        [oval105Path fill];

        ////// Oval 105 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval105Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval105Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval105Path.lineWidth = 1;
        [oval105Path stroke];


        //// Oval 104 Drawing
        UIBezierPath* oval104Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(389, 108.5, 34, 21)];
        [color10 setFill];
        [oval104Path fill];

        ////// Oval 104 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval104Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval104Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval104Path.lineWidth = 1;
        [oval104Path stroke];


        //// Oval 106 Drawing
        UIBezierPath* oval106Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(341.5, 101.5, 38, 23)];
        [color10 setFill];
        [oval106Path fill];

        ////// Oval 106 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval106Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval106Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval106Path.lineWidth = 1;
        [oval106Path stroke];


        //// Oval 107 Drawing
        UIBezierPath* oval107Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(361, 106, 35, 21)];
        [color10 setFill];
        [oval107Path fill];

        ////// Oval 107 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval107Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval107Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval107Path.lineWidth = 1;
        [oval107Path stroke];


        //// Oval 77 Drawing
        UIBezierPath* oval77Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(388, 96.5, 34, 19)];
        [color10 setFill];
        [oval77Path fill];

        ////// Oval 77 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval77Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval77Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval77Path.lineWidth = 1;
        [oval77Path stroke];


        //// Oval 78 Drawing
        UIBezierPath* oval78Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(360.5, 94.5, 34, 19)];
        [color10 setFill];
        [oval78Path fill];

        ////// Oval 78 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval78Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval78Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval78Path.lineWidth = 1;
        [oval78Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 86 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 222.54, 61.99);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval86Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 30, 17)];
        [color10 setFill];
        [oval86Path fill];

        ////// Oval 86 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval86Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval86Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval86Path.lineWidth = 1;
        [oval86Path stroke];

        CGContextRestoreGState(context);


        //// Oval 87 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 196.69, 69.03);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval87Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 35, 20)];
        [color10 setFill];
        [oval87Path fill];

        ////// Oval 87 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval87Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval87Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval87Path.lineWidth = 1;
        [oval87Path stroke];

        CGContextRestoreGState(context);


        //// Oval 89 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 201.95, 62.38);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval89Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29, 17)];
        [color10 setFill];
        [oval89Path fill];

        ////// Oval 89 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval89Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval89Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval89Path.lineWidth = 1;
        [oval89Path stroke];

        CGContextRestoreGState(context);


        //// Oval 90 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 252.37, 54.48);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval90Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26, 16)];
        [color10 setFill];
        [oval90Path fill];

        ////// Oval 90 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval90Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval90Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval90Path.lineWidth = 1;
        [oval90Path stroke];

        CGContextRestoreGState(context);


        //// Oval 91 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 221.56, 53.54);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval91Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 32, 19)];
        [color10 setFill];
        [oval91Path fill];

        ////// Oval 91 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval91Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval91Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval91Path.lineWidth = 1;
        [oval91Path stroke];

        CGContextRestoreGState(context);


        //// Oval 98 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 317.25, 67.3);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval98Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 32, 20)];
        [color10 setFill];
        [oval98Path fill];

        ////// Oval 98 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval98Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval98Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval98Path.lineWidth = 1;
        [oval98Path stroke];

        CGContextRestoreGState(context);


        //// Oval 99 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 257.17, 65.75);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval99Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 37, 24)];
        [color10 setFill];
        [oval99Path fill];

        ////// Oval 99 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval99Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval99Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval99Path.lineWidth = 1;
        [oval99Path stroke];

        CGContextRestoreGState(context);


        //// Oval 100 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 276.53, 63.49);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval100Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 38, 25)];
        [color10 setFill];
        [oval100Path fill];

        ////// Oval 100 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval100Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval100Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval100Path.lineWidth = 1;
        [oval100Path stroke];

        CGContextRestoreGState(context);


        //// Oval 101 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 294.67, 67.92);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval101Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31, 20)];
        [color10 setFill];
        [oval101Path fill];

        ////// Oval 101 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval101Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval101Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval101Path.lineWidth = 1;
        [oval101Path stroke];

        CGContextRestoreGState(context);


        //// Oval 102 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 339.44, 62.82);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval102Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 29, 20)];
        [color10 setFill];
        [oval102Path fill];

        ////// Oval 102 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval102Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval102Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval102Path.lineWidth = 1;
        [oval102Path stroke];

        CGContextRestoreGState(context);


        //// Oval 103 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 316.03, 56.87);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval103Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 35, 22)];
        [color10 setFill];
        [oval103Path fill];

        ////// Oval 103 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval103Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval103Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval103Path.lineWidth = 1;
        [oval103Path stroke];

        CGContextRestoreGState(context);


        //// Oval 92 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 265.72, 66.65);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval92Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28, 19)];
        [color10 setFill];
        [oval92Path fill];

        ////// Oval 92 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval92Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval92Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval92Path.lineWidth = 1;
        [oval92Path stroke];

        CGContextRestoreGState(context);


        //// Oval 93 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 211.71, 65.4);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval93Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 33, 22)];
        [color10 setFill];
        [oval93Path fill];

        ////// Oval 93 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval93Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval93Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval93Path.lineWidth = 1;
        [oval93Path stroke];

        CGContextRestoreGState(context);


        //// Oval 94 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 229.09, 63.37);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval94Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 34, 23)];
        [color10 setFill];
        [oval94Path fill];

        ////// Oval 94 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval94Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval94Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval94Path.lineWidth = 1;
        [oval94Path stroke];

        CGContextRestoreGState(context);


        //// Oval 95 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 245.12, 67.04);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval95Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 28, 19)];
        [color10 setFill];
        [oval95Path fill];

        ////// Oval 95 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval95Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval95Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval95Path.lineWidth = 1;
        [oval95Path stroke];

        CGContextRestoreGState(context);


        //// Oval 96 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 288.04, 59.51);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval96Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 26, 18)];
        [color10 setFill];
        [oval96Path fill];

        ////// Oval 96 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval96Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval96Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval96Path.lineWidth = 1;
        [oval96Path stroke];

        CGContextRestoreGState(context);


        //// Oval 97 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 264.62, 57.21);
        CGContextRotateCTM(context, -6.66 * M_PI / 180);

        UIBezierPath* oval97Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 0, 31, 21)];
        [color10 setFill];
        [oval97Path fill];

        ////// Oval 97 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval97Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval97Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval97Path.lineWidth = 1;
        [oval97Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas55
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 148 Drawing
        UIBezierPath* oval148Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(87.5, 154.5, 27, 17)];
        [color10 setFill];
        [oval148Path fill];

        ////// Oval 148 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval148Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval148Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval148Path.lineWidth = 1;
        [oval148Path stroke];


        //// Oval 142 Drawing
        UIBezierPath* oval142Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(76.5, 160.5, 37, 24)];
        [color10 setFill];
        [oval142Path fill];

        ////// Oval 142 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval142Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval142Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval142Path.lineWidth = 1;
        [oval142Path stroke];


        //// Oval 143 Drawing
        UIBezierPath* oval143Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(104.5, 159.5, 31, 21)];
        [color10 setFill];
        [oval143Path fill];

        ////// Oval 143 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval143Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval143Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval143Path.lineWidth = 1;
        [oval143Path stroke];


        //// Oval 144 Drawing
        UIBezierPath* oval144Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(61.5, 156.5, 34, 21)];
        [color10 setFill];
        [oval144Path fill];

        ////// Oval 144 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval144Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval144Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval144Path.lineWidth = 1;
        [oval144Path stroke];


        //// Oval 145 Drawing
        UIBezierPath* oval145Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(6, 160, 35, 23)];
        [color10 setFill];
        [oval145Path fill];

        ////// Oval 145 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval145Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval145Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval145Path.lineWidth = 1;
        [oval145Path stroke];


        //// Oval 147 Drawing
        UIBezierPath* oval147Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(90.5, 165.5, 28, 19)];
        [color10 setFill];
        [oval147Path fill];

        ////// Oval 147 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval147Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval147Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval147Path.lineWidth = 1;
        [oval147Path stroke];


        //// Oval 149 Drawing
        UIBezierPath* oval149Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(25.5, 155.5, 31, 21)];
        [color10 setFill];
        [oval149Path fill];

        ////// Oval 149 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval149Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval149Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval149Path.lineWidth = 1;
        [oval149Path stroke];


        //// Oval 150 Drawing
        UIBezierPath* oval150Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(44.5, 154.5, 31, 18)];
        [color10 setFill];
        [oval150Path fill];

        ////// Oval 150 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval150Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval150Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval150Path.lineWidth = 1;
        [oval150Path stroke];


        //// Oval 146 Drawing
        UIBezierPath* oval146Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(27.5, 164.5, 35, 22)];
        [color10 setFill];
        [oval146Path fill];

        ////// Oval 146 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval146Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval146Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval146Path.lineWidth = 1;
        [oval146Path stroke];


        //// Oval 152 Drawing
        UIBezierPath* oval152Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(64.5, 164.5, 33, 23)];
        [color10 setFill];
        [oval152Path fill];

        ////// Oval 152 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval152Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval152Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval152Path.lineWidth = 1;
        [oval152Path stroke];


        //// Oval 151 Drawing
        UIBezierPath* oval151Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(44.5, 168.5, 31, 20)];
        [color10 setFill];
        [oval151Path fill];

        ////// Oval 151 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval151Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval151Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval151Path.lineWidth = 1;
        [oval151Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(39.5, 89, 30, 21)];
        [color10 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-21.5, 89, 34, 23)];
        [color10 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];


        //// Oval 14 Drawing
        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-21.5, 89, 34, 23)];
        [color10 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];


        //// Oval 15 Drawing
        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(3.5, 89, 36, 23)];
        [color10 setFill];
        [oval15Path fill];

        ////// Oval 15 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval15Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval15Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];


        //// Oval 16 Drawing
        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(49, 95.5, 36, 24)];
        [color10 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(30.5, 97, 36, 25)];
        [color10 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];


        //// Oval 18 Drawing
        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(22, 98.5, 29, 19)];
        [color10 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];


        //// Oval 19 Drawing
        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-17.5, 102, 25, 17)];
        [color10 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];


        //// Oval 20 Drawing
        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.5, 103, 31, 21)];
        [color10 setFill];
        [oval20Path fill];

        ////// Oval 20 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval20Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval20Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(109.5, 87, 30, 21)];
        [color10 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(49.5, 87, 34, 23)];
        [color10 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(31.5, 95, 28, 20)];
        [color10 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(49.5, 87, 34, 23)];
        [color10 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(74.5, 87, 35, 23)];
        [color10 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(119, 93.5, 36, 24)];
        [color10 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(100.5, 95, 36, 25)];
        [color10 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(93, 96.5, 28, 19)];
        [color10 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(53.5, 100, 25, 17)];
        [color10 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(70.5, 100.5, 30, 21)];
        [color10 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas56
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color7 = [UIColor colorWithRed: 0.644 green: 0.169 blue: 0.012 alpha: 1];
    UIColor* sunBallGradientColor = [UIColor colorWithRed: 0.989 green: 0.508 blue: 0.012 alpha: 0.733];
    UIColor* sunBallGradientColor2 = [UIColor colorWithRed: 0.938 green: 0.137 blue: 0 alpha: 0.834];
    UIColor* sunStarDradientColor = [UIColor colorWithRed: 1 green: 0.765 blue: 0 alpha: 0.841];
    UIColor* sunStarDradientColor2 = [UIColor colorWithRed: 1 green: 0.386 blue: 0 alpha: 0.94];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Gradient Declarations
    CGFloat sunBallGradientLocations[] = {0, 0.75, 1};
    CGGradientRef sunBallGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunBallGradientColor.CGColor, (id)[sunBallGradientColor blendedColorWithFraction: 0.5 ofColor: sunBallGradientColor2].CGColor, (id)sunBallGradientColor2.CGColor], sunBallGradientLocations);
    CGFloat sunStarDradientLocations[] = {0, 1};
    CGGradientRef sunStarDradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)sunStarDradientColor.CGColor, (id)sunStarDradientColor2.CGColor], sunStarDradientLocations);

    //// Shadow Declarations
    NSShadow* moonShineShadow = [[NSShadow alloc] init];
    [moonShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.47]];
    [moonShineShadow setShadowOffset: CGSizeMake(-9.1, 18.1)];
    [moonShineShadow setShadowBlurRadius: 12];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 19
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShineShadow.shadowOffset, moonShineShadow.shadowBlurRadius, [moonShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(105.76, 50.28)];
        [bezierPath addLineToPoint: CGPointMake(113.14, 36.5)];
        [bezierPath addLineToPoint: CGPointMake(113.14, 54.88)];
        [bezierPath addLineToPoint: CGPointMake(135.28, 21.19)];
        [bezierPath addLineToPoint: CGPointMake(126.42, 59.47)];
        [bezierPath addLineToPoint: CGPointMake(148.56, 50.28)];
        [bezierPath addLineToPoint: CGPointMake(135.28, 67.12)];
        [bezierPath addLineToPoint: CGPointMake(182.5, 54.88)];
        [bezierPath addLineToPoint: CGPointMake(142.66, 85.5)];
        [bezierPath addLineToPoint: CGPointMake(155.94, 90.09)];
        [bezierPath addLineToPoint: CGPointMake(142.66, 97.75)];
        [bezierPath addLineToPoint: CGPointMake(170.69, 125.31)];
        [bezierPath addLineToPoint: CGPointMake(135.28, 111.53)];
        [bezierPath addLineToPoint: CGPointMake(135.5, 125.5)];
        [bezierPath addLineToPoint: CGPointMake(126.42, 120.72)];
        [bezierPath addLineToPoint: CGPointMake(135.5, 150.5)];
        [bezierPath addLineToPoint: CGPointMake(113.14, 125.31)];
        [bezierPath addLineToPoint: CGPointMake(105.5, 141.5)];
        [bezierPath addLineToPoint: CGPointMake(99.86, 125.31)];
        [bezierPath addLineToPoint: CGPointMake(88.5, 158.5)];
        [bezierPath addLineToPoint: CGPointMake(88.05, 125.31)];
        [bezierPath addLineToPoint: CGPointMake(74.77, 129.91)];
        [bezierPath addLineToPoint: CGPointMake(77.72, 114.59)];
        [bezierPath addLineToPoint: CGPointMake(45.26, 136.03)];
        [bezierPath addLineToPoint: CGPointMake(70.34, 102.34)];
        [bezierPath addLineToPoint: CGPointMake(52.64, 97.75)];
        [bezierPath addLineToPoint: CGPointMake(70.34, 90.09)];
        [bezierPath addLineToPoint: CGPointMake(30.5, 59.47)];
        [bezierPath addLineToPoint: CGPointMake(70.34, 73.25)];
        [bezierPath addLineToPoint: CGPointMake(61.49, 59.47)];
        [bezierPath addLineToPoint: CGPointMake(74.77, 67.12)];
        [bezierPath addLineToPoint: CGPointMake(52.64, 21.19)];
        [bezierPath addLineToPoint: CGPointMake(88.05, 59.47)];
        [bezierPath addLineToPoint: CGPointMake(88.05, 45.69)];
        [bezierPath addLineToPoint: CGPointMake(88.05, 45.69)];
        [bezierPath addLineToPoint: CGPointMake(93.96, 54.88)];
        [bezierPath addLineToPoint: CGPointMake(93.96, 12)];
        [bezierPath addLineToPoint: CGPointMake(105.76, 50.28)];
        [bezierPath closePath];
        CGContextSaveGState(context);
        [bezierPath addClip];
        CGContextDrawLinearGradient(context, sunStarDradient, CGPointMake(106.5, 12), CGPointMake(106.5, 158.5), 0);
        CGContextRestoreGState(context);

        ////// Bezier Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(bezierPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [bezierPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color7 setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];


        //// Oval 79 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 106.18, 90.14);
        CGContextRotateCTM(context, -0.02 * M_PI / 180);

        UIBezierPath* oval79Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-34.1, -35.09, 68.21, 70.19)];
        CGContextSaveGState(context);
        [oval79Path addClip];
        CGContextDrawLinearGradient(context, sunBallGradient, CGPointMake(0, -35.09), CGPointMake(0, 35.09), 0);
        CGContextRestoreGState(context);

        ////// Oval 79 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval79Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval79Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [color7 setStroke];
        oval79Path.lineWidth = 1;
        [oval79Path stroke];

        CGContextRestoreGState(context);


        //// Oval 80 Drawing
        UIBezierPath* oval80Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(71.5, 61.5, 58.5, 56)];
        [color7 setStroke];
        oval80Path.lineWidth = 1;
        [oval80Path stroke];


        //// Oval 81 Drawing
        UIBezierPath* oval81Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(81.5, 62, 40.5, 44.5)];
        [color7 setStroke];
        oval81Path.lineWidth = 1;
        [oval81Path stroke];


        //// Oval 82 Drawing
        UIBezierPath* oval82Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(92.5, 69.5, 29.5, 31)];
        [color7 setStroke];
        oval82Path.lineWidth = 1;
        [oval82Path stroke];


        //// Oval 83 Drawing
        UIBezierPath* oval83Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(96.5, 79, 18, 20)];
        [color7 setStroke];
        oval83Path.lineWidth = 1;
        [oval83Path stroke];


        //// Oval 84 Drawing
        UIBezierPath* oval84Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(96.5, 82, 11.5, 14)];
        [color7 setStroke];
        oval84Path.lineWidth = 1;
        [oval84Path stroke];


        //// Oval 85 Drawing
        UIBezierPath* oval85Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(99.5, 84, 5.5, 6)];
        [color7 setStroke];
        oval85Path.lineWidth = 1;
        [oval85Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(sunBallGradient);
    CGGradientRelease(sunStarDradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas57
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* color9 = [UIColor colorWithRed: 0.5 green: 0.5 blue: 0.5 alpha: 1];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(191.5, 106, 30, 20)];
        [color3 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(131.5, 106, 34, 22)];
        [color3 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(113.5, 114, 28, 18)];
        [color3 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(131.5, 106, 34, 22)];
        [color3 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(156.5, 106, 35, 22)];
        [color3 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(201, 112.5, 36, 22)];
        [color3 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(182.5, 114, 36, 23)];
        [color3 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(175, 114.5, 28, 18)];
        [color3 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(135.5, 118, 25, 16)];
        [color3 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(152.5, 119, 30, 20)];
        [color3 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(115.5, 111, 30, 20)];
        [color3 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(55.5, 111, 34, 22)];
        [color3 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];


        //// Oval 13 Drawing
        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(37.5, 119, 28, 18)];
        [color3 setFill];
        [oval13Path fill];

        ////// Oval 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];


        //// Oval 14 Drawing
        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(55.5, 111, 34, 22)];
        [color3 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];


        //// Oval 15 Drawing
        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(80.5, 111, 35, 22)];
        [color3 setFill];
        [oval15Path fill];

        ////// Oval 15 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval15Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval15Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];


        //// Oval 16 Drawing
        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(125, 117.5, 36, 22)];
        [color3 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(106.5, 119, 36, 23)];
        [color3 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];


        //// Oval 18 Drawing
        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(99, 119.5, 28, 18)];
        [color3 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];


        //// Oval 19 Drawing
        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(59.5, 123, 25, 16)];
        [color3 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];


        //// Oval 20 Drawing
        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(76.5, 124, 30, 20)];
        [color3 setFill];
        [oval20Path fill];

        ////// Oval 20 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval20Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval20Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 28
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 42 Drawing
        UIBezierPath* oval42Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(130.5, 89.5, 25, 14.5)];
        [color10 setFill];
        [oval42Path fill];

        ////// Oval 42 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval42Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval42Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval42Path.lineWidth = 1;
        [oval42Path stroke];


        //// Oval 41 Drawing
        UIBezierPath* oval41Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(109.5, 88.5, 26, 14)];
        [color10 setFill];
        [oval41Path fill];

        ////// Oval 41 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval41Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval41Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval41Path.lineWidth = 1;
        [oval41Path stroke];


        //// Oval 118 Drawing
        UIBezierPath* oval118Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(146, 94.5, 30, 20)];
        [color10 setFill];
        [oval118Path fill];

        ////// Oval 118 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval118Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval118Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval118Path.lineWidth = 1;
        [oval118Path stroke];


        //// Oval 119 Drawing
        UIBezierPath* oval119Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(86, 94.5, 34, 22)];
        [color10 setFill];
        [oval119Path fill];

        ////// Oval 119 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval119Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval119Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval119Path.lineWidth = 1;
        [oval119Path stroke];


        //// Oval 120 Drawing
        UIBezierPath* oval120Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(68, 102.5, 28, 18)];
        [color10 setFill];
        [oval120Path fill];

        ////// Oval 120 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval120Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval120Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval120Path.lineWidth = 1;
        [oval120Path stroke];


        //// Oval 121 Drawing
        UIBezierPath* oval121Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(86, 94.5, 34, 22)];
        [color10 setFill];
        [oval121Path fill];

        ////// Oval 121 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval121Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval121Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval121Path.lineWidth = 1;
        [oval121Path stroke];


        //// Oval 122 Drawing
        UIBezierPath* oval122Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(111, 94.5, 35, 22)];
        [color10 setFill];
        [oval122Path fill];

        ////// Oval 122 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval122Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval122Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval122Path.lineWidth = 1;
        [oval122Path stroke];


        //// Oval 123 Drawing
        UIBezierPath* oval123Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(155.5, 101, 36, 22)];
        [color10 setFill];
        [oval123Path fill];

        ////// Oval 123 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval123Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval123Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval123Path.lineWidth = 1;
        [oval123Path stroke];


        //// Oval 124 Drawing
        UIBezierPath* oval124Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(137, 102.5, 36, 23)];
        [color10 setFill];
        [oval124Path fill];

        ////// Oval 124 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval124Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval124Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval124Path.lineWidth = 1;
        [oval124Path stroke];


        //// Oval 125 Drawing
        UIBezierPath* oval125Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(129.5, 103, 28, 18)];
        [color10 setFill];
        [oval125Path fill];

        ////// Oval 125 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval125Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval125Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval125Path.lineWidth = 1;
        [oval125Path stroke];


        //// Oval 126 Drawing
        UIBezierPath* oval126Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(90, 106.5, 25, 16)];
        [color10 setFill];
        [oval126Path fill];

        ////// Oval 126 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval126Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval126Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval126Path.lineWidth = 1;
        [oval126Path stroke];


        //// Oval 127 Drawing
        UIBezierPath* oval127Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(107, 107.5, 30, 20)];
        [color10 setFill];
        [oval127Path fill];

        ////// Oval 127 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval127Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval127Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval127Path.lineWidth = 1;
        [oval127Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 9
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 43 Drawing
        UIBezierPath* oval43Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(15.5, 157, 30, 24)];
        [color9 setFill];
        [oval43Path fill];

        ////// Oval 43 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval43Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval43Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval43Path.lineWidth = 1;
        [oval43Path stroke];


        //// Oval 44 Drawing
        UIBezierPath* oval44Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(71.5, 157, 34, 26)];
        [color9 setFill];
        [oval44Path fill];

        ////// Oval 44 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval44Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval44Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval44Path.lineWidth = 1;
        [oval44Path stroke];


        //// Oval 45 Drawing
        UIBezierPath* oval45Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(95.5, 167, 28, 21)];
        [color9 setFill];
        [oval45Path fill];

        ////// Oval 45 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval45Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval45Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval45Path.lineWidth = 1;
        [oval45Path stroke];


        //// Oval 46 Drawing
        UIBezierPath* oval46Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(71.5, 157, 34, 26)];
        [color9 setFill];
        [oval46Path fill];

        ////// Oval 46 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval46Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval46Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval46Path.lineWidth = 1;
        [oval46Path stroke];


        //// Oval 47 Drawing
        UIBezierPath* oval47Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(45.5, 157, 35, 26)];
        [color9 setFill];
        [oval47Path fill];

        ////// Oval 47 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval47Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval47Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval47Path.lineWidth = 1;
        [oval47Path stroke];


        //// Oval 48 Drawing
        UIBezierPath* oval48Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 164.5, 36, 27)];
        [color9 setFill];
        [oval48Path fill];

        ////// Oval 48 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval48Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval48Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval48Path.lineWidth = 1;
        [oval48Path stroke];


        //// Oval 49 Drawing
        UIBezierPath* oval49Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(18.5, 167, 36, 26)];
        [color9 setFill];
        [oval49Path fill];

        ////// Oval 49 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval49Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval49Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval49Path.lineWidth = 1;
        [oval49Path stroke];


        //// Oval 50 Drawing
        UIBezierPath* oval50Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(34, 167.5, 28, 21)];
        [color9 setFill];
        [oval50Path fill];

        ////// Oval 50 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval50Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval50Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval50Path.lineWidth = 1;
        [oval50Path stroke];


        //// Oval 51 Drawing
        UIBezierPath* oval51Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(76.5, 171, 25, 20)];
        [color9 setFill];
        [oval51Path fill];

        ////// Oval 51 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval51Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval51Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval51Path.lineWidth = 1;
        [oval51Path stroke];


        //// Oval 52 Drawing
        UIBezierPath* oval52Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(54.5, 172, 30, 24)];
        [color9 setFill];
        [oval52Path fill];

        ////// Oval 52 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval52Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval52Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval52Path.lineWidth = 1;
        [oval52Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 11
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 55 Drawing
        UIBezierPath* oval55Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(69.5, 150, 28, 21)];
        [color10 setFill];
        [oval55Path fill];

        ////// Oval 55 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval55Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval55Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval55Path.lineWidth = 1;
        [oval55Path stroke];


        //// Oval 58 Drawing
        UIBezierPath* oval58Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0.5, 153.5, 34, 25)];
        [color10 setFill];
        [oval58Path fill];

        ////// Oval 58 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval58Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval58Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval58Path.lineWidth = 1;
        [oval58Path stroke];


        //// Oval 59 Drawing
        UIBezierPath* oval59Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(14.5, 147.5, 36, 26)];
        [color10 setFill];
        [oval59Path fill];

        ////// Oval 59 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval59Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval59Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval59Path.lineWidth = 1;
        [oval59Path stroke];


        //// Oval 60 Drawing
        UIBezierPath* oval60Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(41.5, 147.5, 28, 21)];
        [color10 setFill];
        [oval60Path fill];

        ////// Oval 60 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval60Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval60Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval60Path.lineWidth = 1;
        [oval60Path stroke];


        //// Oval 61 Drawing
        UIBezierPath* oval61Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(50.5, 154, 25, 20)];
        [color10 setFill];
        [oval61Path fill];

        ////// Oval 61 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval61Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval61Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval61Path.lineWidth = 1;
        [oval61Path stroke];


        //// Oval 62 Drawing
        UIBezierPath* oval62Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(28.5, 155, 30, 24)];
        [color10 setFill];
        [oval62Path fill];

        ////// Oval 62 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval62Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval62Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval62Path.lineWidth = 1;
        [oval62Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 12
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 53 Drawing
        UIBezierPath* oval53Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(17.5, 66.5, 25, 16.5)];
        [color10 setFill];
        [oval53Path fill];

        ////// Oval 53 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval53Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval53Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval53Path.lineWidth = 1;
        [oval53Path stroke];


        //// Oval 54 Drawing
        UIBezierPath* oval54Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-3.5, 65.5, 26, 15)];
        [color10 setFill];
        [oval54Path fill];

        ////// Oval 54 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval54Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval54Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval54Path.lineWidth = 1;
        [oval54Path stroke];


        //// Oval 56 Drawing
        UIBezierPath* oval56Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(33, 72.5, 30, 22)];
        [color10 setFill];
        [oval56Path fill];

        ////// Oval 56 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval56Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval56Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval56Path.lineWidth = 1;
        [oval56Path stroke];


        //// Oval 65 Drawing
        UIBezierPath* oval65Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-2, 72.5, 35, 24)];
        [color10 setFill];
        [oval65Path fill];

        ////// Oval 65 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval65Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval65Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval65Path.lineWidth = 1;
        [oval65Path stroke];


        //// Oval 66 Drawing
        UIBezierPath* oval66Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(33.5, 82.5, 38, 21.5)];
        [color10 setFill];
        [oval66Path fill];

        ////// Oval 66 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval66Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval66Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval66Path.lineWidth = 1;
        [oval66Path stroke];


        //// Oval 67 Drawing
        UIBezierPath* oval67Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(24, 80.5, 36, 26)];
        [color10 setFill];
        [oval67Path fill];

        ////// Oval 67 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval67Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval67Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval67Path.lineWidth = 1;
        [oval67Path stroke];


        //// Oval 68 Drawing
        UIBezierPath* oval68Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(16.5, 81, 28, 20)];
        [color10 setFill];
        [oval68Path fill];

        ////// Oval 68 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval68Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval68Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval68Path.lineWidth = 1;
        [oval68Path stroke];


        //// Oval 70 Drawing
        UIBezierPath* oval70Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6, 86.5, 30, 22)];
        [color10 setFill];
        [oval70Path fill];

        ////// Oval 70 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval70Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval70Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval70Path.lineWidth = 1;
        [oval70Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas58
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color2 = [UIColor colorWithRed: 0.733 green: 0.73 blue: 0.73 alpha: 1];
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 90 Drawing
        UIBezierPath* oval90Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(330, 96, 26, 15)];
        [color2 setFill];
        [oval90Path fill];

        ////// Oval 90 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval90Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval90Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval90Path.lineWidth = 1;
        [oval90Path stroke];


        //// Oval 96 Drawing
        UIBezierPath* oval96Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(346, 106.5, 25, 17)];
        [color2 setFill];
        [oval96Path fill];

        ////// Oval 96 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval96Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval96Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval96Path.lineWidth = 1;
        [oval96Path stroke];


        //// Oval 100 Drawing
        UIBezierPath* oval100Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(341, 102, 36, 23)];
        [color2 setFill];
        [oval100Path fill];

        ////// Oval 100 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval100Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval100Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval100Path.lineWidth = 1;
        [oval100Path stroke];


        //// Oval 98 Drawing
        UIBezierPath* oval98Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(379, 109.5, 30, 19)];
        [color2 setFill];
        [oval98Path fill];

        ////// Oval 98 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval98Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval98Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval98Path.lineWidth = 1;
        [oval98Path stroke];


        //// Oval 101 Drawing
        UIBezierPath* oval101Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(357.5, 107.5, 30, 19)];
        [color2 setFill];
        [oval101Path fill];

        ////// Oval 101 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval101Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval101Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval101Path.lineWidth = 1;
        [oval101Path stroke];


        //// Oval 102 Drawing
        UIBezierPath* oval102Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(404, 104, 27, 19)];
        [color2 setFill];
        [oval102Path fill];

        ////// Oval 102 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval102Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval102Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval102Path.lineWidth = 1;
        [oval102Path stroke];


        //// Oval 103 Drawing
        UIBezierPath* oval103Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(379, 100, 33, 20)];
        [color2 setFill];
        [oval103Path fill];

        ////// Oval 103 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval103Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval103Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval103Path.lineWidth = 1;
        [oval103Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 8
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 21 Drawing
        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(302, 155.5, 30, 19)];
        [color3 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];


        //// Oval 25 Drawing
        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(267, 155.5, 35, 20)];
        [color3 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];


        //// Oval 26 Drawing
        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(311.5, 161, 36, 22)];
        [color3 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];


        //// Oval 27 Drawing
        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(293, 163.5, 36, 21)];
        [color3 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];


        //// Oval 28 Drawing
        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(285.5, 164, 28, 17)];
        [color3 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];


        //// Oval 128 Drawing
        UIBezierPath* oval128Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(343.5, 163.5, 26, 18)];
        [color3 setFill];
        [oval128Path fill];

        ////// Oval 128 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval128Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval128Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval128Path.lineWidth = 1;
        [oval128Path stroke];


        //// Oval 129 Drawing
        UIBezierPath* oval129Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(300.5, 171, 27, 19)];
        [color3 setFill];
        [oval129Path fill];

        ////// Oval 129 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval129Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval129Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval129Path.lineWidth = 1;
        [oval129Path stroke];


        //// Oval 130 Drawing
        UIBezierPath* oval130Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(335.5, 168, 30, 22)];
        [color3 setFill];
        [oval130Path fill];

        ////// Oval 130 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval130Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval130Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval130Path.lineWidth = 1;
        [oval130Path stroke];


        //// Oval 131 Drawing
        UIBezierPath* oval131Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(322, 169.5, 25.5, 20)];
        [color3 setFill];
        [oval131Path fill];

        ////// Oval 131 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval131Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval131Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval131Path.lineWidth = 1;
        [oval131Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 22 Drawing
        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(256, 152.5, 34, 20)];
        [color3 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];


        //// Oval 23 Drawing
        UIBezierPath* oval23Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(238, 160.5, 28, 17)];
        [color3 setFill];
        [oval23Path fill];

        ////// Oval 23 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval23Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval23Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval23Path.lineWidth = 1;
        [oval23Path stroke];


        //// Oval 24 Drawing
        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(256, 152.5, 34, 20)];
        [color3 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];


        //// Oval 29 Drawing
        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(260, 164.5, 25, 14)];
        [color3 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];


        //// Oval 30 Drawing
        UIBezierPath* oval30Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(277, 164.5, 30, 19)];
        [color3 setFill];
        [oval30Path fill];

        ////// Oval 30 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval30Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval30Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval30Path.lineWidth = 1;
        [oval30Path stroke];


        //// Oval 132 Drawing
        UIBezierPath* oval132Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(266, 162, 30, 19)];
        [color3 setFill];
        [oval132Path fill];

        ////// Oval 132 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval132Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval132Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval132Path.lineWidth = 1;
        [oval132Path stroke];


        //// Oval 133 Drawing
        UIBezierPath* oval133Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(206, 162, 34, 20)];
        [color3 setFill];
        [oval133Path fill];

        ////// Oval 133 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval133Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval133Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval133Path.lineWidth = 1;
        [oval133Path stroke];


        //// Oval 134 Drawing
        UIBezierPath* oval134Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(188, 170, 28, 17)];
        [color3 setFill];
        [oval134Path fill];

        ////// Oval 134 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval134Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval134Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval134Path.lineWidth = 1;
        [oval134Path stroke];


        //// Oval 135 Drawing
        UIBezierPath* oval135Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(206, 162, 34, 20)];
        [color3 setFill];
        [oval135Path fill];

        ////// Oval 135 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval135Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval135Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval135Path.lineWidth = 1;
        [oval135Path stroke];


        //// Oval 136 Drawing
        UIBezierPath* oval136Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(231, 162, 35, 20)];
        [color3 setFill];
        [oval136Path fill];

        ////// Oval 136 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval136Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval136Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval136Path.lineWidth = 1;
        [oval136Path stroke];


        //// Oval 137 Drawing
        UIBezierPath* oval137Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(275.5, 167.5, 36, 22)];
        [color3 setFill];
        [oval137Path fill];

        ////// Oval 137 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval137Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval137Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval137Path.lineWidth = 1;
        [oval137Path stroke];


        //// Oval 138 Drawing
        UIBezierPath* oval138Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(257, 170, 36, 21)];
        [color3 setFill];
        [oval138Path fill];

        ////// Oval 138 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval138Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval138Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval138Path.lineWidth = 1;
        [oval138Path stroke];


        //// Oval 139 Drawing
        UIBezierPath* oval139Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(249.5, 170.5, 28, 17)];
        [color3 setFill];
        [oval139Path fill];

        ////// Oval 139 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval139Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval139Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval139Path.lineWidth = 1;
        [oval139Path stroke];


        //// Oval 140 Drawing
        UIBezierPath* oval140Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(210, 174, 25, 14)];
        [color3 setFill];
        [oval140Path fill];

        ////// Oval 140 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval140Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval140Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval140Path.lineWidth = 1;
        [oval140Path stroke];


        //// Oval 141 Drawing
        UIBezierPath* oval141Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(227, 174, 30, 19)];
        [color3 setFill];
        [oval141Path fill];

        ////// Oval 141 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval141Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval141Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval141Path.lineWidth = 1;
        [oval141Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 5
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 31 Drawing
        UIBezierPath* oval31Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(214.5, 139.5, 30, 24)];
        [color10 setFill];
        [oval31Path fill];

        ////// Oval 31 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval31Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval31Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval31Path.lineWidth = 1;
        [oval31Path stroke];


        //// Oval 32 Drawing
        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(270.5, 139.5, 34, 26)];
        [color10 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];


        //// Oval 33 Drawing
        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(294.5, 149.5, 28, 21)];
        [color10 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];


        //// Oval 34 Drawing
        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(270.5, 139.5, 34, 26)];
        [color10 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];


        //// Oval 35 Drawing
        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(244.5, 139.5, 35, 26)];
        [color10 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];


        //// Oval 36 Drawing
        UIBezierPath* oval36Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(199, 147, 36, 27)];
        [color10 setFill];
        [oval36Path fill];

        ////// Oval 36 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval36Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval36Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval36Path.lineWidth = 1;
        [oval36Path stroke];


        //// Oval 37 Drawing
        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(217.5, 149.5, 36, 26)];
        [color10 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];


        //// Oval 38 Drawing
        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(233, 150, 28, 21)];
        [color10 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];


        //// Oval 39 Drawing
        UIBezierPath* oval39Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(275.5, 153.5, 25, 20)];
        [color10 setFill];
        [oval39Path fill];

        ////// Oval 39 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval39Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval39Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval39Path.lineWidth = 1;
        [oval39Path stroke];


        //// Oval 40 Drawing
        UIBezierPath* oval40Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(253.5, 154.5, 30, 24)];
        [color10 setFill];
        [oval40Path fill];

        ////// Oval 40 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval40Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval40Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval40Path.lineWidth = 1;
        [oval40Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 86 Drawing
        UIBezierPath* oval86Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(311, 103.5, 31, 17)];
        [color3 setFill];
        [oval86Path fill];

        ////// Oval 86 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval86Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval86Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval86Path.lineWidth = 1;
        [oval86Path stroke];


        //// Oval 87 Drawing
        UIBezierPath* oval87Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(253.5, 103.5, 36, 20)];
        [color3 setFill];
        [oval87Path fill];

        ////// Oval 87 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval87Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval87Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval87Path.lineWidth = 1;
        [oval87Path stroke];


        //// Oval 88 Drawing
        UIBezierPath* oval88Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(273, 97, 36, 21)];
        [color3 setFill];
        [oval88Path fill];

        ////// Oval 88 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval88Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval88Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval88Path.lineWidth = 1;
        [oval88Path stroke];


        //// Oval 89 Drawing
        UIBezierPath* oval89Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(289.5, 101.5, 30, 17)];
        [color3 setFill];
        [oval89Path fill];

        ////// Oval 89 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval89Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval89Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval89Path.lineWidth = 1;
        [oval89Path stroke];


        //// Oval 91 Drawing
        UIBezierPath* oval91Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(311, 95, 33, 19)];
        [color3 setFill];
        [oval91Path fill];

        ////// Oval 91 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval91Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval91Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval91Path.lineWidth = 1;
        [oval91Path stroke];


        //// Oval 92 Drawing
        UIBezierPath* oval92Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(330, 116, 28, 19)];
        [color3 setFill];
        [oval92Path fill];

        ////// Oval 92 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval92Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval92Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval92Path.lineWidth = 1;
        [oval92Path stroke];


        //// Oval 93 Drawing
        UIBezierPath* oval93Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(276.5, 108.5, 33, 22)];
        [color3 setFill];
        [oval93Path fill];

        ////// Oval 93 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval93Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval93Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval93Path.lineWidth = 1;
        [oval93Path stroke];


        //// Oval 94 Drawing
        UIBezierPath* oval94Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(294, 108.5, 34, 23)];
        [color3 setFill];
        [oval94Path fill];

        ////// Oval 94 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval94Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval94Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval94Path.lineWidth = 1;
        [oval94Path stroke];


        //// Oval 95 Drawing
        UIBezierPath* oval95Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(309.5, 114, 28, 19)];
        [color3 setFill];
        [oval95Path fill];

        ////// Oval 95 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval95Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval95Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval95Path.lineWidth = 1;
        [oval95Path stroke];


        //// Oval 97 Drawing
        UIBezierPath* oval97Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(330, 106.5, 31, 21)];
        [color3 setFill];
        [oval97Path fill];

        ////// Oval 97 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval97Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval97Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval97Path.lineWidth = 1;
        [oval97Path stroke];


        //// Oval 99 Drawing
        UIBezierPath* oval99Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(328.5, 106, 37, 24)];
        [color3 setFill];
        [oval99Path fill];

        ////// Oval 99 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval99Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval99Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval99Path.lineWidth = 1;
        [oval99Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 10
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 104 Drawing
        UIBezierPath* oval104Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(366, 80.5, 29.5, 22)];
        [color10 setFill];
        [oval104Path fill];

        ////// Oval 104 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval104Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval104Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval104Path.lineWidth = 1;
        [oval104Path stroke];


        //// Oval 105 Drawing
        UIBezierPath* oval105Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(312.5, 88.5, 32, 19)];
        [color10 setFill];
        [oval105Path fill];

        ////// Oval 105 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval105Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval105Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval105Path.lineWidth = 1;
        [oval105Path stroke];


        //// Oval 106 Drawing
        UIBezierPath* oval106Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(328.5, 80.5, 38, 24)];
        [color10 setFill];
        [oval106Path fill];

        ////// Oval 106 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval106Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval106Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval106Path.lineWidth = 1;
        [oval106Path stroke];


        //// Oval 107 Drawing
        UIBezierPath* oval107Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(344, 84, 36, 23)];
        [color10 setFill];
        [oval107Path fill];

        ////// Oval 107 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval107Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval107Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval107Path.lineWidth = 1;
        [oval107Path stroke];


        //// Oval 77 Drawing
        UIBezierPath* oval77Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(395, 84.5, 36, 24)];
        [color10 setFill];
        [oval77Path fill];

        ////// Oval 77 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval77Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval77Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval77Path.lineWidth = 1;
        [oval77Path stroke];


        //// Oval 78 Drawing
        UIBezierPath* oval78Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(371.5, 86.5, 36, 24)];
        [color10 setFill];
        [oval78Path fill];

        ////// Oval 78 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval78Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval78Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval78Path.lineWidth = 1;
        [oval78Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 31
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 142 Drawing
        UIBezierPath* oval142Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(239.5, 48.5, 34, 24)];
        [color10 setFill];
        [oval142Path fill];

        ////// Oval 142 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval142Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval142Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval142Path.lineWidth = 1;
        [oval142Path stroke];


        //// Oval 143 Drawing
        UIBezierPath* oval143Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(269.5, 47.5, 28, 21)];
        [color10 setFill];
        [oval143Path fill];

        ////// Oval 143 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval143Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval143Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval143Path.lineWidth = 1;
        [oval143Path stroke];


        //// Oval 144 Drawing
        UIBezierPath* oval144Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(223.5, 34.5, 35, 24)];
        [color10 setFill];
        [oval144Path fill];

        ////// Oval 144 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval144Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval144Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval144Path.lineWidth = 1;
        [oval144Path stroke];


        //// Oval 145 Drawing
        UIBezierPath* oval145Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(176, 47, 32, 22)];
        [color10 setFill];
        [oval145Path fill];

        ////// Oval 145 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval145Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval145Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval145Path.lineWidth = 1;
        [oval145Path stroke];


        //// Oval 146 Drawing
        UIBezierPath* oval146Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(192.5, 53.5, 36, 25)];
        [color10 setFill];
        [oval146Path fill];

        ////// Oval 146 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval146Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval146Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval146Path.lineWidth = 1;
        [oval146Path stroke];


        //// Oval 147 Drawing
        UIBezierPath* oval147Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(250.5, 56.5, 25, 19)];
        [color10 setFill];
        [oval147Path fill];

        ////// Oval 147 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval147Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval147Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval147Path.lineWidth = 1;
        [oval147Path stroke];


        //// Oval 148 Drawing
        UIBezierPath* oval148Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(248.5, 42.5, 25, 16)];
        [color10 setFill];
        [oval148Path fill];

        ////// Oval 148 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval148Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval148Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval148Path.lineWidth = 1;
        [oval148Path stroke];


        //// Oval 149 Drawing
        UIBezierPath* oval149Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(198.5, 36.5, 30, 22)];
        [color10 setFill];
        [oval149Path fill];

        ////// Oval 149 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval149Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval149Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval149Path.lineWidth = 1;
        [oval149Path stroke];


        //// Oval 150 Drawing
        UIBezierPath* oval150Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(208.5, 44.5, 32, 22)];
        [color10 setFill];
        [oval150Path fill];

        ////// Oval 150 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval150Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval150Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval150Path.lineWidth = 1;
        [oval150Path stroke];


        //// Oval 151 Drawing
        UIBezierPath* oval151Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(210.5, 56.5, 28, 19)];
        [color10 setFill];
        [oval151Path fill];

        ////// Oval 151 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval151Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval151Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval151Path.lineWidth = 1;
        [oval151Path stroke];


        //// Oval 152 Drawing
        UIBezierPath* oval152Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(228.5, 52.5, 30, 23)];
        [color10 setFill];
        [oval152Path fill];

        ////// Oval 152 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval152Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval152Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval152Path.lineWidth = 1;
        [oval152Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas59
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color17 = [UIColor colorWithRed: 0.333 green: 0.333 blue: 0.333 alpha: 0.86];
    UIColor* stromCloudOutline = [UIColor colorWithRed: 0.156 green: 0.155 blue: 0.155 alpha: 0.74];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(191.5, 106, 30, 20)];
        [color3 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(131.5, 106, 34, 22)];
        [color3 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(113.5, 114, 28, 18)];
        [color3 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(131.5, 106, 34, 22)];
        [color3 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(156.5, 106, 35, 22)];
        [color3 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(201, 112.5, 36, 22)];
        [color3 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(182.5, 114, 36, 23)];
        [color3 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(175, 114.5, 28, 18)];
        [color3 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(135.5, 118, 25, 16)];
        [color3 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(152.5, 119, 30, 20)];
        [color3 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 5
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(111.5, 110, 30, 20)];
        [color17 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(51.5, 110, 34, 22)];
        [color17 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];


        //// Oval 13 Drawing
        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(33.5, 118, 28, 18)];
        [color17 setFill];
        [oval13Path fill];

        ////// Oval 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];


        //// Oval 14 Drawing
        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(51.5, 110, 34, 22)];
        [color17 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];


        //// Oval 15 Drawing
        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(76.5, 110, 35, 22)];
        [color17 setFill];
        [oval15Path fill];

        ////// Oval 15 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval15Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval15Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];


        //// Oval 16 Drawing
        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(121, 116.5, 36, 22)];
        [color17 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(102.5, 118, 36, 23)];
        [color17 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];


        //// Oval 18 Drawing
        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(95, 118.5, 28, 18)];
        [color17 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];


        //// Oval 19 Drawing
        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(55.5, 122, 25, 16)];
        [color17 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];


        //// Oval 20 Drawing
        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(72.5, 123, 30, 20)];
        [color17 setFill];
        [oval20Path fill];

        ////// Oval 20 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval20Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval20Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 42 Drawing
        UIBezierPath* oval42Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(127.5, 83.5, 25, 14.5)];
        [color17 setFill];
        [oval42Path fill];

        ////// Oval 42 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval42Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval42Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval42Path.lineWidth = 1;
        [oval42Path stroke];


        //// Oval 41 Drawing
        UIBezierPath* oval41Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(106.5, 82.5, 26, 14)];
        [color17 setFill];
        [oval41Path fill];

        ////// Oval 41 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval41Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval41Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval41Path.lineWidth = 1;
        [oval41Path stroke];


        //// Oval 118 Drawing
        UIBezierPath* oval118Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(143, 88.5, 30, 20)];
        [color17 setFill];
        [oval118Path fill];

        ////// Oval 118 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval118Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval118Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval118Path.lineWidth = 1;
        [oval118Path stroke];


        //// Oval 119 Drawing
        UIBezierPath* oval119Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(83, 88.5, 34, 22)];
        [color17 setFill];
        [oval119Path fill];

        ////// Oval 119 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval119Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval119Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval119Path.lineWidth = 1;
        [oval119Path stroke];


        //// Oval 120 Drawing
        UIBezierPath* oval120Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(65, 96.5, 28, 18)];
        [color17 setFill];
        [oval120Path fill];

        ////// Oval 120 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval120Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval120Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval120Path.lineWidth = 1;
        [oval120Path stroke];


        //// Oval 121 Drawing
        UIBezierPath* oval121Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(83, 88.5, 34, 22)];
        [color17 setFill];
        [oval121Path fill];

        ////// Oval 121 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval121Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval121Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval121Path.lineWidth = 1;
        [oval121Path stroke];


        //// Oval 122 Drawing
        UIBezierPath* oval122Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(108, 88.5, 35, 22)];
        [color17 setFill];
        [oval122Path fill];

        ////// Oval 122 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval122Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval122Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval122Path.lineWidth = 1;
        [oval122Path stroke];


        //// Oval 123 Drawing
        UIBezierPath* oval123Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(152.5, 95, 36, 22)];
        [color17 setFill];
        [oval123Path fill];

        ////// Oval 123 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval123Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval123Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval123Path.lineWidth = 1;
        [oval123Path stroke];


        //// Oval 124 Drawing
        UIBezierPath* oval124Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(134, 96.5, 36, 23)];
        [color17 setFill];
        [oval124Path fill];

        ////// Oval 124 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval124Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval124Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval124Path.lineWidth = 1;
        [oval124Path stroke];


        //// Oval 125 Drawing
        UIBezierPath* oval125Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(126.5, 97, 28, 18)];
        [color17 setFill];
        [oval125Path fill];

        ////// Oval 125 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval125Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval125Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval125Path.lineWidth = 1;
        [oval125Path stroke];


        //// Oval 126 Drawing
        UIBezierPath* oval126Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(87, 100.5, 25, 16)];
        [color17 setFill];
        [oval126Path fill];

        ////// Oval 126 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval126Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval126Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval126Path.lineWidth = 1;
        [oval126Path stroke];


        //// Oval 127 Drawing
        UIBezierPath* oval127Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(104, 96.5, 30, 20)];
        [color17 setFill];
        [oval127Path fill];

        ////// Oval 127 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval127Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval127Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval127Path.lineWidth = 1;
        [oval127Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 43 Drawing
        UIBezierPath* oval43Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(15.5, 157, 30, 24)];
        [color17 setFill];
        [oval43Path fill];

        ////// Oval 43 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval43Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval43Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval43Path.lineWidth = 1;
        [oval43Path stroke];


        //// Oval 44 Drawing
        UIBezierPath* oval44Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(71.5, 157, 34, 26)];
        [color17 setFill];
        [oval44Path fill];

        ////// Oval 44 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval44Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval44Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval44Path.lineWidth = 1;
        [oval44Path stroke];


        //// Oval 45 Drawing
        UIBezierPath* oval45Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(95.5, 167, 28, 21)];
        [color17 setFill];
        [oval45Path fill];

        ////// Oval 45 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval45Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval45Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval45Path.lineWidth = 1;
        [oval45Path stroke];


        //// Oval 46 Drawing
        UIBezierPath* oval46Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(71.5, 157, 34, 26)];
        [color17 setFill];
        [oval46Path fill];

        ////// Oval 46 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval46Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval46Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval46Path.lineWidth = 1;
        [oval46Path stroke];


        //// Oval 47 Drawing
        UIBezierPath* oval47Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(45.5, 157, 35, 26)];
        [color17 setFill];
        [oval47Path fill];

        ////// Oval 47 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval47Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval47Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval47Path.lineWidth = 1;
        [oval47Path stroke];


        //// Oval 48 Drawing
        UIBezierPath* oval48Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0, 164.5, 36, 27)];
        [color17 setFill];
        [oval48Path fill];

        ////// Oval 48 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval48Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval48Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval48Path.lineWidth = 1;
        [oval48Path stroke];


        //// Oval 49 Drawing
        UIBezierPath* oval49Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(18.5, 167, 36, 26)];
        [color17 setFill];
        [oval49Path fill];

        ////// Oval 49 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval49Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval49Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval49Path.lineWidth = 1;
        [oval49Path stroke];


        //// Oval 50 Drawing
        UIBezierPath* oval50Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(34, 167.5, 28, 21)];
        [color17 setFill];
        [oval50Path fill];

        ////// Oval 50 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval50Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval50Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval50Path.lineWidth = 1;
        [oval50Path stroke];


        //// Oval 51 Drawing
        UIBezierPath* oval51Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(76.5, 171, 25, 20)];
        [color17 setFill];
        [oval51Path fill];

        ////// Oval 51 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval51Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval51Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval51Path.lineWidth = 1;
        [oval51Path stroke];


        //// Oval 52 Drawing
        UIBezierPath* oval52Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(54.5, 172, 30, 24)];
        [color17 setFill];
        [oval52Path fill];

        ////// Oval 52 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval52Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval52Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval52Path.lineWidth = 1;
        [oval52Path stroke];


        //// Oval 108 Drawing
        UIBezierPath* oval108Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(67.5, 155.5, 30, 24)];
        [color17 setFill];
        [oval108Path fill];

        ////// Oval 108 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval108Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval108Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval108Path.lineWidth = 1;
        [oval108Path stroke];


        //// Oval 109 Drawing
        UIBezierPath* oval109Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(123.5, 155.5, 34, 26)];
        [color17 setFill];
        [oval109Path fill];

        ////// Oval 109 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval109Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval109Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval109Path.lineWidth = 1;
        [oval109Path stroke];


        //// Oval 110 Drawing
        UIBezierPath* oval110Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(147.5, 165.5, 28, 21)];
        [color17 setFill];
        [oval110Path fill];

        ////// Oval 110 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval110Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval110Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval110Path.lineWidth = 1;
        [oval110Path stroke];


        //// Oval 111 Drawing
        UIBezierPath* oval111Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(123.5, 155.5, 34, 26)];
        [color17 setFill];
        [oval111Path fill];

        ////// Oval 111 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval111Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval111Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval111Path.lineWidth = 1;
        [oval111Path stroke];


        //// Oval 112 Drawing
        UIBezierPath* oval112Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(97.5, 155.5, 35, 26)];
        [color17 setFill];
        [oval112Path fill];

        ////// Oval 112 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval112Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval112Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval112Path.lineWidth = 1;
        [oval112Path stroke];


        //// Oval 113 Drawing
        UIBezierPath* oval113Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(52, 163, 36, 27)];
        [color17 setFill];
        [oval113Path fill];

        ////// Oval 113 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval113Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval113Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval113Path.lineWidth = 1;
        [oval113Path stroke];


        //// Oval 114 Drawing
        UIBezierPath* oval114Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(70.5, 165.5, 36, 26)];
        [color17 setFill];
        [oval114Path fill];

        ////// Oval 114 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval114Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval114Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval114Path.lineWidth = 1;
        [oval114Path stroke];


        //// Oval 115 Drawing
        UIBezierPath* oval115Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(86, 166, 28, 21)];
        [color17 setFill];
        [oval115Path fill];

        ////// Oval 115 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval115Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval115Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval115Path.lineWidth = 1;
        [oval115Path stroke];


        //// Oval 116 Drawing
        UIBezierPath* oval116Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(128.5, 169.5, 25, 20)];
        [color17 setFill];
        [oval116Path fill];

        ////// Oval 116 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval116Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval116Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval116Path.lineWidth = 1;
        [oval116Path stroke];


        //// Oval 117 Drawing
        UIBezierPath* oval117Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(106.5, 170.5, 30, 24)];
        [color17 setFill];
        [oval117Path fill];

        ////// Oval 117 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval117Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval117Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval117Path.lineWidth = 1;
        [oval117Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 22 Drawing
        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-10, 176.5, 24, 17)];
        [color3 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];


        //// Oval 21 Drawing
        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-7.5, 149.5, 35, 24)];
        [color3 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];


        //// Oval 75 Drawing
        UIBezierPath* oval75Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(82.5, 159.5, 24, 17)];
        [color3 setFill];
        [oval75Path fill];

        ////// Oval 75 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval75Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval75Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval75Path.lineWidth = 1;
        [oval75Path stroke];


        //// Oval 55 Drawing
        UIBezierPath* oval55Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(64.5, 157, 31, 23)];
        [color3 setFill];
        [oval55Path fill];

        ////// Oval 55 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval55Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval55Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval55Path.lineWidth = 1;
        [oval55Path stroke];


        //// Oval 58 Drawing
        UIBezierPath* oval58Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-6.5, 161.5, 38, 27)];
        [color3 setFill];
        [oval58Path fill];

        ////// Oval 58 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval58Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval58Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval58Path.lineWidth = 1;
        [oval58Path stroke];


        //// Oval 59 Drawing
        UIBezierPath* oval59Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(9.5, 154.5, 39, 28)];
        [color3 setFill];
        [oval59Path fill];

        ////// Oval 59 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval59Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval59Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval59Path.lineWidth = 1;
        [oval59Path stroke];


        //// Oval 60 Drawing
        UIBezierPath* oval60Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(38.5, 154.5, 31, 23)];
        [color3 setFill];
        [oval60Path fill];

        ////// Oval 60 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval60Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval60Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval60Path.lineWidth = 1;
        [oval60Path stroke];


        //// Oval 61 Drawing
        UIBezierPath* oval61Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(48.5, 162, 28, 22)];
        [color3 setFill];
        [oval61Path fill];

        ////// Oval 61 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval61Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval61Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval61Path.lineWidth = 1;
        [oval61Path stroke];


        //// Oval 62 Drawing
        UIBezierPath* oval62Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(24.5, 163, 33, 26)];
        [color3 setFill];
        [oval62Path fill];

        ////// Oval 62 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval62Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval62Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval62Path.lineWidth = 1;
        [oval62Path stroke];


        //// Oval 74 Drawing
        UIBezierPath* oval74Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(48.5, 162, 28, 22)];
        [color3 setFill];
        [oval74Path fill];

        ////// Oval 74 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval74Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval74Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval74Path.lineWidth = 1;
        [oval74Path stroke];


        //// Oval 76 Drawing
        UIBezierPath* oval76Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(71.5, 167.5, 24, 17)];
        [color3 setFill];
        [oval76Path fill];

        ////// Oval 76 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval76Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval76Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval76Path.lineWidth = 1;
        [oval76Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 53 Drawing
        UIBezierPath* oval53Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(8, 81, 30, 24)];
        [color17 setFill];
        [oval53Path fill];

        ////// Oval 53 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval53Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval53Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval53Path.lineWidth = 1;
        [oval53Path stroke];


        //// Oval 56 Drawing
        UIBezierPath* oval56Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(36, 75, 33, 26)];
        [color17 setFill];
        [oval56Path fill];

        ////// Oval 56 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval56Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval56Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval56Path.lineWidth = 1;
        [oval56Path stroke];


        //// Oval 57 Drawing
        UIBezierPath* oval57Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(75, 86, 32, 26)];
        [color17 setFill];
        [oval57Path fill];

        ////// Oval 57 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval57Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval57Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval57Path.lineWidth = 1;
        [oval57Path stroke];


        //// Oval 64 Drawing
        UIBezierPath* oval64Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(22, 83, 25, 19)];
        [color17 setFill];
        [oval64Path fill];

        ////// Oval 64 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval64Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval64Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval64Path.lineWidth = 1;
        [oval64Path stroke];


        //// Oval 65 Drawing
        UIBezierPath* oval65Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(65, 79, 30, 26)];
        [color17 setFill];
        [oval65Path fill];

        ////// Oval 65 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval65Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval65Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval65Path.lineWidth = 1;
        [oval65Path stroke];


        //// Oval 66 Drawing
        UIBezierPath* oval66Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(53, 87, 32, 25)];
        [color17 setFill];
        [oval66Path fill];

        ////// Oval 66 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval66Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval66Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval66Path.lineWidth = 1;
        [oval66Path stroke];


        //// Oval 54 Drawing
        UIBezierPath* oval54Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-4, 90, 28, 24)];
        [color17 setFill];
        [oval54Path fill];

        ////// Oval 54 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval54Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval54Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval54Path.lineWidth = 1;
        [oval54Path stroke];


        //// Oval 63 Drawing
        UIBezierPath* oval63Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(18, 95, 25, 21)];
        [color17 setFill];
        [oval63Path fill];

        ////// Oval 63 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval63Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval63Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval63Path.lineWidth = 1;
        [oval63Path stroke];


        //// Oval 67 Drawing
        UIBezierPath* oval67Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(35, 89, 30, 26)];
        [color17 setFill];
        [oval67Path fill];

        ////// Oval 67 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval67Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval67Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval67Path.lineWidth = 1;
        [oval67Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas60
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color17 = [UIColor colorWithRed: 0.333 green: 0.333 blue: 0.333 alpha: 0.86];
    UIColor* stromCloudOutline = [UIColor colorWithRed: 0.156 green: 0.155 blue: 0.155 alpha: 0.74];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 22 Drawing
        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(256, 152.5, 34, 20)];
        [color17 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];


        //// Oval 23 Drawing
        UIBezierPath* oval23Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(238, 160.5, 28, 17)];
        [color17 setFill];
        [oval23Path fill];

        ////// Oval 23 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval23Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval23Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval23Path.lineWidth = 1;
        [oval23Path stroke];


        //// Oval 24 Drawing
        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(256, 152.5, 34, 20)];
        [color17 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];


        //// Oval 29 Drawing
        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(260, 164.5, 25, 14)];
        [color17 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];


        //// Oval 30 Drawing
        UIBezierPath* oval30Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(277, 164.5, 30, 19)];
        [color17 setFill];
        [oval30Path fill];

        ////// Oval 30 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval30Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval30Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval30Path.lineWidth = 1;
        [oval30Path stroke];


        //// Oval 132 Drawing
        UIBezierPath* oval132Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(266, 162, 30, 19)];
        [color17 setFill];
        [oval132Path fill];

        ////// Oval 132 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval132Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval132Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval132Path.lineWidth = 1;
        [oval132Path stroke];


        //// Oval 133 Drawing
        UIBezierPath* oval133Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(206, 162, 34, 20)];
        [color17 setFill];
        [oval133Path fill];

        ////// Oval 133 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval133Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval133Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval133Path.lineWidth = 1;
        [oval133Path stroke];


        //// Oval 134 Drawing
        UIBezierPath* oval134Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(188, 170, 28, 17)];
        [color17 setFill];
        [oval134Path fill];

        ////// Oval 134 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval134Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval134Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval134Path.lineWidth = 1;
        [oval134Path stroke];


        //// Oval 135 Drawing
        UIBezierPath* oval135Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(206, 162, 34, 20)];
        [color17 setFill];
        [oval135Path fill];

        ////// Oval 135 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval135Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval135Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval135Path.lineWidth = 1;
        [oval135Path stroke];


        //// Oval 136 Drawing
        UIBezierPath* oval136Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(231, 162, 35, 20)];
        [color17 setFill];
        [oval136Path fill];

        ////// Oval 136 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval136Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval136Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval136Path.lineWidth = 1;
        [oval136Path stroke];


        //// Oval 137 Drawing
        UIBezierPath* oval137Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(275.5, 167.5, 36, 22)];
        [color17 setFill];
        [oval137Path fill];

        ////// Oval 137 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval137Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval137Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval137Path.lineWidth = 1;
        [oval137Path stroke];


        //// Oval 138 Drawing
        UIBezierPath* oval138Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(257, 170, 36, 21)];
        [color17 setFill];
        [oval138Path fill];

        ////// Oval 138 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval138Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval138Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval138Path.lineWidth = 1;
        [oval138Path stroke];


        //// Oval 139 Drawing
        UIBezierPath* oval139Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(249.5, 170.5, 28, 17)];
        [color17 setFill];
        [oval139Path fill];

        ////// Oval 139 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval139Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval139Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval139Path.lineWidth = 1;
        [oval139Path stroke];


        //// Oval 140 Drawing
        UIBezierPath* oval140Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(210, 174, 25, 14)];
        [color17 setFill];
        [oval140Path fill];

        ////// Oval 140 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval140Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval140Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval140Path.lineWidth = 1;
        [oval140Path stroke];


        //// Oval 141 Drawing
        UIBezierPath* oval141Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(227, 174, 30, 19)];
        [color17 setFill];
        [oval141Path fill];

        ////// Oval 141 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval141Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval141Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval141Path.lineWidth = 1;
        [oval141Path stroke];


        //// Oval 21 Drawing
        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(302, 155.5, 30, 19)];
        [color17 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];


        //// Oval 25 Drawing
        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(267, 155.5, 35, 20)];
        [color17 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];


        //// Oval 26 Drawing
        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(311.5, 161, 36, 22)];
        [color17 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];


        //// Oval 27 Drawing
        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(293, 163.5, 36, 21)];
        [color17 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];


        //// Oval 28 Drawing
        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(285.5, 164, 28, 17)];
        [color17 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];


        //// Oval 128 Drawing
        UIBezierPath* oval128Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(343.5, 163.5, 26, 18)];
        [color17 setFill];
        [oval128Path fill];

        ////// Oval 128 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval128Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval128Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval128Path.lineWidth = 1;
        [oval128Path stroke];


        //// Oval 129 Drawing
        UIBezierPath* oval129Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(300.5, 171, 27, 19)];
        [color17 setFill];
        [oval129Path fill];

        ////// Oval 129 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval129Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval129Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval129Path.lineWidth = 1;
        [oval129Path stroke];


        //// Oval 130 Drawing
        UIBezierPath* oval130Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(335.5, 168, 30, 22)];
        [color17 setFill];
        [oval130Path fill];

        ////// Oval 130 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval130Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval130Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval130Path.lineWidth = 1;
        [oval130Path stroke];


        //// Oval 131 Drawing
        UIBezierPath* oval131Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(322, 169.5, 25.5, 20)];
        [color17 setFill];
        [oval131Path fill];

        ////// Oval 131 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval131Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval131Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval131Path.lineWidth = 1;
        [oval131Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 5
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 31 Drawing
        UIBezierPath* oval31Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(216.5, 144.5, 30, 24)];
        [color3 setFill];
        [oval31Path fill];

        ////// Oval 31 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval31Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval31Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval31Path.lineWidth = 1;
        [oval31Path stroke];


        //// Oval 32 Drawing
        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(272.5, 144.5, 34, 26)];
        [color3 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];


        //// Oval 33 Drawing
        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(296.5, 154.5, 28, 21)];
        [color3 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];


        //// Oval 34 Drawing
        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(272.5, 144.5, 34, 26)];
        [color3 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];


        //// Oval 35 Drawing
        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(246.5, 144.5, 35, 26)];
        [color3 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];


        //// Oval 36 Drawing
        UIBezierPath* oval36Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(201, 152, 36, 27)];
        [color3 setFill];
        [oval36Path fill];

        ////// Oval 36 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval36Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval36Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval36Path.lineWidth = 1;
        [oval36Path stroke];


        //// Oval 37 Drawing
        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(219.5, 154.5, 36, 26)];
        [color3 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];


        //// Oval 38 Drawing
        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(235, 155, 28, 21)];
        [color3 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];


        //// Oval 39 Drawing
        UIBezierPath* oval39Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(277.5, 158.5, 25, 20)];
        [color3 setFill];
        [oval39Path fill];

        ////// Oval 39 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval39Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval39Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval39Path.lineWidth = 1;
        [oval39Path stroke];


        //// Oval 40 Drawing
        UIBezierPath* oval40Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(255.5, 159.5, 30, 24)];
        [color3 setFill];
        [oval40Path fill];

        ////// Oval 40 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval40Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval40Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval40Path.lineWidth = 1;
        [oval40Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 90 Drawing
        UIBezierPath* oval90Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(345, 115.5, 25, 17)];
        [color17 setFill];
        [oval90Path fill];

        ////// Oval 90 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval90Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval90Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval90Path.lineWidth = 1;
        [oval90Path stroke];


        //// Oval 100 Drawing
        UIBezierPath* oval100Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(378, 118.5, 30, 19)];
        [color17 setFill];
        [oval100Path fill];

        ////// Oval 100 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval100Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval100Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval100Path.lineWidth = 1;
        [oval100Path stroke];


        //// Oval 102 Drawing
        UIBezierPath* oval102Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(356.5, 116.5, 30, 19)];
        [color17 setFill];
        [oval102Path fill];

        ////// Oval 102 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval102Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval102Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval102Path.lineWidth = 1;
        [oval102Path stroke];


        //// Oval 155 Drawing
        UIBezierPath* oval155Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(378, 109, 33, 20)];
        [color17 setFill];
        [oval155Path fill];

        ////// Oval 155 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval155Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval155Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval155Path.lineWidth = 1;
        [oval155Path stroke];


        //// Oval 156 Drawing
        UIBezierPath* oval156Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(313, 100.5, 34, 18)];
        [color17 setFill];
        [oval156Path fill];

        ////// Oval 156 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval156Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval156Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval156Path.lineWidth = 1;
        [oval156Path stroke];


        //// Oval 157 Drawing
        UIBezierPath* oval157Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(250.5, 100.5, 39, 21)];
        [color17 setFill];
        [oval157Path fill];

        ////// Oval 157 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval157Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval157Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval157Path.lineWidth = 1;
        [oval157Path stroke];


        //// Oval 158 Drawing
        UIBezierPath* oval158Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(272, 94, 39, 22)];
        [color17 setFill];
        [oval158Path fill];

        ////// Oval 158 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval158Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval158Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval158Path.lineWidth = 1;
        [oval158Path stroke];


        //// Oval 159 Drawing
        UIBezierPath* oval159Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(289.5, 98.5, 33, 18)];
        [color17 setFill];
        [oval159Path fill];

        ////// Oval 159 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval159Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval159Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval159Path.lineWidth = 1;
        [oval159Path stroke];


        //// Oval 160 Drawing
        UIBezierPath* oval160Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(313, 92, 36, 20)];
        [color17 setFill];
        [oval160Path fill];

        ////// Oval 160 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval160Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval160Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval160Path.lineWidth = 1;
        [oval160Path stroke];


        //// Oval 161 Drawing
        UIBezierPath* oval161Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(334, 114, 30, 20)];
        [color17 setFill];
        [oval161Path fill];

        ////// Oval 161 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval161Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval161Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval161Path.lineWidth = 1;
        [oval161Path stroke];


        //// Oval 162 Drawing
        UIBezierPath* oval162Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(275.5, 106.5, 36, 23)];
        [color17 setFill];
        [oval162Path fill];

        ////// Oval 162 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval162Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval162Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval162Path.lineWidth = 1;
        [oval162Path stroke];


        //// Oval 163 Drawing
        UIBezierPath* oval163Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(295, 106.5, 37, 24)];
        [color17 setFill];
        [oval163Path fill];

        ////// Oval 163 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval163Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval163Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval163Path.lineWidth = 1;
        [oval163Path stroke];


        //// Oval 164 Drawing
        UIBezierPath* oval164Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(311.5, 112, 31, 20)];
        [color17 setFill];
        [oval164Path fill];

        ////// Oval 164 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval164Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval164Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval164Path.lineWidth = 1;
        [oval164Path stroke];


        //// Oval 165 Drawing
        UIBezierPath* oval165Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(334, 104.5, 34, 22)];
        [color17 setFill];
        [oval165Path fill];

        ////// Oval 165 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval165Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval165Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval165Path.lineWidth = 1;
        [oval165Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(357.5, 99.5, 34, 22)];
        [color17 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 166 Drawing
        UIBezierPath* oval166Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(349, 94.5, 34, 22)];
        [color17 setFill];
        [oval166Path fill];

        ////// Oval 166 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval166Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval166Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval166Path.lineWidth = 1;
        [oval166Path stroke];


        //// Oval 167 Drawing
        UIBezierPath* oval167Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(376.5, 90, 34, 22)];
        [color17 setFill];
        [oval167Path fill];

        ////// Oval 167 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval167Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval167Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval167Path.lineWidth = 1;
        [oval167Path stroke];


        //// Oval 168 Drawing
        UIBezierPath* oval168Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(303.5, 83, 29.5, 26)];
        [color17 setFill];
        [oval168Path fill];

        ////// Oval 168 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval168Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval168Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval168Path.lineWidth = 1;
        [oval168Path stroke];


        //// Oval 169 Drawing
        UIBezierPath* oval169Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(250, 92, 32, 22)];
        [color17 setFill];
        [oval169Path fill];

        ////// Oval 169 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval169Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval169Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval169Path.lineWidth = 1;
        [oval169Path stroke];


        //// Oval 170 Drawing
        UIBezierPath* oval170Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(266, 83, 38, 28)];
        [color17 setFill];
        [oval170Path fill];

        ////// Oval 170 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval170Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval170Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval170Path.lineWidth = 1;
        [oval170Path stroke];


        //// Oval 171 Drawing
        UIBezierPath* oval171Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(281.5, 87.5, 36, 26)];
        [color17 setFill];
        [oval171Path fill];

        ////// Oval 171 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval171Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval171Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval171Path.lineWidth = 1;
        [oval171Path stroke];


        //// Oval 172 Drawing
        UIBezierPath* oval172Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(332.5, 88, 36, 28)];
        [color17 setFill];
        [oval172Path fill];

        ////// Oval 172 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval172Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval172Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval172Path.lineWidth = 1;
        [oval172Path stroke];


        //// Oval 173 Drawing
        UIBezierPath* oval173Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(309, 90, 36, 28)];
        [color17 setFill];
        [oval173Path fill];

        ////// Oval 173 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval173Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval173Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval173Path.lineWidth = 1;
        [oval173Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 174 Drawing
        UIBezierPath* oval174Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(359, 63.5, 29.5, 26)];
        [color3 setFill];
        [oval174Path fill];

        ////// Oval 174 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval174Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval174Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval174Path.lineWidth = 1;
        [oval174Path stroke];


        //// Oval 175 Drawing
        UIBezierPath* oval175Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(344, 63.5, 29.5, 26)];
        [color3 setFill];
        [oval175Path fill];

        ////// Oval 175 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval175Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval175Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval175Path.lineWidth = 1;
        [oval175Path stroke];


        //// Oval 176 Drawing
        UIBezierPath* oval176Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(296.5, 72.5, 32, 22)];
        [color3 setFill];
        [oval176Path fill];

        ////// Oval 176 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval176Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval176Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval176Path.lineWidth = 1;
        [oval176Path stroke];


        //// Oval 177 Drawing
        UIBezierPath* oval177Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(312.5, 63.5, 38, 28)];
        [color3 setFill];
        [oval177Path fill];

        ////// Oval 177 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval177Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval177Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval177Path.lineWidth = 1;
        [oval177Path stroke];


        //// Oval 178 Drawing
        UIBezierPath* oval178Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(328, 68, 36, 26)];
        [color3 setFill];
        [oval178Path fill];

        ////// Oval 178 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval178Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval178Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval178Path.lineWidth = 1;
        [oval178Path stroke];


        //// Oval 179 Drawing
        UIBezierPath* oval179Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(376, 72.5, 36, 24)];
        [color3 setFill];
        [oval179Path fill];

        ////// Oval 179 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval179Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval179Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval179Path.lineWidth = 1;
        [oval179Path stroke];


        //// Oval 180 Drawing
        UIBezierPath* oval180Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(355.5, 74.5, 36, 24)];
        [color3 setFill];
        [oval180Path fill];

        ////// Oval 180 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval180Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval180Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval180Path.lineWidth = 1;
        [oval180Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 143 Drawing
        UIBezierPath* oval143Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(242.5, 50.5, 27, 22)];
        [color3 setFill];
        [oval143Path fill];

        ////// Oval 143 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval143Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval143Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval143Path.lineWidth = 1;
        [oval143Path stroke];


        //// Oval 149 Drawing
        UIBezierPath* oval149Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(176.5, 46.5, 29, 24)];
        [color3 setFill];
        [oval149Path fill];

        ////// Oval 149 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval149Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval149Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval149Path.lineWidth = 1;
        [oval149Path stroke];


        //// Oval 144 Drawing
        UIBezierPath* oval144Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(199.5, 43.5, 33, 23)];
        [color3 setFill];
        [oval144Path fill];

        ////// Oval 144 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval144Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval144Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval144Path.lineWidth = 1;
        [oval144Path stroke];


        //// Oval 148 Drawing
        UIBezierPath* oval148Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(225.5, 47.5, 24, 17)];
        [color3 setFill];
        [oval148Path fill];

        ////// Oval 148 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval148Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval148Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval148Path.lineWidth = 1;
        [oval148Path stroke];


        //// Oval 142 Drawing
        UIBezierPath* oval142Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(221.5, 54.5, 33, 25)];
        [color3 setFill];
        [oval142Path fill];

        ////// Oval 142 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval142Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval142Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval142Path.lineWidth = 1;
        [oval142Path stroke];


        //// Oval 145 Drawing
        UIBezierPath* oval145Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(164.5, 52.5, 31, 23)];
        [color3 setFill];
        [oval145Path fill];

        ////// Oval 145 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval145Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval145Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval145Path.lineWidth = 1;
        [oval145Path stroke];


        //// Oval 147 Drawing
        UIBezierPath* oval147Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(242.5, 59.5, 24, 19)];
        [color3 setFill];
        [oval147Path fill];

        ////// Oval 147 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval147Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval147Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval147Path.lineWidth = 1;
        [oval147Path stroke];


        //// Oval 150 Drawing
        UIBezierPath* oval150Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(186.5, 50.5, 31, 23)];
        [color3 setFill];
        [oval150Path fill];

        ////// Oval 150 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval150Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval150Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval150Path.lineWidth = 1;
        [oval150Path stroke];


        //// Oval 152 Drawing
        UIBezierPath* oval152Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(205.5, 55.5, 30, 23)];
        [color3 setFill];
        [oval152Path fill];

        ////// Oval 152 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval152Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval152Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval152Path.lineWidth = 1;
        [oval152Path stroke];


        //// Oval 151 Drawing
        UIBezierPath* oval151Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(177.5, 61.5, 24, 17)];
        [color3 setFill];
        [oval151Path fill];

        ////// Oval 151 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval151Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval151Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval151Path.lineWidth = 1;
        [oval151Path stroke];


        //// Oval 146 Drawing
        UIBezierPath* oval146Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(192.5, 60.5, 26, 19)];
        [color3 setFill];
        [oval146Path fill];

        ////// Oval 146 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval146Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval146Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval146Path.lineWidth = 1;
        [oval146Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas61
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color17 = [UIColor colorWithRed: 0.333 green: 0.333 blue: 0.333 alpha: 0.86];
    UIColor* stromCloudOutline = [UIColor colorWithRed: 0.156 green: 0.155 blue: 0.155 alpha: 0.74];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 7
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(68, 68, 39, 27)];
        [color17 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 42 Drawing
        UIBezierPath* oval42Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-9.5, 67, 33, 28)];
        [color17 setFill];
        [oval42Path fill];

        ////// Oval 42 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval42Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval42Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval42Path.lineWidth = 1;
        [oval42Path stroke];


        //// Oval 127 Drawing
        UIBezierPath* oval127Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(1.5, 65, 45, 23)];
        [color17 setFill];
        [oval127Path fill];

        ////// Oval 127 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval127Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval127Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval127Path.lineWidth = 1;
        [oval127Path stroke];


        //// Oval 155 Drawing
        UIBezierPath* oval155Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(23, 65, 45, 30)];
        [color17 setFill];
        [oval155Path fill];

        ////// Oval 155 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval155Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval155Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval155Path.lineWidth = 1;
        [oval155Path stroke];


        //// Oval 156 Drawing
        UIBezierPath* oval156Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(80.5, 55.5, 47, 32)];
        [color17 setFill];
        [oval156Path fill];

        ////// Oval 156 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval156Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval156Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval156Path.lineWidth = 1;
        [oval156Path stroke];


        //// Oval 157 Drawing
        UIBezierPath* oval157Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(57, 53, 46, 32)];
        [color17 setFill];
        [oval157Path fill];

        ////// Oval 157 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval157Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval157Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval157Path.lineWidth = 1;
        [oval157Path stroke];


        //// Oval 158 Drawing
        UIBezierPath* oval158Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(46.5, 59.5, 37, 25)];
        [color17 setFill];
        [oval158Path fill];

        ////// Oval 158 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval158Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval158Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval158Path.lineWidth = 1;
        [oval158Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(191.5, 105, 30, 20)];
        [color17 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(113.5, 114, 28, 18)];
        [color17 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(131.5, 106, 34, 22)];
        [color17 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(156.5, 106, 35, 22)];
        [color17 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(201, 112.5, 36, 22)];
        [color17 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(182.5, 114, 36, 23)];
        [color17 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(175, 114.5, 28, 18)];
        [color17 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(152.5, 119, 30, 20)];
        [color17 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(108.5, 101, 35, 22)];
        [color17 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(40.5, 101, 39, 25)];
        [color17 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];


        //// Oval 13 Drawing
        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(19.5, 110, 32, 20)];
        [color17 setFill];
        [oval13Path fill];

        ////// Oval 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];


        //// Oval 14 Drawing
        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(40.5, 101, 39, 25)];
        [color17 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];


        //// Oval 15 Drawing
        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(68.5, 101, 40, 25)];
        [color17 setFill];
        [oval15Path fill];

        ////// Oval 15 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval15Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval15Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];


        //// Oval 16 Drawing
        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(120, 108.5, 41, 24)];
        [color17 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(98.5, 110, 41, 26)];
        [color17 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];


        //// Oval 19 Drawing
        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(44.5, 114, 29, 18)];
        [color17 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];


        //// Oval 20 Drawing
        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(64.5, 116, 34, 22)];
        [color17 setFill];
        [oval20Path fill];

        ////// Oval 20 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval20Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval20Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 5
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 41 Drawing
        UIBezierPath* oval41Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(22.5, 73.5, 34, 19)];
        [color17 setFill];
        [oval41Path fill];

        ////// Oval 41 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval41Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval41Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval41Path.lineWidth = 1;
        [oval41Path stroke];


        //// Oval 118 Drawing
        UIBezierPath* oval118Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(78, 82.5, 39, 27)];
        [color17 setFill];
        [oval118Path fill];

        ////// Oval 118 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval118Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval118Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval118Path.lineWidth = 1;
        [oval118Path stroke];


        //// Oval 119 Drawing
        UIBezierPath* oval119Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0.5, 82.5, 33, 28)];
        [color17 setFill];
        [oval119Path fill];

        ////// Oval 119 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval119Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval119Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval119Path.lineWidth = 1;
        [oval119Path stroke];


        //// Oval 120 Drawing
        UIBezierPath* oval120Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-13.5, 92.5, 36, 25)];
        [color17 setFill];
        [oval120Path fill];

        ////// Oval 120 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval120Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval120Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval120Path.lineWidth = 1;
        [oval120Path stroke];


        //// Oval 121 Drawing
        UIBezierPath* oval121Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(11.5, 89.5, 45, 23)];
        [color17 setFill];
        [oval121Path fill];

        ////// Oval 121 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval121Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval121Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval121Path.lineWidth = 1;
        [oval121Path stroke];


        //// Oval 122 Drawing
        UIBezierPath* oval122Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(33, 82.5, 45, 30)];
        [color17 setFill];
        [oval122Path fill];

        ////// Oval 122 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval122Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval122Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval122Path.lineWidth = 1;
        [oval122Path stroke];


        //// Oval 123 Drawing
        UIBezierPath* oval123Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(90.5, 90, 47, 32)];
        [color17 setFill];
        [oval123Path fill];

        ////// Oval 123 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval123Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval123Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval123Path.lineWidth = 1;
        [oval123Path stroke];


        //// Oval 124 Drawing
        UIBezierPath* oval124Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(67, 92.5, 46, 32)];
        [color17 setFill];
        [oval124Path fill];

        ////// Oval 124 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval124Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval124Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval124Path.lineWidth = 1;
        [oval124Path stroke];


        //// Oval 125 Drawing
        UIBezierPath* oval125Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(56.5, 93, 37, 25)];
        [color17 setFill];
        [oval125Path fill];

        ////// Oval 125 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval125Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval125Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval125Path.lineWidth = 1;
        [oval125Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 108 Drawing
        UIBezierPath* oval108Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(62.5, 155.5, 32, 29)];
        [color17 setFill];
        [oval108Path fill];

        ////// Oval 108 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval108Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval108Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval108Path.lineWidth = 1;
        [oval108Path stroke];


        //// Oval 109 Drawing
        UIBezierPath* oval109Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(122.5, 155.5, 37, 31)];
        [color17 setFill];
        [oval109Path fill];

        ////// Oval 109 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval109Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval109Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval109Path.lineWidth = 1;
        [oval109Path stroke];


        //// Oval 110 Drawing
        UIBezierPath* oval110Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(148.5, 167.5, 31, 25)];
        [color17 setFill];
        [oval110Path fill];

        ////// Oval 110 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval110Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval110Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval110Path.lineWidth = 1;
        [oval110Path stroke];


        //// Oval 111 Drawing
        UIBezierPath* oval111Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(122.5, 155.5, 37, 31)];
        [color17 setFill];
        [oval111Path fill];

        ////// Oval 111 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval111Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval111Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval111Path.lineWidth = 1;
        [oval111Path stroke];


        //// Oval 112 Drawing
        UIBezierPath* oval112Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(94.5, 155.5, 39, 31)];
        [color17 setFill];
        [oval112Path fill];

        ////// Oval 112 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval112Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval112Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval112Path.lineWidth = 1;
        [oval112Path stroke];


        //// Oval 113 Drawing
        UIBezierPath* oval113Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(45, 165, 39, 32)];
        [color17 setFill];
        [oval113Path fill];

        ////// Oval 113 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval113Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval113Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval113Path.lineWidth = 1;
        [oval113Path stroke];


        //// Oval 114 Drawing
        UIBezierPath* oval114Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(65.5, 167.5, 39, 31)];
        [color17 setFill];
        [oval114Path fill];

        ////// Oval 114 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval114Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval114Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval114Path.lineWidth = 1;
        [oval114Path stroke];


        //// Oval 116 Drawing
        UIBezierPath* oval116Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(127.5, 172.5, 28, 24)];
        [color17 setFill];
        [oval116Path fill];

        ////// Oval 116 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval116Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval116Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval116Path.lineWidth = 1;
        [oval116Path stroke];


        //// Oval 117 Drawing
        UIBezierPath* oval117Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(104.5, 173.5, 33, 29)];
        [color17 setFill];
        [oval117Path fill];

        ////// Oval 117 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval117Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval117Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval117Path.lineWidth = 1;
        [oval117Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 53 Drawing
        UIBezierPath* oval53Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(90.5, 77.5, 38, 28)];
        [color17 setFill];
        [oval53Path fill];

        ////// Oval 53 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval53Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval53Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval53Path.lineWidth = 1;
        [oval53Path stroke];


        //// Oval 54 Drawing
        UIBezierPath* oval54Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(75, 88, 32, 24)];
        [color17 setFill];
        [oval54Path fill];

        ////// Oval 54 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval54Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval54Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval54Path.lineWidth = 1;
        [oval54Path stroke];


        //// Oval 56 Drawing
        UIBezierPath* oval56Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(119, 73, 39, 28)];
        [color17 setFill];
        [oval56Path fill];

        ////// Oval 56 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval56Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval56Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval56Path.lineWidth = 1;
        [oval56Path stroke];


        //// Oval 57 Drawing
        UIBezierPath* oval57Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(164, 87, 36, 26)];
        [color17 setFill];
        [oval57Path fill];

        ////// Oval 57 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval57Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval57Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval57Path.lineWidth = 1;
        [oval57Path stroke];


        //// Oval 63 Drawing
        UIBezierPath* oval63Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(100, 96, 28, 21)];
        [color17 setFill];
        [oval63Path fill];

        ////// Oval 63 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval63Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval63Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval63Path.lineWidth = 1;
        [oval63Path stroke];


        //// Oval 65 Drawing
        UIBezierPath* oval65Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(153, 80, 33, 26)];
        [color17 setFill];
        [oval65Path fill];

        ////// Oval 65 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval65Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval65Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval65Path.lineWidth = 1;
        [oval65Path stroke];


        //// Oval 66 Drawing
        UIBezierPath* oval66Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(139, 88, 36, 25)];
        [color17 setFill];
        [oval66Path fill];

        ////// Oval 66 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval66Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval66Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval66Path.lineWidth = 1;
        [oval66Path stroke];


        //// Oval 67 Drawing
        UIBezierPath* oval67Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(119, 90, 34, 26)];
        [color17 setFill];
        [oval67Path fill];

        ////// Oval 67 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval67Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval67Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval67Path.lineWidth = 1;
        [oval67Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 43 Drawing
        UIBezierPath* oval43Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(3.5, 158, 32, 26)];
        [color17 setFill];
        [oval43Path fill];

        ////// Oval 43 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval43Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval43Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval43Path.lineWidth = 1;
        [oval43Path stroke];


        //// Oval 44 Drawing
        UIBezierPath* oval44Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(64.5, 158, 37, 28)];
        [color17 setFill];
        [oval44Path fill];

        ////// Oval 44 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval44Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval44Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval44Path.lineWidth = 1;
        [oval44Path stroke];


        //// Oval 45 Drawing
        UIBezierPath* oval45Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(90.5, 169, 31, 22)];
        [color17 setFill];
        [oval45Path fill];

        ////// Oval 45 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval45Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval45Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval45Path.lineWidth = 1;
        [oval45Path stroke];


        //// Oval 46 Drawing
        UIBezierPath* oval46Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(64.5, 158, 37, 28)];
        [color17 setFill];
        [oval46Path fill];

        ////// Oval 46 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval46Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval46Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval46Path.lineWidth = 1;
        [oval46Path stroke];


        //// Oval 47 Drawing
        UIBezierPath* oval47Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(35.5, 158, 39, 28)];
        [color17 setFill];
        [oval47Path fill];

        ////// Oval 47 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval47Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval47Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval47Path.lineWidth = 1;
        [oval47Path stroke];


        //// Oval 48 Drawing
        UIBezierPath* oval48Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-14, 166.5, 39, 29)];
        [color17 setFill];
        [oval48Path fill];

        ////// Oval 48 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval48Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval48Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval48Path.lineWidth = 1;
        [oval48Path stroke];


        //// Oval 50 Drawing
        UIBezierPath* oval50Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(23, 169.5, 31, 22)];
        [color17 setFill];
        [oval50Path fill];

        ////// Oval 50 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval50Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval50Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval50Path.lineWidth = 1;
        [oval50Path stroke];


        //// Oval 51 Drawing
        UIBezierPath* oval51Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(69.5, 173, 28, 22)];
        [color17 setFill];
        [oval51Path fill];

        ////// Oval 51 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval51Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval51Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval51Path.lineWidth = 1;
        [oval51Path stroke];


        //// Oval 52 Drawing
        UIBezierPath* oval52Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(46.5, 174, 32, 26)];
        [color17 setFill];
        [oval52Path fill];

        ////// Oval 52 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval52Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval52Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval52Path.lineWidth = 1;
        [oval52Path stroke];


        //// Oval 49 Drawing
        UIBezierPath* oval49Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(6.5, 169, 40, 28)];
        [color17 setFill];
        [oval49Path fill];

        ////// Oval 49 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval49Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval49Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval49Path.lineWidth = 1;
        [oval49Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 75 Drawing
        UIBezierPath* oval75Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(117.5, 144.5, 26, 21)];
        [color17 setFill];
        [oval75Path fill];

        ////// Oval 75 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval75Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval75Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval75Path.lineWidth = 1;
        [oval75Path stroke];


        //// Oval 55 Drawing
        UIBezierPath* oval55Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(97.5, 141, 34, 29)];
        [color17 setFill];
        [oval55Path fill];

        ////// Oval 55 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval55Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval55Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval55Path.lineWidth = 1;
        [oval55Path stroke];


        //// Oval 58 Drawing
        UIBezierPath* oval58Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(20.5, 146.5, 41, 34)];
        [color17 setFill];
        [oval58Path fill];

        ////// Oval 58 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval58Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval58Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval58Path.lineWidth = 1;
        [oval58Path stroke];


        //// Oval 59 Drawing
        UIBezierPath* oval59Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(37.5, 138.5, 43, 35)];
        [color17 setFill];
        [oval59Path fill];

        ////// Oval 59 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval59Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval59Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval59Path.lineWidth = 1;
        [oval59Path stroke];


        //// Oval 60 Drawing
        UIBezierPath* oval60Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(69.5, 138.5, 34, 29)];
        [color17 setFill];
        [oval60Path fill];

        ////// Oval 60 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval60Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval60Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval60Path.lineWidth = 1;
        [oval60Path stroke];


        //// Oval 61 Drawing
        UIBezierPath* oval61Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(80.5, 147, 30, 28)];
        [color17 setFill];
        [oval61Path fill];

        ////// Oval 61 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval61Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval61Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval61Path.lineWidth = 1;
        [oval61Path stroke];


        //// Oval 62 Drawing
        UIBezierPath* oval62Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(54.5, 149, 36, 32)];
        [color17 setFill];
        [oval62Path fill];

        ////// Oval 62 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval62Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval62Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval62Path.lineWidth = 1;
        [oval62Path stroke];


        //// Oval 74 Drawing
        UIBezierPath* oval74Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(80.5, 147, 30, 28)];
        [color17 setFill];
        [oval74Path fill];

        ////// Oval 74 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval74Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval74Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval74Path.lineWidth = 1;
        [oval74Path stroke];


        //// Oval 76 Drawing
        UIBezierPath* oval76Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(105.5, 154.5, 26, 21)];
        [color17 setFill];
        [oval76Path fill];

        ////// Oval 76 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval76Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval76Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval76Path.lineWidth = 1;
        [oval76Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas62
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color17 = [UIColor colorWithRed: 0.333 green: 0.333 blue: 0.333 alpha: 0.86];
    UIColor* stromCloudOutline = [UIColor colorWithRed: 0.156 green: 0.155 blue: 0.155 alpha: 0.74];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 7
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 90 Drawing
        UIBezierPath* oval90Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(328, 101, 26, 15)];
        [color17 setFill];
        [oval90Path fill];

        ////// Oval 90 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval90Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval90Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval90Path.lineWidth = 1;
        [oval90Path stroke];


        //// Oval 96 Drawing
        UIBezierPath* oval96Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(344, 111.5, 25, 17)];
        [color17 setFill];
        [oval96Path fill];

        ////// Oval 96 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval96Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval96Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval96Path.lineWidth = 1;
        [oval96Path stroke];


        //// Oval 100 Drawing
        UIBezierPath* oval100Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(339, 107, 36, 23)];
        [color17 setFill];
        [oval100Path fill];

        ////// Oval 100 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval100Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval100Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval100Path.lineWidth = 1;
        [oval100Path stroke];


        //// Oval 98 Drawing
        UIBezierPath* oval98Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(377, 114.5, 30, 19)];
        [color17 setFill];
        [oval98Path fill];

        ////// Oval 98 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval98Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval98Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval98Path.lineWidth = 1;
        [oval98Path stroke];


        //// Oval 101 Drawing
        UIBezierPath* oval101Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(355.5, 112.5, 30, 19)];
        [color17 setFill];
        [oval101Path fill];

        ////// Oval 101 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval101Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval101Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval101Path.lineWidth = 1;
        [oval101Path stroke];


        //// Oval 102 Drawing
        UIBezierPath* oval102Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(402, 109, 27, 19)];
        [color17 setFill];
        [oval102Path fill];

        ////// Oval 102 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval102Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval102Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval102Path.lineWidth = 1;
        [oval102Path stroke];


        //// Oval 103 Drawing
        UIBezierPath* oval103Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(377, 105, 33, 20)];
        [color17 setFill];
        [oval103Path fill];

        ////// Oval 103 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval103Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval103Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval103Path.lineWidth = 1;
        [oval103Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 22 Drawing
        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(255, 152.5, 34, 23)];
        [color17 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];


        //// Oval 23 Drawing
        UIBezierPath* oval23Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(236, 161.5, 29, 20)];
        [color17 setFill];
        [oval23Path fill];

        ////// Oval 23 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval23Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval23Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval23Path.lineWidth = 1;
        [oval23Path stroke];


        //// Oval 24 Drawing
        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(255, 152.5, 34, 23)];
        [color17 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];


        //// Oval 29 Drawing
        UIBezierPath* oval29Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(259, 166.5, 25, 16)];
        [color17 setFill];
        [oval29Path fill];

        ////// Oval 29 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval29Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval29Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval29Path.lineWidth = 1;
        [oval29Path stroke];


        //// Oval 30 Drawing
        UIBezierPath* oval30Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(276, 166.5, 31, 22)];
        [color17 setFill];
        [oval30Path fill];

        ////// Oval 30 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval30Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval30Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval30Path.lineWidth = 1;
        [oval30Path stroke];


        //// Oval 132 Drawing
        UIBezierPath* oval132Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(265, 164, 31, 22)];
        [color17 setFill];
        [oval132Path fill];

        ////// Oval 132 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval132Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval132Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval132Path.lineWidth = 1;
        [oval132Path stroke];


        //// Oval 133 Drawing
        UIBezierPath* oval133Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(203, 164, 35, 23)];
        [color17 setFill];
        [oval133Path fill];

        ////// Oval 133 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval133Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval133Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval133Path.lineWidth = 1;
        [oval133Path stroke];


        //// Oval 134 Drawing
        UIBezierPath* oval134Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(185, 173, 29, 20)];
        [color17 setFill];
        [oval134Path fill];

        ////// Oval 134 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval134Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval134Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval134Path.lineWidth = 1;
        [oval134Path stroke];


        //// Oval 135 Drawing
        UIBezierPath* oval135Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(203, 164, 35, 23)];
        [color17 setFill];
        [oval135Path fill];

        ////// Oval 135 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval135Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval135Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval135Path.lineWidth = 1;
        [oval135Path stroke];


        //// Oval 136 Drawing
        UIBezierPath* oval136Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(229, 164, 36, 23)];
        [color17 setFill];
        [oval136Path fill];

        ////// Oval 136 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval136Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval136Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval136Path.lineWidth = 1;
        [oval136Path stroke];


        //// Oval 137 Drawing
        UIBezierPath* oval137Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(274.5, 170.5, 37, 25)];
        [color17 setFill];
        [oval137Path fill];

        ////// Oval 137 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval137Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval137Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval137Path.lineWidth = 1;
        [oval137Path stroke];


        //// Oval 138 Drawing
        UIBezierPath* oval138Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(256, 173, 37, 25)];
        [color17 setFill];
        [oval138Path fill];

        ////// Oval 138 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval138Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval138Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval138Path.lineWidth = 1;
        [oval138Path stroke];


        //// Oval 139 Drawing
        UIBezierPath* oval139Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(247.5, 173.5, 29, 20)];
        [color17 setFill];
        [oval139Path fill];

        ////// Oval 139 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval139Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval139Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval139Path.lineWidth = 1;
        [oval139Path stroke];


        //// Oval 140 Drawing
        UIBezierPath* oval140Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(208, 178, 25, 16)];
        [color17 setFill];
        [oval140Path fill];

        ////// Oval 140 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval140Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval140Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval140Path.lineWidth = 1;
        [oval140Path stroke];


        //// Oval 141 Drawing
        UIBezierPath* oval141Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(225, 178, 31, 22)];
        [color17 setFill];
        [oval141Path fill];

        ////// Oval 141 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval141Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval141Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval141Path.lineWidth = 1;
        [oval141Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 5
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 86 Drawing
        UIBezierPath* oval86Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(292, 99.5, 34, 18)];
        [color17 setFill];
        [oval86Path fill];

        ////// Oval 86 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval86Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval86Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval86Path.lineWidth = 1;
        [oval86Path stroke];


        //// Oval 87 Drawing
        UIBezierPath* oval87Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(229.5, 99.5, 39, 21)];
        [color17 setFill];
        [oval87Path fill];

        ////// Oval 87 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval87Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval87Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval87Path.lineWidth = 1;
        [oval87Path stroke];


        //// Oval 88 Drawing
        UIBezierPath* oval88Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(251, 93, 39, 22)];
        [color17 setFill];
        [oval88Path fill];

        ////// Oval 88 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval88Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval88Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval88Path.lineWidth = 1;
        [oval88Path stroke];


        //// Oval 89 Drawing
        UIBezierPath* oval89Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(268.5, 97.5, 33, 18)];
        [color17 setFill];
        [oval89Path fill];

        ////// Oval 89 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval89Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval89Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval89Path.lineWidth = 1;
        [oval89Path stroke];


        //// Oval 92 Drawing
        UIBezierPath* oval92Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(313, 113, 30, 20)];
        [color17 setFill];
        [oval92Path fill];

        ////// Oval 92 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval92Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval92Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval92Path.lineWidth = 1;
        [oval92Path stroke];


        //// Oval 93 Drawing
        UIBezierPath* oval93Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(254.5, 105.5, 36, 23)];
        [color17 setFill];
        [oval93Path fill];

        ////// Oval 93 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval93Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval93Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval93Path.lineWidth = 1;
        [oval93Path stroke];


        //// Oval 94 Drawing
        UIBezierPath* oval94Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(274, 105.5, 37, 24)];
        [color17 setFill];
        [oval94Path fill];

        ////// Oval 94 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval94Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval94Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval94Path.lineWidth = 1;
        [oval94Path stroke];


        //// Oval 95 Drawing
        UIBezierPath* oval95Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(290.5, 111, 31, 20)];
        [color17 setFill];
        [oval95Path fill];

        ////// Oval 95 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval95Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval95Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval95Path.lineWidth = 1;
        [oval95Path stroke];


        //// Oval 99 Drawing
        UIBezierPath* oval99Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(311.5, 103, 40, 25)];
        [color17 setFill];
        [oval99Path fill];

        ////// Oval 99 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval99Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval99Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval99Path.lineWidth = 1;
        [oval99Path stroke];


        //// Oval 68 Drawing
        UIBezierPath* oval68Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(349.5, 79, 29.5, 26)];
        [color17 setFill];
        [oval68Path fill];

        ////// Oval 68 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval68Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval68Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval68Path.lineWidth = 1;
        [oval68Path stroke];


        //// Oval 69 Drawing
        UIBezierPath* oval69Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(296, 88, 32, 22)];
        [color17 setFill];
        [oval69Path fill];

        ////// Oval 69 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval69Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval69Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval69Path.lineWidth = 1;
        [oval69Path stroke];


        //// Oval 70 Drawing
        UIBezierPath* oval70Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(312, 79, 38, 28)];
        [color17 setFill];
        [oval70Path fill];

        ////// Oval 70 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval70Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval70Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval70Path.lineWidth = 1;
        [oval70Path stroke];


        //// Oval 71 Drawing
        UIBezierPath* oval71Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(327.5, 83.5, 36, 26)];
        [color17 setFill];
        [oval71Path fill];

        ////// Oval 71 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval71Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval71Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval71Path.lineWidth = 1;
        [oval71Path stroke];


        //// Oval 72 Drawing
        UIBezierPath* oval72Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(378.5, 84, 36, 28)];
        [color17 setFill];
        [oval72Path fill];

        ////// Oval 72 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval72Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval72Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval72Path.lineWidth = 1;
        [oval72Path stroke];


        //// Oval 73 Drawing
        UIBezierPath* oval73Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(355, 86, 36, 28)];
        [color17 setFill];
        [oval73Path fill];

        ////// Oval 73 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval73Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval73Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval73Path.lineWidth = 1;
        [oval73Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 143 Drawing
        UIBezierPath* oval143Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(321.5, 70.5, 31, 26)];
        [color17 setFill];
        [oval143Path fill];

        ////// Oval 143 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval143Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval143Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval143Path.lineWidth = 1;
        [oval143Path stroke];


        //// Oval 149 Drawing
        UIBezierPath* oval149Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(246.5, 59.5, 33, 29)];
        [color17 setFill];
        [oval149Path fill];

        ////// Oval 149 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval149Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval149Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval149Path.lineWidth = 1;
        [oval149Path stroke];


        //// Oval 144 Drawing
        UIBezierPath* oval144Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(271.5, 59.5, 40, 30)];
        [color17 setFill];
        [oval144Path fill];

        ////// Oval 144 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval144Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval144Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval144Path.lineWidth = 1;
        [oval144Path stroke];


        //// Oval 148 Drawing
        UIBezierPath* oval148Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(302.5, 62.5, 27, 22)];
        [color17 setFill];
        [oval148Path fill];

        ////// Oval 148 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval148Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval148Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval148Path.lineWidth = 1;
        [oval148Path stroke];


        //// Oval 142 Drawing
        UIBezierPath* oval142Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(297.5, 75.5, 38, 30)];
        [color17 setFill];
        [oval142Path fill];

        ////// Oval 142 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval142Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval142Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval142Path.lineWidth = 1;
        [oval142Path stroke];


        //// Oval 145 Drawing
        UIBezierPath* oval145Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(232.5, 72.5, 35, 28)];
        [color17 setFill];
        [oval145Path fill];

        ////// Oval 145 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval145Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval145Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval145Path.lineWidth = 1;
        [oval145Path stroke];


        //// Oval 147 Drawing
        UIBezierPath* oval147Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(321.5, 80.5, 28, 24)];
        [color17 setFill];
        [oval147Path fill];

        ////// Oval 147 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval147Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval147Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval147Path.lineWidth = 1;
        [oval147Path stroke];


        //// Oval 150 Drawing
        UIBezierPath* oval150Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(257.5, 70.5, 36, 28)];
        [color17 setFill];
        [oval150Path fill];

        ////// Oval 150 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval150Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval150Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval150Path.lineWidth = 1;
        [oval150Path stroke];


        //// Oval 152 Drawing
        UIBezierPath* oval152Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(279.5, 76.5, 34, 28)];
        [color17 setFill];
        [oval152Path fill];

        ////// Oval 152 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval152Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval152Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval152Path.lineWidth = 1;
        [oval152Path stroke];


        //// Oval 151 Drawing
        UIBezierPath* oval151Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(247.5, 84.5, 27, 20)];
        [color17 setFill];
        [oval151Path fill];

        ////// Oval 151 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval151Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval151Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval151Path.lineWidth = 1;
        [oval151Path stroke];


        //// Oval 146 Drawing
        UIBezierPath* oval146Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(264.5, 81.5, 30, 24)];
        [color17 setFill];
        [oval146Path fill];

        ////// Oval 146 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval146Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval146Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval146Path.lineWidth = 1;
        [oval146Path stroke];


        //// Oval 166 Drawing
        UIBezierPath* oval166Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(384.5, 70.5, 30, 25)];
        [color17 setFill];
        [oval166Path fill];

        ////// Oval 166 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval166Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval166Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval166Path.lineWidth = 1;
        [oval166Path stroke];


        //// Oval 159 Drawing
        UIBezierPath* oval159Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(296.5, 64.5, 37, 31)];
        [color17 setFill];
        [oval159Path fill];

        ////// Oval 159 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval159Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval159Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval159Path.lineWidth = 1;
        [oval159Path stroke];


        //// Oval 160 Drawing
        UIBezierPath* oval160Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(361.5, 59.5, 43, 30)];
        [color17 setFill];
        [oval160Path fill];

        ////// Oval 160 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval160Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval160Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval160Path.lineWidth = 1;
        [oval160Path stroke];


        //// Oval 161 Drawing
        UIBezierPath* oval161Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(283.5, 69.5, 27, 25)];
        [color17 setFill];
        [oval161Path fill];

        ////// Oval 161 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval161Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval161Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval161Path.lineWidth = 1;
        [oval161Path stroke];


        //// Oval 162 Drawing
        UIBezierPath* oval162Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(337.5, 58.5, 35, 29)];
        [color17 setFill];
        [oval162Path fill];

        ////// Oval 162 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval162Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval162Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval162Path.lineWidth = 1;
        [oval162Path stroke];


        //// Oval 163 Drawing
        UIBezierPath* oval163Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(317.5, 65.5, 33, 29)];
        [color17 setFill];
        [oval163Path fill];

        ////// Oval 163 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval163Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval163Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval163Path.lineWidth = 1;
        [oval163Path stroke];


        //// Oval 164 Drawing
        UIBezierPath* oval164Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(365.5, 73.5, 29, 24)];
        [color17 setFill];
        [oval164Path fill];

        ////// Oval 164 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval164Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval164Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval164Path.lineWidth = 1;
        [oval164Path stroke];


        //// Oval 165 Drawing
        UIBezierPath* oval165Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(343.5, 70.5, 29, 25)];
        [color17 setFill];
        [oval165Path fill];

        ////// Oval 165 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval165Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval165Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval165Path.lineWidth = 1;
        [oval165Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 21 Drawing
        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(323, 179.5, 33, 22)];
        [color17 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];


        //// Oval 25 Drawing
        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(285, 178.5, 38, 23)];
        [color17 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];


        //// Oval 26 Drawing
        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(356.5, 171, 39, 26)];
        [color17 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];


        //// Oval 27 Drawing
        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(313, 167.5, 39, 25)];
        [color17 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];


        //// Oval 28 Drawing
        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(305.5, 172, 30, 20)];
        [color17 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];


        //// Oval 128 Drawing
        UIBezierPath* oval128Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(386.5, 164.5, 28, 22)];
        [color17 setFill];
        [oval128Path fill];

        ////// Oval 128 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval128Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval128Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval128Path.lineWidth = 1;
        [oval128Path stroke];


        //// Oval 129 Drawing
        UIBezierPath* oval129Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(321.5, 161, 29, 22)];
        [color17 setFill];
        [oval129Path fill];

        ////// Oval 129 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval129Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval129Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval129Path.lineWidth = 1;
        [oval129Path stroke];


        //// Oval 130 Drawing
        UIBezierPath* oval130Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(360.5, 156, 37, 30)];
        [color17 setFill];
        [oval130Path fill];

        ////// Oval 130 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval130Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval130Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval130Path.lineWidth = 1;
        [oval130Path stroke];


        //// Oval 131 Drawing
        UIBezierPath* oval131Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(345, 155.5, 27.5, 24)];
        [color17 setFill];
        [oval131Path fill];

        ////// Oval 131 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval131Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval131Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval131Path.lineWidth = 1;
        [oval131Path stroke];


        //// Oval 154 Drawing
        UIBezierPath* oval154Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(336.5, 165.5, 33, 26)];
        [color17 setFill];
        [oval154Path fill];

        ////// Oval 154 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval154Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval154Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval154Path.lineWidth = 1;
        [oval154Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 153 Drawing
        UIBezierPath* oval153Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(348, 142.5, 29.5, 26)];
        [color3 setFill];
        [oval153Path fill];

        ////// Oval 153 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval153Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval153Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval153Path.lineWidth = 1;
        [oval153Path stroke];


        //// Oval 104 Drawing
        UIBezierPath* oval104Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(333, 142.5, 29.5, 26)];
        [color3 setFill];
        [oval104Path fill];

        ////// Oval 104 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval104Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval104Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval104Path.lineWidth = 1;
        [oval104Path stroke];


        //// Oval 105 Drawing
        UIBezierPath* oval105Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(285.5, 151.5, 32, 22)];
        [color3 setFill];
        [oval105Path fill];

        ////// Oval 105 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval105Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval105Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval105Path.lineWidth = 1;
        [oval105Path stroke];


        //// Oval 106 Drawing
        UIBezierPath* oval106Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(301.5, 142.5, 38, 28)];
        [color3 setFill];
        [oval106Path fill];

        ////// Oval 106 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval106Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval106Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval106Path.lineWidth = 1;
        [oval106Path stroke];


        //// Oval 107 Drawing
        UIBezierPath* oval107Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(317, 147, 36, 26)];
        [color3 setFill];
        [oval107Path fill];

        ////// Oval 107 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval107Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval107Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval107Path.lineWidth = 1;
        [oval107Path stroke];


        //// Oval 77 Drawing
        UIBezierPath* oval77Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(365, 151.5, 36, 24)];
        [color3 setFill];
        [oval77Path fill];

        ////// Oval 77 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval77Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval77Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval77Path.lineWidth = 1;
        [oval77Path stroke];


        //// Oval 78 Drawing
        UIBezierPath* oval78Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(344.5, 153.5, 36, 24)];
        [color3 setFill];
        [oval78Path fill];

        ////// Oval 78 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval78Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval78Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval78Path.lineWidth = 1;
        [oval78Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 31 Drawing
        UIBezierPath* oval31Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(217.5, 142.5, 32, 25)];
        [color17 setFill];
        [oval31Path fill];

        ////// Oval 31 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval31Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval31Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval31Path.lineWidth = 1;
        [oval31Path stroke];


        //// Oval 32 Drawing
        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(277.5, 142.5, 37, 27)];
        [color17 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];


        //// Oval 33 Drawing
        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(303.5, 153.5, 30, 22)];
        [color17 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];


        //// Oval 34 Drawing
        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(277.5, 142.5, 37, 27)];
        [color17 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];


        //// Oval 35 Drawing
        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(249.5, 142.5, 38, 27)];
        [color17 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];


        //// Oval 36 Drawing
        UIBezierPath* oval36Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(201, 150, 39, 29)];
        [color17 setFill];
        [oval36Path fill];

        ////// Oval 36 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval36Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval36Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval36Path.lineWidth = 1;
        [oval36Path stroke];


        //// Oval 37 Drawing
        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(220.5, 153.5, 39, 27)];
        [color17 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];


        //// Oval 38 Drawing
        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(237, 154, 31, 22)];
        [color17 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];


        //// Oval 39 Drawing
        UIBezierPath* oval39Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(283.5, 157.5, 26, 21)];
        [color17 setFill];
        [oval39Path fill];

        ////// Oval 39 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval39Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval39Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval39Path.lineWidth = 1;
        [oval39Path stroke];


        //// Oval 40 Drawing
        UIBezierPath* oval40Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(259.5, 158.5, 32, 25)];
        [color17 setFill];
        [oval40Path fill];

        ////// Oval 40 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval40Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval40Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [stromCloudOutline setStroke];
        oval40Path.lineWidth = 1;
        [oval40Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas63
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* color13 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.525];
    UIColor* lightningShadowColor = [UIColor colorWithRed: 1 green: 0.979 blue: 0.615 alpha: 1];
    UIColor* dayLightningGradientColor = [UIColor colorWithRed: 0.993 green: 0.357 blue: 0 alpha: 0.853];
    UIColor* dayLightningGradientColor2 = [UIColor colorWithRed: 1 green: 0.952 blue: 0.162 alpha: 0.822];

    //// Gradient Declarations
    CGFloat dayLightningGradientLocations[] = {0, 0.67, 1};
    CGGradientRef dayLightningGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)dayLightningGradientColor.CGColor, (id)[dayLightningGradientColor blendedColorWithFraction: 0.5 ofColor: dayLightningGradientColor2].CGColor, (id)dayLightningGradientColor2.CGColor], dayLightningGradientLocations);

    //// Shadow Declarations
    NSShadow* lightningShadow = [[NSShadow alloc] init];
    [lightningShadow setShadowColor: lightningShadowColor];
    [lightningShadow setShadowOffset: CGSizeMake(0.1, 16.1)];
    [lightningShadow setShadowBlurRadius: 11];

    //// Group 24
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 83.21, 298);
        CGContextRotateCTM(context, -2.82 * M_PI / 180);



        //// Bezier 48 Drawing
        UIBezierPath* bezier48Path = [UIBezierPath bezierPath];
        [UIColor.darkGrayColor setFill];
        [bezier48Path fill];
        [color setStroke];
        bezier48Path.lineWidth = 1;
        [bezier48Path stroke];


        //// Bezier 49 Drawing
        UIBezierPath* bezier49Path = [UIBezierPath bezierPath];
        [bezier49Path moveToPoint: CGPointMake(-19.38, -90.53)];
        [bezier49Path addLineToPoint: CGPointMake(-11.85, -78.98)];
        [bezier49Path addLineToPoint: CGPointMake(-11.85, -95.25)];
        [bezier49Path addLineToPoint: CGPointMake(-4.32, -100.5)];
        [bezier49Path addLineToPoint: CGPointMake(-7.74, -81.61)];
        [bezier49Path addLineToPoint: CGPointMake(-0.89, -90.53)];
        [bezier49Path addLineToPoint: CGPointMake(8.7, -81.61)];
        [bezier49Path addLineToPoint: CGPointMake(8.7, -100.5)];
        [bezier49Path addLineToPoint: CGPointMake(18.28, -83.18)];
        [bezier49Path addLineToPoint: CGPointMake(29.33, -96.99)];
        [bezier49Path addLineToPoint: CGPointMake(21.45, -77.31)];
        [bezier49Path addLineToPoint: CGPointMake(10.62, 2.11)];
        [bezier49Path addLineToPoint: CGPointMake(-0.21, -6.33)];
        [bezier49Path addLineToPoint: CGPointMake(-11.85, 59.04)];
        [bezier49Path addLineToPoint: CGPointMake(-24.18, 43.3)];
        [bezier49Path addLineToPoint: CGPointMake(-31.71, 100.5)];
        [bezier49Path addLineToPoint: CGPointMake(-31.71, 22.83)];
        [bezier49Path addLineToPoint: CGPointMake(-19.38, 35.42)];
        [bezier49Path addLineToPoint: CGPointMake(-23.84, -32.33)];
        [bezier49Path addLineToPoint: CGPointMake(-10.05, -23.19)];
        [bezier49Path addLineToPoint: CGPointMake(-19.38, -81.61)];
        [bezier49Path addLineToPoint: CGPointMake(-19.38, -90.53)];
        [bezier49Path closePath];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, lightningShadow.shadowOffset, lightningShadow.shadowBlurRadius, [lightningShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);
        [bezier49Path addClip];
        CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(-1.19, -100.5), CGPointMake(-1.19, 100.5), 0);
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.blackColor setStroke];
        bezier49Path.lineWidth = 1;
        [bezier49Path stroke];


        //// Group 25
        {
            //// Oval 171 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, 8.68, -62.18);
            CGContextRotateCTM(context, -2.66 * M_PI / 180);

            UIBezierPath* oval171Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-9.43, 2.24, 7.65, 17.56)];
            [UIColor.whiteColor setFill];
            [oval171Path fill];
            [color setStroke];
            oval171Path.lineWidth = 1;
            [oval171Path stroke];

            CGContextRestoreGState(context);


            //// Oval 172 Drawing
            UIBezierPath* oval172Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(2.79, -58, 5, 8)];
            [color setFill];
            [oval172Path fill];


            //// Oval 173 Drawing
            UIBezierPath* oval173Path = [UIBezierPath bezierPath];
            [oval173Path moveToPoint: CGPointMake(7.29, -34.5)];
            [oval173Path addCurveToPoint: CGPointMake(9.29, -30.5) controlPoint1: CGPointMake(8.32, -33.45) controlPoint2: CGPointMake(9.29, -32.2)];
            [oval173Path addCurveToPoint: CGPointMake(5.29, -32.5) controlPoint1: CGPointMake(9.29, -28.46) controlPoint2: CGPointMake(8.29, -31.71)];
            [oval173Path addCurveToPoint: CGPointMake(1.29, -30.5) controlPoint1: CGPointMake(4.22, -32.78) controlPoint2: CGPointMake(2.59, -30.5)];
            [oval173Path addCurveToPoint: CGPointMake(-3.71, -32.5) controlPoint1: CGPointMake(-1.22, -30.5) controlPoint2: CGPointMake(-1.95, -32.97)];
            [oval173Path addCurveToPoint: CGPointMake(-8.21, -30) controlPoint1: CGPointMake(-5.43, -32.04) controlPoint2: CGPointMake(-8.21, -28.63)];
            [oval173Path addCurveToPoint: CGPointMake(-7.71, -35.5) controlPoint1: CGPointMake(-8.21, -30.97) controlPoint2: CGPointMake(-8.65, -34.65)];
            [oval173Path addCurveToPoint: CGPointMake(-0.71, -32.5) controlPoint1: CGPointMake(-6.71, -36.4) controlPoint2: CGPointMake(-2.64, -32.78)];
            [oval173Path addCurveToPoint: CGPointMake(5.29, -35.5) controlPoint1: CGPointMake(0.71, -32.29) controlPoint2: CGPointMake(3.92, -35.5)];
            [oval173Path addCurveToPoint: CGPointMake(7.29, -34.5) controlPoint1: CGPointMake(7.2, -35.5) controlPoint2: CGPointMake(6.65, -35.15)];
            [oval173Path closePath];
            [UIColor.whiteColor setFill];
            [oval173Path fill];
            [color setStroke];
            oval173Path.lineWidth = 1;
            [oval173Path stroke];


            //// Oval 174 Drawing
            CGContextSaveGState(context);
            CGContextTranslateCTM(context, -3.22, -49.72);
            CGContextRotateCTM(context, -0.43 * M_PI / 180);

            UIBezierPath* oval174Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-4.39, -8.59, 8.78, 17.18)];
            [UIColor.whiteColor setFill];
            [oval174Path fill];
            [color setStroke];
            oval174Path.lineWidth = 1;
            [oval174Path stroke];

            CGContextRestoreGState(context);


            //// Oval 175 Drawing
            UIBezierPath* oval175Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-4.21, -58, 5, 9)];
            [color setFill];
            [oval175Path fill];
        }


        //// Group 26
        {
            //// Bezier 50 Drawing
            UIBezierPath* bezier50Path = [UIBezierPath bezierPath];
            [bezier50Path moveToPoint: CGPointMake(-4.71, -62.5)];
            [bezier50Path addCurveToPoint: CGPointMake(7.29, -62.5) controlPoint1: CGPointMake(0.62, -68.5) controlPoint2: CGPointMake(7.29, -62.5)];
            [UIColor.blackColor setStroke];
            bezier50Path.lineWidth = 1;
            [bezier50Path stroke];


            //// Bezier 51 Drawing
            UIBezierPath* bezier51Path = [UIBezierPath bezierPath];
            [bezier51Path moveToPoint: CGPointMake(-7.71, -63.83)];
            [bezier51Path addCurveToPoint: CGPointMake(10.29, -63.83) controlPoint1: CGPointMake(0.29, -74.33) controlPoint2: CGPointMake(10.29, -63.83)];
            [UIColor.blackColor setStroke];
            bezier51Path.lineWidth = 1;
            [bezier51Path stroke];
        }


        //// Bezier 52 Drawing
        UIBezierPath* bezier52Path = [UIBezierPath bezierPath];
        [bezier52Path moveToPoint: CGPointMake(2.75, -35.84)];
        [bezier52Path addLineToPoint: CGPointMake(0.78, -14.06)];
        [bezier52Path addLineToPoint: CGPointMake(-11.04, -17.57)];
        [bezier52Path addLineToPoint: CGPointMake(-15.96, 45.68)];
        [bezier52Path addLineToPoint: CGPointMake(-26.79, 35.14)];
        [bezier52Path addLineToPoint: CGPointMake(-28.76, 58.33)];
        [color13 setStroke];
        bezier52Path.lineWidth = 1;
        [bezier52Path stroke];



        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(dayLightningGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas64
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* color13 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.525];
    UIColor* lightningShadowColor = [UIColor colorWithRed: 1 green: 0.979 blue: 0.615 alpha: 1];
    UIColor* dayLightningGradientColor = [UIColor colorWithRed: 0.993 green: 0.357 blue: 0 alpha: 0.853];
    UIColor* dayLightningGradientColor2 = [UIColor colorWithRed: 1 green: 0.952 blue: 0.162 alpha: 0.822];

    //// Gradient Declarations
    CGFloat dayLightningGradientLocations[] = {0, 0.67, 1};
    CGGradientRef dayLightningGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)dayLightningGradientColor.CGColor, (id)[dayLightningGradientColor blendedColorWithFraction: 0.5 ofColor: dayLightningGradientColor2].CGColor, (id)dayLightningGradientColor2.CGColor], dayLightningGradientLocations);

    //// Shadow Declarations
    NSShadow* lightningShadow = [[NSShadow alloc] init];
    [lightningShadow setShadowColor: lightningShadowColor];
    [lightningShadow setShadowOffset: CGSizeMake(0.1, 16.1)];
    [lightningShadow setShadowBlurRadius: 11];

    //// Group 12
    {
        //// Group 18
        {
            //// Bezier 42 Drawing
            UIBezierPath* bezier42Path = [UIBezierPath bezierPath];
            [UIColor.blackColor setStroke];
            bezier42Path.lineWidth = 1;
            [bezier42Path stroke];


            //// Group 22
            {
                //// Group 20
                {
                    //// Group 21
                    {
                        //// Bezier 43 Drawing
                        UIBezierPath* bezier43Path = [UIBezierPath bezierPath];
                        [bezier43Path moveToPoint: CGPointMake(375.89, 203.32)];
                        [bezier43Path addCurveToPoint: CGPointMake(360.92, 215.14) controlPoint1: CGPointMake(373.96, 203.66) controlPoint2: CGPointMake(362.13, 217.7)];
                        [bezier43Path addCurveToPoint: CGPointMake(360.92, 193.86) controlPoint1: CGPointMake(359.29, 211.72) controlPoint2: CGPointMake(363.23, 194.41)];
                        [bezier43Path addCurveToPoint: CGPointMake(354.06, 215.14) controlPoint1: CGPointMake(359.25, 193.46) controlPoint2: CGPointMake(355.72, 216.44)];
                        [bezier43Path addCurveToPoint: CGPointMake(349.69, 193.86) controlPoint1: CGPointMake(352.05, 213.59) controlPoint2: CGPointMake(351.64, 194.55)];
                        [bezier43Path addCurveToPoint: CGPointMake(345.32, 212.78) controlPoint1: CGPointMake(348.09, 193.3) controlPoint2: CGPointMake(346.76, 213.75)];
                        [bezier43Path addCurveToPoint: CGPointMake(345.32, 193.86) controlPoint1: CGPointMake(343.05, 211.26) controlPoint2: CGPointMake(347.66, 194.91)];
                        [bezier43Path addCurveToPoint: CGPointMake(332.84, 191.5) controlPoint1: CGPointMake(342.17, 192.45) controlPoint2: CGPointMake(335.19, 191.39)];
                        [bezier43Path addCurveToPoint: CGPointMake(337.21, 203.32) controlPoint1: CGPointMake(330.2, 191.62) controlPoint2: CGPointMake(339.38, 201.32)];
                        [bezier43Path addCurveToPoint: CGPointMake(340.33, 212.78) controlPoint1: CGPointMake(336.33, 204.14) controlPoint2: CGPointMake(339.93, 208.51)];
                        [bezier43Path addCurveToPoint: CGPointMake(337.21, 220.66) controlPoint1: CGPointMake(340.65, 216.2) controlPoint2: CGPointMake(337.8, 219.62)];
                        [bezier43Path addCurveToPoint: CGPointMake(332.84, 215.14) controlPoint1: CGPointMake(336.64, 221.67) controlPoint2: CGPointMake(336.59, 209.63)];
                        [bezier43Path addCurveToPoint: CGPointMake(323.49, 215.14) controlPoint1: CGPointMake(328.26, 221.91) controlPoint2: CGPointMake(323.83, 213.16)];
                        [bezier43Path addCurveToPoint: CGPointMake(332.84, 226.18) controlPoint1: CGPointMake(322.93, 218.34) controlPoint2: CGPointMake(332.95, 221.74)];
                        [bezier43Path addCurveToPoint: CGPointMake(332.84, 279.78) controlPoint1: CGPointMake(331.6, 279.78) controlPoint2: CGPointMake(332.84, 279.78)];
                        [bezier43Path addLineToPoint: CGPointMake(340.33, 271.1)];
                        [bezier43Path addLineToPoint: CGPointMake(332.84, 310.51)];
                        [bezier43Path addLineToPoint: CGPointMake(340.33, 310.51)];
                        [bezier43Path addLineToPoint: CGPointMake(332.84, 351.5)];
                        [bezier43Path addLineToPoint: CGPointMake(360.92, 297.12)];
                        [bezier43Path addLineToPoint: CGPointMake(349.69, 297.12)];
                        [bezier43Path addLineToPoint: CGPointMake(371.52, 247.46)];
                        [bezier43Path addLineToPoint: CGPointMake(354.06, 252.98)];
                        [bezier43Path addLineToPoint: CGPointMake(371.52, 215.14)];
                        [bezier43Path addCurveToPoint: CGPointMake(375.89, 203.32) controlPoint1: CGPointMake(371.52, 215.14) controlPoint2: CGPointMake(378.69, 202.83)];
                        [bezier43Path closePath];
                        CGContextSaveGState(context);
                        CGContextSetShadowWithColor(context, lightningShadow.shadowOffset, lightningShadow.shadowBlurRadius, [lightningShadow.shadowColor CGColor]);
                        CGContextBeginTransparencyLayer(context, NULL);
                        [bezier43Path addClip];
                        CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(350, 191.49), CGPointMake(350, 351.5), 0);
                        CGContextEndTransparencyLayer(context);
                        CGContextRestoreGState(context);

                        [UIColor.blackColor setStroke];
                        bezier43Path.lineWidth = 1;
                        [bezier43Path stroke];


                        //// Bezier 44 Drawing
                        UIBezierPath* bezier44Path = [UIBezierPath bezierPath];
                        [bezier44Path moveToPoint: CGPointMake(353.74, 259.68)];
                        [bezier44Path addLineToPoint: CGPointMake(339.39, 303.81)];
                        CGContextSaveGState(context);
                        [bezier44Path addClip];
                        CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(346.57, 259.68), CGPointMake(346.57, 303.81), 0);
                        CGContextRestoreGState(context);
                        [color13 setStroke];
                        bezier44Path.lineWidth = 2;
                        [bezier44Path stroke];


                        //// Bezier 45 Drawing
                        UIBezierPath* bezier45Path = [UIBezierPath bezierPath];
                        [bezier45Path moveToPoint: CGPointMake(349.38, 301.45)];
                        [bezier45Path addLineToPoint: CGPointMake(340.64, 328.25)];
                        CGContextSaveGState(context);
                        [bezier45Path addClip];
                        CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(345.01, 301.45), CGPointMake(345.01, 328.25), 0);
                        CGContextRestoreGState(context);
                        [color13 setStroke];
                        bezier45Path.lineWidth = 2;
                        [bezier45Path stroke];


                        //// Bezier 46 Drawing
                        UIBezierPath* bezier46Path = [UIBezierPath bezierPath];
                        [bezier46Path moveToPoint: CGPointMake(340.02, 264.41)];
                        [bezier46Path addLineToPoint: CGPointMake(353.74, 259.68)];
                        CGContextSaveGState(context);
                        [bezier46Path addClip];
                        CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(346.88, 259.68), CGPointMake(346.88, 264.41), 0);
                        CGContextRestoreGState(context);
                        [color13 setStroke];
                        bezier46Path.lineWidth = 2;
                        [bezier46Path stroke];


                        //// Bezier 47 Drawing
                        UIBezierPath* bezier47Path = [UIBezierPath bezierPath];
                        [bezier47Path moveToPoint: CGPointMake(339.39, 303.81)];
                        [bezier47Path addLineToPoint: CGPointMake(349.38, 301.45)];
                        CGContextSaveGState(context);
                        [bezier47Path addClip];
                        CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(344.39, 301.45), CGPointMake(344.39, 303.81), 0);
                        CGContextRestoreGState(context);
                        [color13 setStroke];
                        bezier47Path.lineWidth = 2;
                        [bezier47Path stroke];


                        //// Bezier 53 Drawing
                        UIBezierPath* bezier53Path = [UIBezierPath bezierPath];
                        [bezier53Path moveToPoint: CGPointMake(343.84, 229.61)];
                        [bezier53Path addLineToPoint: CGPointMake(340.02, 264.41)];
                        CGContextSaveGState(context);
                        [bezier53Path addClip];
                        CGContextDrawLinearGradient(context, dayLightningGradient, CGPointMake(341.93, 229.61), CGPointMake(341.93, 264.41), 0);
                        CGContextRestoreGState(context);
                        [color13 setStroke];
                        bezier53Path.lineWidth = 2;
                        [bezier53Path stroke];
                    }
                }
            }


            //// Group 23
            {
                //// Oval 167 Drawing
                UIBezierPath* oval167Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(348, 224.5, 9, 19)];
                [UIColor.whiteColor setFill];
                [oval167Path fill];
                [color setStroke];
                oval167Path.lineWidth = 1;
                [oval167Path stroke];


                //// Oval 168 Drawing
                UIBezierPath* oval168Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(338, 221.5, 10.5, 22)];
                [UIColor.whiteColor setFill];
                [oval168Path fill];
                [color setStroke];
                oval168Path.lineWidth = 1;
                [oval168Path stroke];


                //// Oval 169 Drawing
                UIBezierPath* oval169Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(340.5, 234.5, 4.5, 11)];
                [UIColor.blackColor setFill];
                [oval169Path fill];
                [color setStroke];
                oval169Path.lineWidth = 1;
                [oval169Path stroke];


                //// Oval 170 Drawing
                UIBezierPath* oval170Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(349.5, 235.5, 3.5, 9.5)];
                [UIColor.blackColor setFill];
                [oval170Path fill];
                [color setStroke];
                oval170Path.lineWidth = 1;
                [oval170Path stroke];
            }


            //// Group 50
            {
                CGContextSaveGState(context);
                CGContextTranslateCTM(context, 341.25, 260.28);
                CGContextRotateCTM(context, -10.72 * M_PI / 180);



                //// Bezier 119 Drawing
                UIBezierPath* bezier119Path = [UIBezierPath bezierPath];
                [bezier119Path moveToPoint: CGPointMake(12.25, -8.78)];
                [bezier119Path addCurveToPoint: CGPointMake(9.47, -8.78) controlPoint1: CGPointMake(10.71, -10.15) controlPoint2: CGPointMake(9.47, -8.78)];
                bezier119Path.lineCapStyle = kCGLineCapRound;

                [UIColor.blackColor setStroke];
                bezier119Path.lineWidth = 1;
                [bezier119Path stroke];


                //// Bezier 120 Drawing
                UIBezierPath* bezier120Path = [UIBezierPath bezierPath];
                [bezier120Path moveToPoint: CGPointMake(9.47, -8.68)];
                [bezier120Path addCurveToPoint: CGPointMake(4.01, -10.23) controlPoint1: CGPointMake(6.83, -7.73) controlPoint2: CGPointMake(4.01, -10.23)];
                bezier120Path.lineCapStyle = kCGLineCapRound;

                [UIColor.blackColor setStroke];
                bezier120Path.lineWidth = 2;
                [bezier120Path stroke];


                //// Bezier 121 Drawing
                UIBezierPath* bezier121Path = [UIBezierPath bezierPath];
                [bezier121Path moveToPoint: CGPointMake(3.92, -10.06)];
                [bezier121Path addCurveToPoint: CGPointMake(-0.25, -9.38) controlPoint1: CGPointMake(2.29, -11.43) controlPoint2: CGPointMake(-0.25, -9.38)];
                bezier121Path.lineCapStyle = kCGLineCapRound;

                [UIColor.blackColor setStroke];
                bezier121Path.lineWidth = 3;
                [bezier121Path stroke];



                CGContextRestoreGState(context);
            }


            //// Bezier 54 Drawing
            UIBezierPath* bezier54Path = [UIBezierPath bezierPath];
            [bezier54Path moveToPoint: CGPointMake(355.54, 218.5)];
            [bezier54Path addLineToPoint: CGPointMake(359.24, 224.5)];
            [UIColor.blackColor setStroke];
            bezier54Path.lineWidth = 1;
            [bezier54Path stroke];


            //// Bezier 55 Drawing
            UIBezierPath* bezier55Path = [UIBezierPath bezierPath];
            [bezier55Path moveToPoint: CGPointMake(348.15, 215.5)];
            [bezier55Path addLineToPoint: CGPointMake(340.76, 219.5)];
            [UIColor.blackColor setStroke];
            bezier55Path.lineWidth = 1;
            [bezier55Path stroke];
        }
    }


    //// Cleanup
    CGGradientRelease(dayLightningGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas65
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* dayTimeFogGradientColor = [UIColor colorWithRed: 0.036 green: 0.233 blue: 0.404 alpha: 1];
    UIColor* dayTimeFogGradientColor2 = [UIColor colorWithRed: 0.043 green: 0.223 blue: 0.055 alpha: 1];
    UIColor* dayTimeFogGradientColor3 = [UIColor colorWithRed: 0.304 green: 0.654 blue: 0.832 alpha: 1];
    UIColor* dayTimeFogGradientColor4 = [UIColor colorWithRed: 0.161 green: 0.444 blue: 0.687 alpha: 1];

    //// Gradient Declarations
    CGFloat dayTimeFogGradientLocations[] = {0, 0.09, 0.16, 0.32, 0.83, 0.94, 0.99};
    CGGradientRef dayTimeFogGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)dayTimeFogGradientColor3.CGColor, (id)[dayTimeFogGradientColor3 blendedColorWithFraction: 0.5 ofColor: dayTimeFogGradientColor4].CGColor, (id)dayTimeFogGradientColor4.CGColor, (id)[dayTimeFogGradientColor4 blendedColorWithFraction: 0.5 ofColor: dayTimeFogGradientColor].CGColor, (id)dayTimeFogGradientColor.CGColor, (id)[dayTimeFogGradientColor blendedColorWithFraction: 0.5 ofColor: dayTimeFogGradientColor2].CGColor, (id)dayTimeFogGradientColor2.CGColor], dayTimeFogGradientLocations);

    //// Group 7
    {
        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 414, 736)];
        CGContextSaveGState(context);
        [rectanglePath addClip];
        CGContextDrawLinearGradient(context, dayTimeFogGradient, CGPointMake(207, -0), CGPointMake(207, 736), 0);
        CGContextRestoreGState(context);
    }


    //// Group 16
    {
    }


    //// Cleanup
    CGGradientRelease(dayTimeFogGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas67
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* color9 = [UIColor colorWithRed: 0.5 green: 0.5 blue: 0.5 alpha: 1];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(165.5, 98, 30, 24)];
        [color3 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(105.5, 98, 34, 27)];
        [color3 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(87.5, 108, 28, 22)];
        [color3 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(105.5, 98, 34, 27)];
        [color3 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(130.5, 98, 35, 27)];
        [color3 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(175, 105.5, 36, 27)];
        [color3 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(156.5, 108, 36, 28)];
        [color3 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(149, 108.5, 28, 22)];
        [color3 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(109.5, 113, 25, 19)];
        [color3 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(126.5, 114, 30, 24)];
        [color3 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(59.5, 96, 30, 24)];
        [color3 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.5, 96, 34, 27)];
        [color3 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];


        //// Oval 13 Drawing
        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-18.5, 106, 28, 22)];
        [color3 setFill];
        [oval13Path fill];

        ////// Oval 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];


        //// Oval 14 Drawing
        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.5, 96, 34, 27)];
        [color3 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];


        //// Oval 15 Drawing
        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(24.5, 96, 35, 27)];
        [color3 setFill];
        [oval15Path fill];

        ////// Oval 15 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval15Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval15Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];


        //// Oval 16 Drawing
        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(69, 103.5, 36, 27)];
        [color3 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(50.5, 106, 36, 28)];
        [color3 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];


        //// Oval 18 Drawing
        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(43, 106.5, 28, 22)];
        [color3 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];


        //// Oval 19 Drawing
        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(3.5, 111, 25, 19)];
        [color3 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];


        //// Oval 20 Drawing
        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(20.5, 112, 30, 24)];
        [color3 setFill];
        [oval20Path fill];

        ////// Oval 20 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval20Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval20Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 42 Drawing
        UIBezierPath* oval42Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(98.5, 69.5, 25, 16.5)];
        [color3 setFill];
        [oval42Path fill];

        ////// Oval 42 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval42Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval42Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval42Path.lineWidth = 1;
        [oval42Path stroke];


        //// Oval 41 Drawing
        UIBezierPath* oval41Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(77.5, 68.5, 26, 16)];
        [color3 setFill];
        [oval41Path fill];

        ////// Oval 41 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval41Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval41Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval41Path.lineWidth = 1;
        [oval41Path stroke];


        //// Oval 118 Drawing
        UIBezierPath* oval118Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(114, 75.5, 30, 23)];
        [color3 setFill];
        [oval118Path fill];

        ////// Oval 118 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval118Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval118Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval118Path.lineWidth = 1;
        [oval118Path stroke];


        //// Oval 119 Drawing
        UIBezierPath* oval119Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(54, 75.5, 34, 25)];
        [color3 setFill];
        [oval119Path fill];

        ////// Oval 119 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval119Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval119Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval119Path.lineWidth = 1;
        [oval119Path stroke];


        //// Oval 120 Drawing
        UIBezierPath* oval120Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(36, 84.5, 28, 21)];
        [color3 setFill];
        [oval120Path fill];

        ////// Oval 120 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval120Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval120Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval120Path.lineWidth = 1;
        [oval120Path stroke];


        //// Oval 121 Drawing
        UIBezierPath* oval121Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(54, 75.5, 34, 25)];
        [color3 setFill];
        [oval121Path fill];

        ////// Oval 121 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval121Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval121Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval121Path.lineWidth = 1;
        [oval121Path stroke];


        //// Oval 122 Drawing
        UIBezierPath* oval122Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(79, 75.5, 35, 25)];
        [color3 setFill];
        [oval122Path fill];

        ////// Oval 122 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval122Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval122Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval122Path.lineWidth = 1;
        [oval122Path stroke];


        //// Oval 123 Drawing
        UIBezierPath* oval123Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(123.5, 83, 36, 25)];
        [color3 setFill];
        [oval123Path fill];

        ////// Oval 123 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval123Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval123Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval123Path.lineWidth = 1;
        [oval123Path stroke];


        //// Oval 124 Drawing
        UIBezierPath* oval124Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(105, 84.5, 36, 27)];
        [color3 setFill];
        [oval124Path fill];

        ////// Oval 124 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval124Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval124Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval124Path.lineWidth = 1;
        [oval124Path stroke];


        //// Oval 125 Drawing
        UIBezierPath* oval125Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(97.5, 85, 28, 21)];
        [color3 setFill];
        [oval125Path fill];

        ////// Oval 125 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval125Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval125Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval125Path.lineWidth = 1;
        [oval125Path stroke];


        //// Oval 126 Drawing
        UIBezierPath* oval126Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(58, 89.5, 25, 18)];
        [color3 setFill];
        [oval126Path fill];

        ////// Oval 126 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval126Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval126Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval126Path.lineWidth = 1;
        [oval126Path stroke];


        //// Oval 127 Drawing
        UIBezierPath* oval127Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(75, 90.5, 30, 23)];
        [color3 setFill];
        [oval127Path fill];

        ////// Oval 127 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval127Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval127Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval127Path.lineWidth = 1;
        [oval127Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 43 Drawing
        UIBezierPath* oval43Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(32.5, 154, 32, 25)];
        [color9 setFill];
        [oval43Path fill];

        ////// Oval 43 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval43Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval43Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval43Path.lineWidth = 1;
        [oval43Path stroke];


        //// Oval 44 Drawing
        UIBezierPath* oval44Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(91.5, 154, 36, 27)];
        [color9 setFill];
        [oval44Path fill];

        ////// Oval 44 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval44Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval44Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval44Path.lineWidth = 1;
        [oval44Path stroke];


        //// Oval 45 Drawing
        UIBezierPath* oval45Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(116.5, 165, 30, 22)];
        [color9 setFill];
        [oval45Path fill];

        ////// Oval 45 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval45Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval45Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval45Path.lineWidth = 1;
        [oval45Path stroke];


        //// Oval 46 Drawing
        UIBezierPath* oval46Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(91.5, 154, 36, 27)];
        [color9 setFill];
        [oval46Path fill];

        ////// Oval 46 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval46Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval46Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval46Path.lineWidth = 1;
        [oval46Path stroke];


        //// Oval 47 Drawing
        UIBezierPath* oval47Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(64.5, 154, 37, 27)];
        [color9 setFill];
        [oval47Path fill];

        ////// Oval 47 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval47Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval47Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval47Path.lineWidth = 1;
        [oval47Path stroke];


        //// Oval 48 Drawing
        UIBezierPath* oval48Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(16, 161.5, 38, 29)];
        [color9 setFill];
        [oval48Path fill];

        ////// Oval 48 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval48Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval48Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval48Path.lineWidth = 1;
        [oval48Path stroke];


        //// Oval 49 Drawing
        UIBezierPath* oval49Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(35.5, 165, 38, 27)];
        [color9 setFill];
        [oval49Path fill];

        ////// Oval 49 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval49Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval49Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval49Path.lineWidth = 1;
        [oval49Path stroke];


        //// Oval 50 Drawing
        UIBezierPath* oval50Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(52, 165.5, 30, 22)];
        [color9 setFill];
        [oval50Path fill];

        ////// Oval 50 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval50Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval50Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval50Path.lineWidth = 1;
        [oval50Path stroke];


        //// Oval 51 Drawing
        UIBezierPath* oval51Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(96.5, 169, 27, 21)];
        [color9 setFill];
        [oval51Path fill];

        ////// Oval 51 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval51Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval51Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval51Path.lineWidth = 1;
        [oval51Path stroke];


        //// Oval 52 Drawing
        UIBezierPath* oval52Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(73.5, 170, 32, 25)];
        [color9 setFill];
        [oval52Path fill];

        ////// Oval 52 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval52Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval52Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval52Path.lineWidth = 1;
        [oval52Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 55 Drawing
        UIBezierPath* oval55Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(70.5, 150, 33, 22)];
        [color10 setFill];
        [oval55Path fill];

        ////// Oval 55 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval55Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval55Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval55Path.lineWidth = 1;
        [oval55Path stroke];


        //// Oval 58 Drawing
        UIBezierPath* oval58Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-10.5, 153.5, 40, 27)];
        [color10 setFill];
        [oval58Path fill];

        ////// Oval 58 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval58Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval58Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval58Path.lineWidth = 1;
        [oval58Path stroke];


        //// Oval 59 Drawing
        UIBezierPath* oval59Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(5.5, 147.5, 43, 28)];
        [color10 setFill];
        [oval59Path fill];

        ////// Oval 59 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval59Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval59Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval59Path.lineWidth = 1;
        [oval59Path stroke];


        //// Oval 60 Drawing
        UIBezierPath* oval60Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(37.5, 147.5, 33, 22)];
        [color10 setFill];
        [oval60Path fill];

        ////// Oval 60 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval60Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval60Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval60Path.lineWidth = 1;
        [oval60Path stroke];


        //// Oval 61 Drawing
        UIBezierPath* oval61Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(48.5, 154, 29, 22)];
        [color10 setFill];
        [oval61Path fill];

        ////// Oval 61 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval61Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval61Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval61Path.lineWidth = 1;
        [oval61Path stroke];


        //// Oval 62 Drawing
        UIBezierPath* oval62Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(22.5, 155, 35, 26)];
        [color10 setFill];
        [oval62Path fill];

        ////// Oval 62 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval62Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval62Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval62Path.lineWidth = 1;
        [oval62Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas68
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* color9 = [UIColor colorWithRed: 0.5 green: 0.5 blue: 0.5 alpha: 1];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 100 Drawing
        UIBezierPath* oval100Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(324, 114, 36, 27)];
        [color9 setFill];
        [oval100Path fill];

        ////// Oval 100 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval100Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval100Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval100Path.lineWidth = 1;
        [oval100Path stroke];


        //// Oval 98 Drawing
        UIBezierPath* oval98Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(362, 123.5, 30, 22)];
        [color9 setFill];
        [oval98Path fill];

        ////// Oval 98 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval98Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval98Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval98Path.lineWidth = 1;
        [oval98Path stroke];


        //// Oval 101 Drawing
        UIBezierPath* oval101Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(340.5, 120.5, 30, 23)];
        [color9 setFill];
        [oval101Path fill];

        ////// Oval 101 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval101Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval101Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval101Path.lineWidth = 1;
        [oval101Path stroke];


        //// Oval 102 Drawing
        UIBezierPath* oval102Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(387, 117, 27, 22)];
        [color9 setFill];
        [oval102Path fill];

        ////// Oval 102 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval102Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval102Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval102Path.lineWidth = 1;
        [oval102Path stroke];


        //// Oval 103 Drawing
        UIBezierPath* oval103Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(362, 112, 33, 24)];
        [color9 setFill];
        [oval103Path fill];

        ////// Oval 103 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval103Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval103Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval103Path.lineWidth = 1;
        [oval103Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 5
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 21 Drawing
        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(327, 149.5, 34, 24)];
        [color3 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];


        //// Oval 25 Drawing
        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(287, 149.5, 40, 25)];
        [color3 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];


        //// Oval 26 Drawing
        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(337.5, 157, 41, 28)];
        [color3 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];


        //// Oval 27 Drawing
        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(316, 159.5, 41, 27)];
        [color3 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];


        //// Oval 28 Drawing
        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(308.5, 177, 31, 22)];
        [color3 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];


        //// Oval 128 Drawing
        UIBezierPath* oval128Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(374.5, 159.5, 29, 24)];
        [color3 setFill];
        [oval128Path fill];

        ////// Oval 128 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval128Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval128Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval128Path.lineWidth = 1;
        [oval128Path stroke];


        //// Oval 129 Drawing
        UIBezierPath* oval129Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(325.5, 170, 30, 24)];
        [color3 setFill];
        [oval129Path fill];

        ////// Oval 129 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval129Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval129Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval129Path.lineWidth = 1;
        [oval129Path stroke];


        //// Oval 130 Drawing
        UIBezierPath* oval130Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(364.5, 165, 35, 29)];
        [color3 setFill];
        [oval130Path fill];

        ////// Oval 130 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval130Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval130Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval130Path.lineWidth = 1;
        [oval130Path stroke];


        //// Oval 131 Drawing
        UIBezierPath* oval131Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(350, 167.5, 28.5, 26)];
        [color3 setFill];
        [oval131Path fill];

        ////// Oval 131 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval131Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval131Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval131Path.lineWidth = 1;
        [oval131Path stroke];


        //// Oval 138 Drawing
        UIBezierPath* oval138Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(219.5, 143.5, 36, 27)];
        [color3 setFill];
        [oval138Path fill];

        ////// Oval 138 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval138Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval138Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval138Path.lineWidth = 1;
        [oval138Path stroke];


        //// Oval 22 Drawing
        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(248, 151.5, 34, 25)];
        [color3 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];


        //// Oval 24 Drawing
        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(287, 165.5, 34, 25)];
        [color3 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];


        //// Oval 132 Drawing
        UIBezierPath* oval132Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(274, 160, 30, 24)];
        [color3 setFill];
        [oval132Path fill];

        ////// Oval 132 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval132Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval132Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval132Path.lineWidth = 1;
        [oval132Path stroke];


        //// Oval 133 Drawing
        UIBezierPath* oval133Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(198, 160, 34, 25)];
        [color3 setFill];
        [oval133Path fill];

        ////// Oval 133 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval133Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval133Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval133Path.lineWidth = 1;
        [oval133Path stroke];


        //// Oval 134 Drawing
        UIBezierPath* oval134Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(180, 170, 28, 22)];
        [color3 setFill];
        [oval134Path fill];

        ////// Oval 134 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval134Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval134Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval134Path.lineWidth = 1;
        [oval134Path stroke];


        //// Oval 135 Drawing
        UIBezierPath* oval135Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(198, 160, 34, 25)];
        [color3 setFill];
        [oval135Path fill];

        ////// Oval 135 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval135Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval135Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval135Path.lineWidth = 1;
        [oval135Path stroke];


        //// Oval 136 Drawing
        UIBezierPath* oval136Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(223, 160, 35, 25)];
        [color3 setFill];
        [oval136Path fill];

        ////// Oval 136 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval136Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval136Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval136Path.lineWidth = 1;
        [oval136Path stroke];


        //// Oval 137 Drawing
        UIBezierPath* oval137Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(267.5, 167.5, 36, 27)];
        [color3 setFill];
        [oval137Path fill];

        ////// Oval 137 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval137Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval137Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval137Path.lineWidth = 1;
        [oval137Path stroke];


        //// Oval 139 Drawing
        UIBezierPath* oval139Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(243.5, 175.5, 34, 28)];
        [color3 setFill];
        [oval139Path fill];

        ////// Oval 139 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval139Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval139Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval139Path.lineWidth = 1;
        [oval139Path stroke];


        //// Oval 140 Drawing
        UIBezierPath* oval140Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(199, 172, 31, 24)];
        [color3 setFill];
        [oval140Path fill];

        ////// Oval 140 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval140Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval140Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval140Path.lineWidth = 1;
        [oval140Path stroke];


        //// Oval 141 Drawing
        UIBezierPath* oval141Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(219, 175, 30, 24)];
        [color3 setFill];
        [oval141Path fill];

        ////// Oval 141 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval141Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval141Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval141Path.lineWidth = 1;
        [oval141Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 31 Drawing
        UIBezierPath* oval31Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(180.5, 139.5, 34, 29)];
        [color3 setFill];
        [oval31Path fill];

        ////// Oval 31 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval31Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval31Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval31Path.lineWidth = 1;
        [oval31Path stroke];


        //// Oval 32 Drawing
        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(245.5, 139.5, 39, 31)];
        [color3 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];


        //// Oval 33 Drawing
        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(272.5, 151.5, 33, 25)];
        [color3 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];


        //// Oval 34 Drawing
        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(245.5, 139.5, 39, 31)];
        [color3 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];


        //// Oval 35 Drawing
        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(214.5, 139.5, 41, 31)];
        [color3 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];


        //// Oval 36 Drawing
        UIBezierPath* oval36Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(162, 149, 42, 32)];
        [color3 setFill];
        [oval36Path fill];

        ////// Oval 36 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval36Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval36Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval36Path.lineWidth = 1;
        [oval36Path stroke];


        //// Oval 37 Drawing
        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(183.5, 151.5, 42, 31)];
        [color3 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];


        //// Oval 38 Drawing
        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(202, 152, 32, 25)];
        [color3 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];


        //// Oval 39 Drawing
        UIBezierPath* oval39Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(250.5, 156.5, 29, 24)];
        [color3 setFill];
        [oval39Path fill];

        ////// Oval 39 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval39Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval39Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval39Path.lineWidth = 1;
        [oval39Path stroke];


        //// Oval 40 Drawing
        UIBezierPath* oval40Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(225.5, 157.5, 35, 29)];
        [color3 setFill];
        [oval40Path fill];

        ////// Oval 40 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval40Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval40Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval40Path.lineWidth = 1;
        [oval40Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 86 Drawing
        UIBezierPath* oval86Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(292, 103.5, 31, 17)];
        [color3 setFill];
        [oval86Path fill];

        ////// Oval 86 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval86Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval86Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval86Path.lineWidth = 1;
        [oval86Path stroke];


        //// Oval 87 Drawing
        UIBezierPath* oval87Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(234.5, 103.5, 36, 20)];
        [color3 setFill];
        [oval87Path fill];

        ////// Oval 87 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval87Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval87Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval87Path.lineWidth = 1;
        [oval87Path stroke];


        //// Oval 88 Drawing
        UIBezierPath* oval88Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(254, 97, 36, 21)];
        [color3 setFill];
        [oval88Path fill];

        ////// Oval 88 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval88Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval88Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval88Path.lineWidth = 1;
        [oval88Path stroke];


        //// Oval 89 Drawing
        UIBezierPath* oval89Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(270.5, 101.5, 30, 17)];
        [color3 setFill];
        [oval89Path fill];

        ////// Oval 89 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval89Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval89Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval89Path.lineWidth = 1;
        [oval89Path stroke];


        //// Oval 91 Drawing
        UIBezierPath* oval91Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(292, 95, 33, 19)];
        [color3 setFill];
        [oval91Path fill];

        ////// Oval 91 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval91Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval91Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval91Path.lineWidth = 1;
        [oval91Path stroke];


        //// Oval 92 Drawing
        UIBezierPath* oval92Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(311, 116, 28, 19)];
        [color3 setFill];
        [oval92Path fill];

        ////// Oval 92 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval92Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval92Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval92Path.lineWidth = 1;
        [oval92Path stroke];


        //// Oval 93 Drawing
        UIBezierPath* oval93Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(257.5, 108.5, 33, 22)];
        [color3 setFill];
        [oval93Path fill];

        ////// Oval 93 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval93Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval93Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval93Path.lineWidth = 1;
        [oval93Path stroke];


        //// Oval 94 Drawing
        UIBezierPath* oval94Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(275, 108.5, 34, 23)];
        [color3 setFill];
        [oval94Path fill];

        ////// Oval 94 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval94Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval94Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval94Path.lineWidth = 1;
        [oval94Path stroke];


        //// Oval 95 Drawing
        UIBezierPath* oval95Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(290.5, 114, 28, 19)];
        [color3 setFill];
        [oval95Path fill];

        ////// Oval 95 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval95Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval95Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval95Path.lineWidth = 1;
        [oval95Path stroke];


        //// Oval 99 Drawing
        UIBezierPath* oval99Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(327.5, 106, 37, 24)];
        [color3 setFill];
        [oval99Path fill];

        ////// Oval 99 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval99Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval99Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval99Path.lineWidth = 1;
        [oval99Path stroke];


        //// Oval 97 Drawing
        UIBezierPath* oval97Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(311, 106.5, 31, 21)];
        [color3 setFill];
        [oval97Path fill];

        ////// Oval 97 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval97Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval97Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval97Path.lineWidth = 1;
        [oval97Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 104 Drawing
        UIBezierPath* oval104Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(356, 90.5, 29.5, 22)];
        [color10 setFill];
        [oval104Path fill];

        ////// Oval 104 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval104Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval104Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval104Path.lineWidth = 1;
        [oval104Path stroke];


        //// Oval 105 Drawing
        UIBezierPath* oval105Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(302.5, 98.5, 32, 19)];
        [color10 setFill];
        [oval105Path fill];

        ////// Oval 105 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval105Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval105Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval105Path.lineWidth = 1;
        [oval105Path stroke];


        //// Oval 106 Drawing
        UIBezierPath* oval106Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(318.5, 90.5, 38, 24)];
        [color10 setFill];
        [oval106Path fill];

        ////// Oval 106 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval106Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval106Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval106Path.lineWidth = 1;
        [oval106Path stroke];


        //// Oval 107 Drawing
        UIBezierPath* oval107Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(334, 94, 36, 23)];
        [color10 setFill];
        [oval107Path fill];

        ////// Oval 107 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval107Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval107Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval107Path.lineWidth = 1;
        [oval107Path stroke];


        //// Oval 77 Drawing
        UIBezierPath* oval77Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(385, 94.5, 36, 24)];
        [color10 setFill];
        [oval77Path fill];

        ////// Oval 77 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval77Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval77Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval77Path.lineWidth = 1;
        [oval77Path stroke];


        //// Oval 78 Drawing
        UIBezierPath* oval78Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(361.5, 96.5, 36, 24)];
        [color10 setFill];
        [oval78Path fill];

        ////// Oval 78 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval78Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval78Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval78Path.lineWidth = 1;
        [oval78Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 142 Drawing
        UIBezierPath* oval142Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(277.5, 82.5, 37, 28)];
        [color3 setFill];
        [oval142Path fill];

        ////// Oval 142 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval142Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval142Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval142Path.lineWidth = 1;
        [oval142Path stroke];


        //// Oval 143 Drawing
        UIBezierPath* oval143Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(309.5, 81.5, 31, 24)];
        [color3 setFill];
        [oval143Path fill];

        ////// Oval 143 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval143Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval143Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval143Path.lineWidth = 1;
        [oval143Path stroke];


        //// Oval 144 Drawing
        UIBezierPath* oval144Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(259.5, 66.5, 38, 28)];
        [color3 setFill];
        [oval144Path fill];

        ////// Oval 144 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval144Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval144Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval144Path.lineWidth = 1;
        [oval144Path stroke];


        //// Oval 145 Drawing
        UIBezierPath* oval145Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(208, 81, 35, 26)];
        [color3 setFill];
        [oval145Path fill];

        ////// Oval 145 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval145Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval145Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval145Path.lineWidth = 1;
        [oval145Path stroke];


        //// Oval 146 Drawing
        UIBezierPath* oval146Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(225.5, 88.5, 40, 29)];
        [color3 setFill];
        [oval146Path fill];

        ////// Oval 146 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval146Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval146Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval146Path.lineWidth = 1;
        [oval146Path stroke];


        //// Oval 147 Drawing
        UIBezierPath* oval147Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(289.5, 92.5, 27, 21)];
        [color3 setFill];
        [oval147Path fill];

        ////// Oval 147 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval147Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval147Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval147Path.lineWidth = 1;
        [oval147Path stroke];


        //// Oval 148 Drawing
        UIBezierPath* oval148Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(287.5, 75.5, 27, 19)];
        [color3 setFill];
        [oval148Path fill];

        ////// Oval 148 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval148Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval148Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval148Path.lineWidth = 1;
        [oval148Path stroke];


        //// Oval 149 Drawing
        UIBezierPath* oval149Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(232.5, 68.5, 33, 26)];
        [color3 setFill];
        [oval149Path fill];

        ////// Oval 149 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval149Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval149Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval149Path.lineWidth = 1;
        [oval149Path stroke];


        //// Oval 150 Drawing
        UIBezierPath* oval150Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(243.5, 78.5, 35, 25)];
        [color3 setFill];
        [oval150Path fill];

        ////// Oval 150 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval150Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval150Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval150Path.lineWidth = 1;
        [oval150Path stroke];


        //// Oval 151 Drawing
        UIBezierPath* oval151Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(245.5, 91.5, 31, 23)];
        [color3 setFill];
        [oval151Path fill];

        ////// Oval 151 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval151Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval151Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval151Path.lineWidth = 1;
        [oval151Path stroke];


        //// Oval 152 Drawing
        UIBezierPath* oval152Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(265.5, 87.5, 32, 26)];
        [color3 setFill];
        [oval152Path fill];

        ////// Oval 152 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval152Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval152Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval152Path.lineWidth = 1;
        [oval152Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas69
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* dayTimeFog = [UIColor colorWithRed: 0.486 green: 0.532 blue: 0.579 alpha: 0.205];

    //// Shadow Declarations
    NSShadow* moonShadow = [[NSShadow alloc] init];
    [moonShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.63]];
    [moonShadow setShadowOffset: CGSizeMake(28.1, -14.1)];
    [moonShadow setShadowBlurRadius: 20];

    //// Group 12
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShadow.shadowOffset, moonShadow.shadowBlurRadius, [moonShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 74 Drawing
        UIBezierPath* oval74Path = [UIBezierPath bezierPath];
        [oval74Path moveToPoint: CGPointMake(262.17, 614.62)];
        [oval74Path addCurveToPoint: CGPointMake(262.17, 542.78) controlPoint1: CGPointMake(272.87, 602.42) controlPoint2: CGPointMake(262.17, 564.26)];
        [oval74Path addCurveToPoint: CGPointMake(196.26, 495.68) controlPoint1: CGPointMake(262.17, 497.39) controlPoint2: CGPointMake(233.61, 495.68)];
        [oval74Path addCurveToPoint: CGPointMake(135.27, 527.5) controlPoint1: CGPointMake(158.92, 495.68) controlPoint2: CGPointMake(135.27, 482.11)];
        [oval74Path addCurveToPoint: CGPointMake(135.27, 595.16) controlPoint1: CGPointMake(135.27, 555.44) controlPoint2: CGPointMake(120.93, 556.58)];
        [oval74Path addCurveToPoint: CGPointMake(196.26, 614.62) controlPoint1: CGPointMake(144.22, 619.24) controlPoint2: CGPointMake(181.92, 614.62)];
        [oval74Path addCurveToPoint: CGPointMake(262.17, 614.62) controlPoint1: CGPointMake(215.93, 614.62) controlPoint2: CGPointMake(250.26, 628.2)];
        [oval74Path closePath];
        [dayTimeFog setFill];
        [oval74Path fill];


        //// Oval 68 Drawing
        UIBezierPath* oval68Path = [UIBezierPath bezierPath];
        [oval68Path moveToPoint: CGPointMake(181.47, 724.98)];
        [oval68Path addCurveToPoint: CGPointMake(72.89, 597.62) controlPoint1: CGPointMake(181.47, 678.09) controlPoint2: CGPointMake(112.99, 597.62)];
        [oval68Path addCurveToPoint: CGPointMake(12.07, 598.36) controlPoint1: CGPointMake(32.79, 597.62) controlPoint2: CGPointMake(12.07, 551.47)];
        [oval68Path addCurveToPoint: CGPointMake(5.7, 724.98) controlPoint1: CGPointMake(12.07, 627.24) controlPoint2: CGPointMake(-9.7, 685.12)];
        [oval68Path addCurveToPoint: CGPointMake(73.21, 748.81) controlPoint1: CGPointMake(15.31, 749.85) controlPoint2: CGPointMake(57.8, 748.81)];
        [oval68Path addCurveToPoint: CGPointMake(181.47, 724.98) controlPoint1: CGPointMake(113.31, 748.81) controlPoint2: CGPointMake(181.47, 771.87)];
        [oval68Path closePath];
        [dayTimeFog setFill];
        [oval68Path fill];


        //// Oval 71 Drawing
        UIBezierPath* oval71Path = [UIBezierPath bezierPath];
        [oval71Path moveToPoint: CGPointMake(449, 544.84)];
        [oval71Path addCurveToPoint: CGPointMake(404.39, 483.24) controlPoint1: CGPointMake(449, 489.6) controlPoint2: CGPointMake(442.73, 483.24)];
        [oval71Path addCurveToPoint: CGPointMake(341.78, 521.97) controlPoint1: CGPointMake(366.06, 483.24) controlPoint2: CGPointMake(341.78, 466.73)];
        [oval71Path addCurveToPoint: CGPointMake(356.3, 591.16) controlPoint1: CGPointMake(341.78, 555.98) controlPoint2: CGPointMake(341.58, 544.2)];
        [oval71Path addCurveToPoint: CGPointMake(404.39, 628.01) controlPoint1: CGPointMake(365.49, 620.46) controlPoint2: CGPointMake(389.67, 628.01)];
        [oval71Path addCurveToPoint: CGPointMake(449, 544.84) controlPoint1: CGPointMake(442.73, 628.01) controlPoint2: CGPointMake(449, 600.08)];
        [oval71Path closePath];
        [dayTimeFog setFill];
        [oval71Path fill];


        //// Oval 23 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 318.25, 682.42);
        CGContextRotateCTM(context, -87.63 * M_PI / 180);

        UIBezierPath* oval23Path = [UIBezierPath bezierPath];
        [oval23Path moveToPoint: CGPointMake(87.56, 80.64)];
        [oval23Path addCurveToPoint: CGPointMake(69.44, -11.32) controlPoint1: CGPointMake(98.11, 53.75) controlPoint2: CGPointMake(69.44, 10.13)];
        [oval23Path addCurveToPoint: CGPointMake(40.96, -123.2) controlPoint1: CGPointMake(69.44, -48.35) controlPoint2: CGPointMake(70.23, -123.2)];
        [oval23Path addCurveToPoint: CGPointMake(-19.23, -104.81) controlPoint1: CGPointMake(11.68, -123.2) controlPoint2: CGPointMake(-19.23, -141.84)];
        [oval23Path addCurveToPoint: CGPointMake(-45.88, -6.36) controlPoint1: CGPointMake(-19.23, -82.01) controlPoint2: CGPointMake(-49.76, -50.81)];
        [oval23Path addCurveToPoint: CGPointMake(-11.93, 64.3) controlPoint1: CGPointMake(-43.46, 21.37) controlPoint2: CGPointMake(-23.18, 64.3)];
        [oval23Path addCurveToPoint: CGPointMake(87.56, 80.64) controlPoint1: CGPointMake(0.38, 64.3) controlPoint2: CGPointMake(79.89, 100.16)];
        [oval23Path closePath];
        [dayTimeFog setFill];
        [oval23Path fill];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas70
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* dayTimeFog = [UIColor colorWithRed: 0.486 green: 0.532 blue: 0.579 alpha: 0.205];

    //// Shadow Declarations
    NSShadow* moonShadow = [[NSShadow alloc] init];
    [moonShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.63]];
    [moonShadow setShadowOffset: CGSizeMake(28.1, -14.1)];
    [moonShadow setShadowBlurRadius: 20];

    //// Group 12
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShadow.shadowOffset, moonShadow.shadowBlurRadius, [moonShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 54 Drawing
        UIBezierPath* oval54Path = [UIBezierPath bezierPath];
        [oval54Path moveToPoint: CGPointMake(7.85, 533.21)];
        [oval54Path addCurveToPoint: CGPointMake(83.02, 498.35) controlPoint1: CGPointMake(7.85, 503.35) controlPoint2: CGPointMake(35.45, 498.35)];
        [oval54Path addCurveToPoint: CGPointMake(155.93, 533.21) controlPoint1: CGPointMake(130.58, 498.35) controlPoint2: CGPointMake(155.93, 503.35)];
        [oval54Path addCurveToPoint: CGPointMake(106.46, 575.01) controlPoint1: CGPointMake(155.93, 551.59) controlPoint2: CGPointMake(124.72, 549.63)];
        [oval54Path addCurveToPoint: CGPointMake(83.4, 629) controlPoint1: CGPointMake(95.06, 590.85) controlPoint2: CGPointMake(101.68, 629)];
        [oval54Path addCurveToPoint: CGPointMake(7.85, 533.21) controlPoint1: CGPointMake(35.84, 629) controlPoint2: CGPointMake(7.85, 563.06)];
        [oval54Path closePath];
        [dayTimeFog setFill];
        [oval54Path fill];


        //// Oval 70 Drawing
        UIBezierPath* oval70Path = [UIBezierPath bezierPath];
        [oval70Path moveToPoint: CGPointMake(85.61, 698.27)];
        [oval70Path addCurveToPoint: CGPointMake(49.91, 654.14) controlPoint1: CGPointMake(85.61, 658.7) controlPoint2: CGPointMake(80.58, 654.14)];
        [oval70Path addCurveToPoint: CGPointMake(-0.2, 681.88) controlPoint1: CGPointMake(19.23, 654.14) controlPoint2: CGPointMake(-0.2, 642.31)];
        [oval70Path addCurveToPoint: CGPointMake(11.41, 731.45) controlPoint1: CGPointMake(-0.2, 706.25) controlPoint2: CGPointMake(-0.37, 697.81)];
        [oval70Path addCurveToPoint: CGPointMake(49.91, 757.85) controlPoint1: CGPointMake(18.77, 752.45) controlPoint2: CGPointMake(38.12, 757.85)];
        [oval70Path addCurveToPoint: CGPointMake(85.61, 698.27) controlPoint1: CGPointMake(80.58, 757.85) controlPoint2: CGPointMake(85.61, 737.84)];
        [oval70Path closePath];
        [dayTimeFog setFill];
        [oval70Path fill];


        //// Oval 72 Drawing
        UIBezierPath* oval72Path = [UIBezierPath bezierPath];
        [oval72Path moveToPoint: CGPointMake(430.6, 678.16)];
        [oval72Path addCurveToPoint: CGPointMake(389.02, 584.39) controlPoint1: CGPointMake(430.6, 629.64) controlPoint2: CGPointMake(424.76, 584.39)];
        [oval72Path addCurveToPoint: CGPointMake(326.21, 655.89) controlPoint1: CGPointMake(353.29, 584.39) controlPoint2: CGPointMake(326.21, 607.37)];
        [oval72Path addCurveToPoint: CGPointMake(253.67, 719.94) controlPoint1: CGPointMake(326.21, 685.77) controlPoint2: CGPointMake(239.95, 678.69)];
        [oval72Path addCurveToPoint: CGPointMake(389.01, 751.22) controlPoint1: CGPointMake(262.24, 745.68) controlPoint2: CGPointMake(375.28, 751.22)];
        [oval72Path addCurveToPoint: CGPointMake(430.6, 678.16) controlPoint1: CGPointMake(424.75, 751.22) controlPoint2: CGPointMake(430.6, 726.69)];
        [oval72Path closePath];
        [dayTimeFog setFill];
        [oval72Path fill];


        //// Oval 69 Drawing
        UIBezierPath* oval69Path = [UIBezierPath bezierPath];
        [oval69Path moveToPoint: CGPointMake(373.44, 523.99)];
        [oval69Path addCurveToPoint: CGPointMake(304.73, 523.31) controlPoint1: CGPointMake(373.44, 481.66) controlPoint2: CGPointMake(347.78, 523.31)];
        [oval69Path addCurveToPoint: CGPointMake(222, 560.29) controlPoint1: CGPointMake(261.68, 523.31) controlPoint2: CGPointMake(222, 517.96)];
        [oval69Path addCurveToPoint: CGPointMake(250.72, 606) controlPoint1: CGPointMake(222, 586.35) controlPoint2: CGPointMake(234.18, 570.02)];
        [oval69Path addCurveToPoint: CGPointMake(304.73, 634.23) controlPoint1: CGPointMake(261.03, 628.45) controlPoint2: CGPointMake(288.19, 634.23)];
        [oval69Path addCurveToPoint: CGPointMake(373.44, 523.99) controlPoint1: CGPointMake(347.78, 634.23) controlPoint2: CGPointMake(373.44, 566.31)];
        [oval69Path closePath];
        [dayTimeFog setFill];
        [oval69Path fill];


        //// Oval 56 Drawing
        UIBezierPath* oval56Path = [UIBezierPath bezierPath];
        [oval56Path moveToPoint: CGPointMake(258.1, 611.25)];
        [oval56Path addCurveToPoint: CGPointMake(258.1, 727.96) controlPoint1: CGPointMake(275.07, 634.21) controlPoint2: CGPointMake(258.1, 709.64)];
        [oval56Path addCurveToPoint: CGPointMake(183.15, 744.77) controlPoint1: CGPointMake(258.1, 759.59) controlPoint2: CGPointMake(230.23, 744.77)];
        [oval56Path addCurveToPoint: CGPointMake(111.52, 727.96) controlPoint1: CGPointMake(136.06, 744.77) controlPoint2: CGPointMake(111.52, 759.59)];
        [oval56Path addCurveToPoint: CGPointMake(125.89, 649.21) controlPoint1: CGPointMake(111.52, 708.49) controlPoint2: CGPointMake(107.81, 676.1)];
        [oval56Path addCurveToPoint: CGPointMake(183.31, 626.49) controlPoint1: CGPointMake(137.18, 632.43) controlPoint2: CGPointMake(165.22, 626.49)];
        [oval56Path addCurveToPoint: CGPointMake(258.1, 611.25) controlPoint1: CGPointMake(203.12, 626.49) controlPoint2: CGPointMake(245.77, 594.57)];
        [oval56Path closePath];
        [dayTimeFog setFill];
        [oval56Path fill];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas71
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* dayTimeFog = [UIColor colorWithRed: 0.486 green: 0.532 blue: 0.579 alpha: 0.205];

    //// Shadow Declarations
    NSShadow* moonShadow = [[NSShadow alloc] init];
    [moonShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.63]];
    [moonShadow setShadowOffset: CGSizeMake(28.1, -14.1)];
    [moonShadow setShadowBlurRadius: 20];

    //// Group 12
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShadow.shadowOffset, moonShadow.shadowBlurRadius, [moonShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 74 Drawing
        UIBezierPath* oval74Path = [UIBezierPath bezierPath];
        [oval74Path moveToPoint: CGPointMake(115.34, 612.28)];
        [oval74Path addCurveToPoint: CGPointMake(115.34, 651.35) controlPoint1: CGPointMake(98.83, 618.92) controlPoint2: CGPointMake(115.34, 639.67)];
        [oval74Path addCurveToPoint: CGPointMake(217.04, 676.97) controlPoint1: CGPointMake(115.34, 676.03) controlPoint2: CGPointMake(159.42, 676.97)];
        [oval74Path addCurveToPoint: CGPointMake(311, 677) controlPoint1: CGPointMake(274.66, 676.97) controlPoint2: CGPointMake(311, 701.68)];
        [oval74Path addCurveToPoint: CGPointMake(311.16, 622.86) controlPoint1: CGPointMake(311, 661.8) controlPoint2: CGPointMake(333.29, 643.85)];
        [oval74Path addCurveToPoint: CGPointMake(217.04, 612.28) controlPoint1: CGPointMake(297.35, 609.77) controlPoint2: CGPointMake(239.18, 612.28)];
        [oval74Path addCurveToPoint: CGPointMake(115.34, 612.28) controlPoint1: CGPointMake(186.69, 612.28) controlPoint2: CGPointMake(133.71, 604.9)];
        [oval74Path closePath];
        [dayTimeFog setFill];
        [oval74Path fill];


        //// Oval 71 Drawing
        UIBezierPath* oval71Path = [UIBezierPath bezierPath];
        [oval71Path moveToPoint: CGPointMake(1, 709.02)];
        [oval71Path addCurveToPoint: CGPointMake(95.02, 740.88) controlPoint1: CGPointMake(1, 737.59) controlPoint2: CGPointMake(14.23, 740.88)];
        [oval71Path addCurveToPoint: CGPointMake(227, 720.85) controlPoint1: CGPointMake(175.82, 740.88) controlPoint2: CGPointMake(227, 749.42)];
        [oval71Path addCurveToPoint: CGPointMake(196.4, 685.06) controlPoint1: CGPointMake(227, 703.25) controlPoint2: CGPointMake(227.43, 709.35)];
        [oval71Path addCurveToPoint: CGPointMake(95.02, 666) controlPoint1: CGPointMake(177.04, 669.9) controlPoint2: CGPointMake(126.07, 666)];
        [oval71Path addCurveToPoint: CGPointMake(1, 709.02) controlPoint1: CGPointMake(14.23, 666) controlPoint2: CGPointMake(1, 680.45)];
        [oval71Path closePath];
        [dayTimeFog setFill];
        [oval71Path fill];


        //// Oval 23 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 138.35, 584.92);
        CGContextRotateCTM(context, -87.63 * M_PI / 180);

        UIBezierPath* oval23Path = [UIBezierPath bezierPath];
        [oval23Path moveToPoint: CGPointMake(-43.61, -122.1)];
        [oval23Path addCurveToPoint: CGPointMake(-28.76, -30.15) controlPoint1: CGPointMake(-52.26, -95.22) controlPoint2: CGPointMake(-28.76, -51.6)];
        [oval23Path addCurveToPoint: CGPointMake(-5.43, 81.73) controlPoint1: CGPointMake(-28.76, 6.88) controlPoint2: CGPointMake(-29.42, 81.73)];
        [oval23Path addCurveToPoint: CGPointMake(43.9, 63.34) controlPoint1: CGPointMake(18.56, 81.73) controlPoint2: CGPointMake(43.9, 100.37)];
        [oval23Path addCurveToPoint: CGPointMake(65.73, -35.11) controlPoint1: CGPointMake(43.9, 40.54) controlPoint2: CGPointMake(68.91, 9.34)];
        [oval23Path addCurveToPoint: CGPointMake(37.91, -105.77) controlPoint1: CGPointMake(63.74, -62.84) controlPoint2: CGPointMake(47.13, -105.77)];
        [oval23Path addCurveToPoint: CGPointMake(-43.61, -122.1) controlPoint1: CGPointMake(27.82, -105.77) controlPoint2: CGPointMake(-37.33, -141.63)];
        [oval23Path closePath];
        [dayTimeFog setFill];
        [oval23Path fill];

        CGContextRestoreGState(context);


        //// Oval Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 350.11, 672.53);
        CGContextRotateCTM(context, -86.56 * M_PI / 180);

        UIBezierPath* ovalPath = [UIBezierPath bezierPath];
        [ovalPath moveToPoint: CGPointMake(-53.61, 9.63)];
        [ovalPath addCurveToPoint: CGPointMake(-9, 71.23) controlPoint1: CGPointMake(-53.61, 64.87) controlPoint2: CGPointMake(-47.33, 71.23)];
        [ovalPath addCurveToPoint: CGPointMake(53.61, 32.5) controlPoint1: CGPointMake(29.33, 71.23) controlPoint2: CGPointMake(53.61, 87.74)];
        [ovalPath addCurveToPoint: CGPointMake(39.09, -36.69) controlPoint1: CGPointMake(53.61, -1.51) controlPoint2: CGPointMake(53.81, 10.27)];
        [ovalPath addCurveToPoint: CGPointMake(-9, -73.54) controlPoint1: CGPointMake(29.91, -65.99) controlPoint2: CGPointMake(5.73, -73.54)];
        [ovalPath addCurveToPoint: CGPointMake(-53.61, 9.63) controlPoint1: CGPointMake(-47.33, -73.54) controlPoint2: CGPointMake(-53.61, -45.61)];
        [ovalPath closePath];
        [dayTimeFog setFill];
        [ovalPath fill];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPath];
    [oval2Path moveToPoint: CGPointMake(132.21, 587.39)];
    [oval2Path addCurveToPoint: CGPointMake(132.21, 500.16) controlPoint1: CGPointMake(109.23, 570.23) controlPoint2: CGPointMake(132.21, 513.85)];
    [oval2Path addCurveToPoint: CGPointMake(233.64, 487.59) controlPoint1: CGPointMake(132.21, 476.51) controlPoint2: CGPointMake(169.92, 487.59)];
    [oval2Path addCurveToPoint: CGPointMake(330.58, 500.16) controlPoint1: CGPointMake(297.36, 487.59) controlPoint2: CGPointMake(330.58, 476.51)];
    [oval2Path addCurveToPoint: CGPointMake(311.12, 559.02) controlPoint1: CGPointMake(330.58, 514.71) controlPoint2: CGPointMake(335.59, 538.92)];
    [oval2Path addCurveToPoint: CGPointMake(233.42, 576.01) controlPoint1: CGPointMake(295.85, 571.56) controlPoint2: CGPointMake(257.9, 576.01)];
    [oval2Path addCurveToPoint: CGPointMake(132.21, 587.39) controlPoint1: CGPointMake(206.62, 576.01) controlPoint2: CGPointMake(148.89, 599.86)];
    [oval2Path closePath];
    [dayTimeFog setFill];
    [oval2Path fill];
}

+ (void)drawCanvas72
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* dayTimeFog = [UIColor colorWithRed: 0.486 green: 0.532 blue: 0.579 alpha: 0.205];

    //// Shadow Declarations
    NSShadow* moonShadow = [[NSShadow alloc] init];
    [moonShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.63]];
    [moonShadow setShadowOffset: CGSizeMake(28.1, -14.1)];
    [moonShadow setShadowBlurRadius: 20];

    //// Group 12
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, moonShadow.shadowOffset, moonShadow.shadowBlurRadius, [moonShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 54 Drawing
        UIBezierPath* oval54Path = [UIBezierPath bezierPath];
        [oval54Path moveToPoint: CGPointMake(379, 606.39)];
        [oval54Path addCurveToPoint: CGPointMake(290.71, 628) controlPoint1: CGPointMake(379, 624.9) controlPoint2: CGPointMake(346.58, 628)];
        [oval54Path addCurveToPoint: CGPointMake(205.07, 606.39) controlPoint1: CGPointMake(234.84, 628) controlPoint2: CGPointMake(205.07, 624.9)];
        [oval54Path addCurveToPoint: CGPointMake(263.18, 580.47) controlPoint1: CGPointMake(205.07, 594.99) controlPoint2: CGPointMake(241.73, 596.21)];
        [oval54Path addCurveToPoint: CGPointMake(290.26, 547) controlPoint1: CGPointMake(276.57, 570.65) controlPoint2: CGPointMake(268.79, 547)];
        [oval54Path addCurveToPoint: CGPointMake(379, 606.39) controlPoint1: CGPointMake(346.13, 547) controlPoint2: CGPointMake(379, 587.88)];
        [oval54Path closePath];
        [dayTimeFog setFill];
        [oval54Path fill];


        //// Oval 70 Drawing
        UIBezierPath* oval70Path = [UIBezierPath bezierPath];
        [oval70Path moveToPoint: CGPointMake(344.39, 524.73)];
        [oval70Path addCurveToPoint: CGPointMake(380.09, 568.86) controlPoint1: CGPointMake(344.39, 564.3) controlPoint2: CGPointMake(349.42, 568.86)];
        [oval70Path addCurveToPoint: CGPointMake(430.2, 541.12) controlPoint1: CGPointMake(410.77, 568.86) controlPoint2: CGPointMake(430.2, 580.69)];
        [oval70Path addCurveToPoint: CGPointMake(418.59, 491.55) controlPoint1: CGPointMake(430.2, 516.75) controlPoint2: CGPointMake(430.37, 525.19)];
        [oval70Path addCurveToPoint: CGPointMake(380.09, 465.15) controlPoint1: CGPointMake(411.23, 470.55) controlPoint2: CGPointMake(391.88, 465.15)];
        [oval70Path addCurveToPoint: CGPointMake(344.39, 524.73) controlPoint1: CGPointMake(349.42, 465.15) controlPoint2: CGPointMake(344.39, 485.16)];
        [oval70Path closePath];
        [dayTimeFog setFill];
        [oval70Path fill];


        //// Oval 72 Drawing
        UIBezierPath* oval72Path = [UIBezierPath bezierPath];
        [oval72Path moveToPoint: CGPointMake(-0.6, 525.14)];
        [oval72Path addCurveToPoint: CGPointMake(38.63, 592) controlPoint1: CGPointMake(-0.6, 559.74) controlPoint2: CGPointMake(4.91, 592)];
        [oval72Path addCurveToPoint: CGPointMake(129.24, 543.79) controlPoint1: CGPointMake(72.36, 592) controlPoint2: CGPointMake(129.24, 578.39)];
        [oval72Path addCurveToPoint: CGPointMake(138, 484) controlPoint1: CGPointMake(129.24, 522.49) controlPoint2: CGPointMake(150.95, 513.41)];
        [oval72Path addCurveToPoint: CGPointMake(38.64, 473.04) controlPoint1: CGPointMake(129.92, 465.64) controlPoint2: CGPointMake(51.6, 473.04)];
        [oval72Path addCurveToPoint: CGPointMake(-0.6, 525.14) controlPoint1: CGPointMake(4.92, 473.04) controlPoint2: CGPointMake(-0.6, 490.53)];
        [oval72Path closePath];
        [dayTimeFog setFill];
        [oval72Path fill];


        //// Oval 69 Drawing
        UIBezierPath* oval69Path = [UIBezierPath bezierPath];
        [oval69Path moveToPoint: CGPointMake(27, 654)];
        [oval69Path addCurveToPoint: CGPointMake(109.95, 685.52) controlPoint1: CGPointMake(27, 689.77) controlPoint2: CGPointMake(60.49, 685.52)];
        [oval69Path addCurveToPoint: CGPointMake(205, 654.27) controlPoint1: CGPointMake(159.41, 685.52) controlPoint2: CGPointMake(205, 690.04)];
        [oval69Path addCurveToPoint: CGPointMake(172.01, 615.63) controlPoint1: CGPointMake(205, 632.24) controlPoint2: CGPointMake(191, 646.04)];
        [oval69Path addCurveToPoint: CGPointMake(109.95, 591.77) controlPoint1: CGPointMake(160.15, 596.66) controlPoint2: CGPointMake(128.95, 591.77)];
        [oval69Path addCurveToPoint: CGPointMake(27, 654) controlPoint1: CGPointMake(60.49, 591.77) controlPoint2: CGPointMake(27, 618.23)];
        [oval69Path closePath];
        [dayTimeFog setFill];
        [oval69Path fill];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas73
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* daySnowGradientColor = [UIColor colorWithRed: 0.167 green: 0.5 blue: 0.763 alpha: 1];

    //// Gradient Declarations
    CGFloat daySnowGradientLocations[] = {0, 0.62, 1};
    CGGradientRef daySnowGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)daySnowGradientColor.CGColor, (id)[daySnowGradientColor blendedColorWithFraction: 0.5 ofColor: UIColor.whiteColor].CGColor, (id)UIColor.whiteColor.CGColor], daySnowGradientLocations);

    //// Group 7
    {
        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 414, 736)];
        CGContextSaveGState(context);
        [rectanglePath addClip];
        CGContextDrawLinearGradient(context, daySnowGradient, CGPointMake(207, -0), CGPointMake(207, 736), 0);
        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(daySnowGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawCanvas74
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(165.5, 98, 30, 24)];
        [color3 setFill];
        [ovalPath fill];

        ////// Oval Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(ovalPath.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [ovalPath fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        ovalPath.lineWidth = 1;
        [ovalPath stroke];


        //// Oval 2 Drawing
        UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(105.5, 98, 34, 27)];
        [color3 setFill];
        [oval2Path fill];

        ////// Oval 2 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval2Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval2Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Oval 3 Drawing
        UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(87.5, 108, 28, 22)];
        [color3 setFill];
        [oval3Path fill];

        ////// Oval 3 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval3Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval3Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval3Path.lineWidth = 1;
        [oval3Path stroke];


        //// Oval 4 Drawing
        UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(105.5, 98, 34, 27)];
        [color3 setFill];
        [oval4Path fill];

        ////// Oval 4 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval4Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval4Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval4Path.lineWidth = 1;
        [oval4Path stroke];


        //// Oval 5 Drawing
        UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(130.5, 98, 35, 27)];
        [color3 setFill];
        [oval5Path fill];

        ////// Oval 5 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval5Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval5Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval5Path.lineWidth = 1;
        [oval5Path stroke];


        //// Oval 6 Drawing
        UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(175, 105.5, 36, 27)];
        [color3 setFill];
        [oval6Path fill];

        ////// Oval 6 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval6Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval6Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval6Path.lineWidth = 1;
        [oval6Path stroke];


        //// Oval 7 Drawing
        UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(156.5, 108, 36, 28)];
        [color3 setFill];
        [oval7Path fill];

        ////// Oval 7 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval7Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval7Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval7Path.lineWidth = 1;
        [oval7Path stroke];


        //// Oval 8 Drawing
        UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(149, 108.5, 28, 22)];
        [color3 setFill];
        [oval8Path fill];

        ////// Oval 8 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval8Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval8Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval8Path.lineWidth = 1;
        [oval8Path stroke];


        //// Oval 9 Drawing
        UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(109.5, 113, 25, 19)];
        [color3 setFill];
        [oval9Path fill];

        ////// Oval 9 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval9Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval9Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval9Path.lineWidth = 1;
        [oval9Path stroke];


        //// Oval 10 Drawing
        UIBezierPath* oval10Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(126.5, 114, 30, 24)];
        [color3 setFill];
        [oval10Path fill];

        ////// Oval 10 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval10Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval10Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval10Path.lineWidth = 1;
        [oval10Path stroke];


        //// Oval 11 Drawing
        UIBezierPath* oval11Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(59.5, 96, 30, 24)];
        [color3 setFill];
        [oval11Path fill];

        ////// Oval 11 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval11Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval11Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval11Path.lineWidth = 1;
        [oval11Path stroke];


        //// Oval 12 Drawing
        UIBezierPath* oval12Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.5, 96, 34, 27)];
        [color3 setFill];
        [oval12Path fill];

        ////// Oval 12 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval12Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval12Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval12Path.lineWidth = 1;
        [oval12Path stroke];


        //// Oval 13 Drawing
        UIBezierPath* oval13Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-18.5, 106, 28, 22)];
        [color3 setFill];
        [oval13Path fill];

        ////// Oval 13 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval13Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval13Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval13Path.lineWidth = 1;
        [oval13Path stroke];


        //// Oval 14 Drawing
        UIBezierPath* oval14Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-0.5, 96, 34, 27)];
        [color3 setFill];
        [oval14Path fill];

        ////// Oval 14 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval14Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval14Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval14Path.lineWidth = 1;
        [oval14Path stroke];


        //// Oval 15 Drawing
        UIBezierPath* oval15Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(24.5, 96, 35, 27)];
        [color3 setFill];
        [oval15Path fill];

        ////// Oval 15 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval15Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval15Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval15Path.lineWidth = 1;
        [oval15Path stroke];


        //// Oval 16 Drawing
        UIBezierPath* oval16Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(69, 103.5, 36, 27)];
        [color3 setFill];
        [oval16Path fill];

        ////// Oval 16 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval16Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval16Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval16Path.lineWidth = 1;
        [oval16Path stroke];


        //// Oval 17 Drawing
        UIBezierPath* oval17Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(50.5, 106, 36, 28)];
        [color3 setFill];
        [oval17Path fill];

        ////// Oval 17 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval17Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval17Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval17Path.lineWidth = 1;
        [oval17Path stroke];


        //// Oval 18 Drawing
        UIBezierPath* oval18Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(43, 106.5, 28, 22)];
        [color3 setFill];
        [oval18Path fill];

        ////// Oval 18 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval18Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval18Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval18Path.lineWidth = 1;
        [oval18Path stroke];


        //// Oval 19 Drawing
        UIBezierPath* oval19Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(3.5, 111, 25, 19)];
        [color3 setFill];
        [oval19Path fill];

        ////// Oval 19 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval19Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval19Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval19Path.lineWidth = 1;
        [oval19Path stroke];


        //// Oval 20 Drawing
        UIBezierPath* oval20Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(20.5, 112, 30, 24)];
        [color3 setFill];
        [oval20Path fill];

        ////// Oval 20 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval20Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval20Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval20Path.lineWidth = 1;
        [oval20Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 42 Drawing
        UIBezierPath* oval42Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(98.5, 69.5, 25, 16.5)];
        [color10 setFill];
        [oval42Path fill];

        ////// Oval 42 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval42Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval42Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval42Path.lineWidth = 1;
        [oval42Path stroke];


        //// Oval 41 Drawing
        UIBezierPath* oval41Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(77.5, 68.5, 26, 16)];
        [color10 setFill];
        [oval41Path fill];

        ////// Oval 41 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval41Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval41Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval41Path.lineWidth = 1;
        [oval41Path stroke];


        //// Oval 118 Drawing
        UIBezierPath* oval118Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(114, 75.5, 30, 23)];
        [color10 setFill];
        [oval118Path fill];

        ////// Oval 118 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval118Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval118Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval118Path.lineWidth = 1;
        [oval118Path stroke];


        //// Oval 119 Drawing
        UIBezierPath* oval119Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(54, 75.5, 34, 25)];
        [color10 setFill];
        [oval119Path fill];

        ////// Oval 119 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval119Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval119Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval119Path.lineWidth = 1;
        [oval119Path stroke];


        //// Oval 120 Drawing
        UIBezierPath* oval120Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(36, 84.5, 28, 21)];
        [color10 setFill];
        [oval120Path fill];

        ////// Oval 120 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval120Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval120Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval120Path.lineWidth = 1;
        [oval120Path stroke];


        //// Oval 121 Drawing
        UIBezierPath* oval121Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(54, 75.5, 34, 25)];
        [color10 setFill];
        [oval121Path fill];

        ////// Oval 121 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval121Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval121Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval121Path.lineWidth = 1;
        [oval121Path stroke];


        //// Oval 122 Drawing
        UIBezierPath* oval122Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(79, 75.5, 35, 25)];
        [color10 setFill];
        [oval122Path fill];

        ////// Oval 122 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval122Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval122Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval122Path.lineWidth = 1;
        [oval122Path stroke];


        //// Oval 123 Drawing
        UIBezierPath* oval123Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(123.5, 83, 36, 25)];
        [color10 setFill];
        [oval123Path fill];

        ////// Oval 123 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval123Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval123Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval123Path.lineWidth = 1;
        [oval123Path stroke];


        //// Oval 124 Drawing
        UIBezierPath* oval124Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(105, 84.5, 36, 27)];
        [color10 setFill];
        [oval124Path fill];

        ////// Oval 124 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval124Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval124Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval124Path.lineWidth = 1;
        [oval124Path stroke];


        //// Oval 125 Drawing
        UIBezierPath* oval125Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(97.5, 85, 28, 21)];
        [color10 setFill];
        [oval125Path fill];

        ////// Oval 125 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval125Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval125Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval125Path.lineWidth = 1;
        [oval125Path stroke];


        //// Oval 126 Drawing
        UIBezierPath* oval126Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(58, 89.5, 25, 18)];
        [color10 setFill];
        [oval126Path fill];

        ////// Oval 126 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval126Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval126Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval126Path.lineWidth = 1;
        [oval126Path stroke];


        //// Oval 127 Drawing
        UIBezierPath* oval127Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(75, 90.5, 30, 23)];
        [color10 setFill];
        [oval127Path fill];

        ////// Oval 127 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval127Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval127Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval127Path.lineWidth = 1;
        [oval127Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 43 Drawing
        UIBezierPath* oval43Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(32.5, 154, 32, 25)];
        [color3 setFill];
        [oval43Path fill];

        ////// Oval 43 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval43Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval43Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval43Path.lineWidth = 1;
        [oval43Path stroke];


        //// Oval 44 Drawing
        UIBezierPath* oval44Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(91.5, 154, 36, 27)];
        [color3 setFill];
        [oval44Path fill];

        ////// Oval 44 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval44Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval44Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval44Path.lineWidth = 1;
        [oval44Path stroke];


        //// Oval 45 Drawing
        UIBezierPath* oval45Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(116.5, 165, 30, 22)];
        [color3 setFill];
        [oval45Path fill];

        ////// Oval 45 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval45Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval45Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval45Path.lineWidth = 1;
        [oval45Path stroke];


        //// Oval 46 Drawing
        UIBezierPath* oval46Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(91.5, 154, 36, 27)];
        [color3 setFill];
        [oval46Path fill];

        ////// Oval 46 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval46Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval46Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval46Path.lineWidth = 1;
        [oval46Path stroke];


        //// Oval 47 Drawing
        UIBezierPath* oval47Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(64.5, 154, 37, 27)];
        [color3 setFill];
        [oval47Path fill];

        ////// Oval 47 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval47Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval47Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval47Path.lineWidth = 1;
        [oval47Path stroke];


        //// Oval 48 Drawing
        UIBezierPath* oval48Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(16, 161.5, 38, 29)];
        [color3 setFill];
        [oval48Path fill];

        ////// Oval 48 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval48Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval48Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval48Path.lineWidth = 1;
        [oval48Path stroke];


        //// Oval 49 Drawing
        UIBezierPath* oval49Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(35.5, 165, 38, 27)];
        [color3 setFill];
        [oval49Path fill];

        ////// Oval 49 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval49Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval49Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval49Path.lineWidth = 1;
        [oval49Path stroke];


        //// Oval 50 Drawing
        UIBezierPath* oval50Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(52, 165.5, 30, 22)];
        [color3 setFill];
        [oval50Path fill];

        ////// Oval 50 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval50Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval50Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval50Path.lineWidth = 1;
        [oval50Path stroke];


        //// Oval 51 Drawing
        UIBezierPath* oval51Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(96.5, 169, 27, 21)];
        [color3 setFill];
        [oval51Path fill];

        ////// Oval 51 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval51Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval51Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval51Path.lineWidth = 1;
        [oval51Path stroke];


        //// Oval 52 Drawing
        UIBezierPath* oval52Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(73.5, 170, 32, 25)];
        [color3 setFill];
        [oval52Path fill];

        ////// Oval 52 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval52Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval52Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval52Path.lineWidth = 1;
        [oval52Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 58 Drawing
        UIBezierPath* oval58Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-10.5, 153.5, 40, 27)];
        [color10 setFill];
        [oval58Path fill];

        ////// Oval 58 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval58Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval58Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval58Path.lineWidth = 1;
        [oval58Path stroke];


        //// Oval 55 Drawing
        UIBezierPath* oval55Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(70.5, 150, 33, 22)];
        [color10 setFill];
        [oval55Path fill];

        ////// Oval 55 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval55Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval55Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval55Path.lineWidth = 1;
        [oval55Path stroke];


        //// Oval 59 Drawing
        UIBezierPath* oval59Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(5.5, 147.5, 43, 28)];
        [color10 setFill];
        [oval59Path fill];

        ////// Oval 59 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval59Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval59Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval59Path.lineWidth = 1;
        [oval59Path stroke];


        //// Oval 60 Drawing
        UIBezierPath* oval60Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(37.5, 147.5, 33, 22)];
        [color10 setFill];
        [oval60Path fill];

        ////// Oval 60 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval60Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval60Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval60Path.lineWidth = 1;
        [oval60Path stroke];


        //// Oval 62 Drawing
        UIBezierPath* oval62Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(22.5, 155, 35, 26)];
        [color10 setFill];
        [oval62Path fill];

        ////// Oval 62 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval62Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval62Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval62Path.lineWidth = 1;
        [oval62Path stroke];


        //// Oval 61 Drawing
        UIBezierPath* oval61Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(48.5, 154, 29, 22)];
        [color10 setFill];
        [oval61Path fill];

        ////// Oval 61 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval61Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval61Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval61Path.lineWidth = 1;
        [oval61Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawCanvas75
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.728 green: 0.728 blue: 0.728 alpha: 0.812];
    UIColor* color10 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.822];
    UIColor* shadowColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Shadow Declarations
    NSShadow* sunShineShadow = [[NSShadow alloc] init];
    [sunShineShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.5]];
    [sunShineShadow setShadowOffset: CGSizeMake(14.1, 16.1)];
    [sunShineShadow setShadowBlurRadius: 9];
    NSShadow* shadow = [[NSShadow alloc] init];
    [shadow setShadowColor: [shadowColor colorWithAlphaComponent: CGColorGetAlpha(shadowColor.CGColor) * 0.5]];
    [shadow setShadowOffset: CGSizeMake(0.1, -2.1)];
    [shadow setShadowBlurRadius: 3];

    //// Group 6
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 100 Drawing
        UIBezierPath* oval100Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(324, 113, 36, 27)];
        [color3 setFill];
        [oval100Path fill];

        ////// Oval 100 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval100Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval100Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval100Path.lineWidth = 1;
        [oval100Path stroke];


        //// Oval 98 Drawing
        UIBezierPath* oval98Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(362, 122.5, 30, 22)];
        [color3 setFill];
        [oval98Path fill];

        ////// Oval 98 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval98Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval98Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval98Path.lineWidth = 1;
        [oval98Path stroke];


        //// Oval 101 Drawing
        UIBezierPath* oval101Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(340.5, 119.5, 30, 23)];
        [color3 setFill];
        [oval101Path fill];

        ////// Oval 101 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval101Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval101Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval101Path.lineWidth = 1;
        [oval101Path stroke];


        //// Oval 102 Drawing
        UIBezierPath* oval102Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(387, 116, 27, 22)];
        [color3 setFill];
        [oval102Path fill];

        ////// Oval 102 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval102Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval102Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval102Path.lineWidth = 1;
        [oval102Path stroke];


        //// Oval 103 Drawing
        UIBezierPath* oval103Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(362, 111, 33, 24)];
        [color3 setFill];
        [oval103Path fill];

        ////// Oval 103 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval103Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval103Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval103Path.lineWidth = 1;
        [oval103Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 5
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 21 Drawing
        UIBezierPath* oval21Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(327, 149.5, 34, 24)];
        [color3 setFill];
        [oval21Path fill];

        ////// Oval 21 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval21Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval21Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval21Path.lineWidth = 1;
        [oval21Path stroke];


        //// Oval 25 Drawing
        UIBezierPath* oval25Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(287, 149.5, 40, 25)];
        [color3 setFill];
        [oval25Path fill];

        ////// Oval 25 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval25Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval25Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval25Path.lineWidth = 1;
        [oval25Path stroke];


        //// Oval 26 Drawing
        UIBezierPath* oval26Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(337.5, 157, 41, 28)];
        [color3 setFill];
        [oval26Path fill];

        ////// Oval 26 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval26Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval26Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval26Path.lineWidth = 1;
        [oval26Path stroke];


        //// Oval 27 Drawing
        UIBezierPath* oval27Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(316, 159.5, 41, 27)];
        [color3 setFill];
        [oval27Path fill];

        ////// Oval 27 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval27Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval27Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval27Path.lineWidth = 1;
        [oval27Path stroke];


        //// Oval 28 Drawing
        UIBezierPath* oval28Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(308.5, 177, 31, 22)];
        [color3 setFill];
        [oval28Path fill];

        ////// Oval 28 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval28Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval28Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval28Path.lineWidth = 1;
        [oval28Path stroke];


        //// Oval 128 Drawing
        UIBezierPath* oval128Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(374.5, 159.5, 29, 24)];
        [color3 setFill];
        [oval128Path fill];

        ////// Oval 128 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval128Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval128Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval128Path.lineWidth = 1;
        [oval128Path stroke];


        //// Oval 129 Drawing
        UIBezierPath* oval129Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(325.5, 170, 30, 24)];
        [color3 setFill];
        [oval129Path fill];

        ////// Oval 129 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval129Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval129Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval129Path.lineWidth = 1;
        [oval129Path stroke];


        //// Oval 130 Drawing
        UIBezierPath* oval130Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(364.5, 165, 35, 29)];
        [color3 setFill];
        [oval130Path fill];

        ////// Oval 130 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval130Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval130Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval130Path.lineWidth = 1;
        [oval130Path stroke];


        //// Oval 131 Drawing
        UIBezierPath* oval131Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(350, 167.5, 28.5, 26)];
        [color3 setFill];
        [oval131Path fill];

        ////// Oval 131 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval131Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval131Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval131Path.lineWidth = 1;
        [oval131Path stroke];


        //// Oval 138 Drawing
        UIBezierPath* oval138Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(219.5, 143.5, 36, 27)];
        [color3 setFill];
        [oval138Path fill];

        ////// Oval 138 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval138Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval138Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval138Path.lineWidth = 1;
        [oval138Path stroke];


        //// Oval 22 Drawing
        UIBezierPath* oval22Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(248, 151.5, 34, 25)];
        [color3 setFill];
        [oval22Path fill];

        ////// Oval 22 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval22Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval22Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval22Path.lineWidth = 1;
        [oval22Path stroke];


        //// Oval 24 Drawing
        UIBezierPath* oval24Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(287, 165.5, 34, 25)];
        [color3 setFill];
        [oval24Path fill];

        ////// Oval 24 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval24Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval24Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval24Path.lineWidth = 1;
        [oval24Path stroke];


        //// Oval 132 Drawing
        UIBezierPath* oval132Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(274, 160, 30, 24)];
        [color3 setFill];
        [oval132Path fill];

        ////// Oval 132 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval132Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval132Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval132Path.lineWidth = 1;
        [oval132Path stroke];


        //// Oval 133 Drawing
        UIBezierPath* oval133Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(198, 160, 34, 25)];
        [color3 setFill];
        [oval133Path fill];

        ////// Oval 133 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval133Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval133Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval133Path.lineWidth = 1;
        [oval133Path stroke];


        //// Oval 134 Drawing
        UIBezierPath* oval134Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(180, 170, 28, 22)];
        [color3 setFill];
        [oval134Path fill];

        ////// Oval 134 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval134Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval134Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval134Path.lineWidth = 1;
        [oval134Path stroke];


        //// Oval 135 Drawing
        UIBezierPath* oval135Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(198, 160, 34, 25)];
        [color3 setFill];
        [oval135Path fill];

        ////// Oval 135 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval135Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval135Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval135Path.lineWidth = 1;
        [oval135Path stroke];


        //// Oval 136 Drawing
        UIBezierPath* oval136Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(223, 160, 35, 25)];
        [color3 setFill];
        [oval136Path fill];

        ////// Oval 136 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval136Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval136Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval136Path.lineWidth = 1;
        [oval136Path stroke];


        //// Oval 137 Drawing
        UIBezierPath* oval137Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(267.5, 167.5, 36, 27)];
        [color3 setFill];
        [oval137Path fill];

        ////// Oval 137 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval137Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval137Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval137Path.lineWidth = 1;
        [oval137Path stroke];


        //// Oval 139 Drawing
        UIBezierPath* oval139Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(243.5, 175.5, 34, 28)];
        [color3 setFill];
        [oval139Path fill];

        ////// Oval 139 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval139Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval139Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval139Path.lineWidth = 1;
        [oval139Path stroke];


        //// Oval 140 Drawing
        UIBezierPath* oval140Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(199, 172, 31, 24)];
        [color3 setFill];
        [oval140Path fill];

        ////// Oval 140 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval140Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval140Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval140Path.lineWidth = 1;
        [oval140Path stroke];


        //// Oval 141 Drawing
        UIBezierPath* oval141Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(219, 175, 30, 24)];
        [color3 setFill];
        [oval141Path fill];

        ////// Oval 141 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval141Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval141Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval141Path.lineWidth = 1;
        [oval141Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 4
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 31 Drawing
        UIBezierPath* oval31Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(180.5, 139.5, 34, 29)];
        [color10 setFill];
        [oval31Path fill];

        ////// Oval 31 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval31Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval31Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval31Path.lineWidth = 1;
        [oval31Path stroke];


        //// Oval 32 Drawing
        UIBezierPath* oval32Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(245.5, 139.5, 39, 31)];
        [color10 setFill];
        [oval32Path fill];

        ////// Oval 32 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval32Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval32Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval32Path.lineWidth = 1;
        [oval32Path stroke];


        //// Oval 33 Drawing
        UIBezierPath* oval33Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(272.5, 151.5, 33, 25)];
        [color10 setFill];
        [oval33Path fill];

        ////// Oval 33 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval33Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval33Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval33Path.lineWidth = 1;
        [oval33Path stroke];


        //// Oval 34 Drawing
        UIBezierPath* oval34Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(245.5, 139.5, 39, 31)];
        [color10 setFill];
        [oval34Path fill];

        ////// Oval 34 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval34Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval34Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval34Path.lineWidth = 1;
        [oval34Path stroke];


        //// Oval 35 Drawing
        UIBezierPath* oval35Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(214.5, 139.5, 41, 31)];
        [color10 setFill];
        [oval35Path fill];

        ////// Oval 35 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval35Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval35Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval35Path.lineWidth = 1;
        [oval35Path stroke];


        //// Oval 36 Drawing
        UIBezierPath* oval36Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(162, 149, 42, 32)];
        [color10 setFill];
        [oval36Path fill];

        ////// Oval 36 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval36Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval36Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval36Path.lineWidth = 1;
        [oval36Path stroke];


        //// Oval 37 Drawing
        UIBezierPath* oval37Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(183.5, 151.5, 42, 31)];
        [color10 setFill];
        [oval37Path fill];

        ////// Oval 37 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval37Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval37Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval37Path.lineWidth = 1;
        [oval37Path stroke];


        //// Oval 38 Drawing
        UIBezierPath* oval38Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(202, 152, 32, 25)];
        [color10 setFill];
        [oval38Path fill];

        ////// Oval 38 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval38Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval38Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval38Path.lineWidth = 1;
        [oval38Path stroke];


        //// Oval 39 Drawing
        UIBezierPath* oval39Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(250.5, 156.5, 29, 24)];
        [color10 setFill];
        [oval39Path fill];

        ////// Oval 39 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval39Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval39Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval39Path.lineWidth = 1;
        [oval39Path stroke];


        //// Oval 40 Drawing
        UIBezierPath* oval40Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(225.5, 157.5, 35, 29)];
        [color10 setFill];
        [oval40Path fill];

        ////// Oval 40 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval40Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval40Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval40Path.lineWidth = 1;
        [oval40Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 3
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 86 Drawing
        UIBezierPath* oval86Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(291, 95.5, 31, 17)];
        [color3 setFill];
        [oval86Path fill];

        ////// Oval 86 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval86Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval86Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval86Path.lineWidth = 1;
        [oval86Path stroke];


        //// Oval 87 Drawing
        UIBezierPath* oval87Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(233.5, 95.5, 36, 20)];
        [color3 setFill];
        [oval87Path fill];

        ////// Oval 87 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval87Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval87Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval87Path.lineWidth = 1;
        [oval87Path stroke];


        //// Oval 88 Drawing
        UIBezierPath* oval88Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(253, 89, 36, 21)];
        [color3 setFill];
        [oval88Path fill];

        ////// Oval 88 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval88Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval88Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval88Path.lineWidth = 1;
        [oval88Path stroke];


        //// Oval 89 Drawing
        UIBezierPath* oval89Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(269.5, 93.5, 30, 17)];
        [color3 setFill];
        [oval89Path fill];

        ////// Oval 89 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval89Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval89Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval89Path.lineWidth = 1;
        [oval89Path stroke];


        //// Oval 91 Drawing
        UIBezierPath* oval91Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(291, 87, 33, 19)];
        [color3 setFill];
        [oval91Path fill];

        ////// Oval 91 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval91Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval91Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval91Path.lineWidth = 1;
        [oval91Path stroke];


        //// Oval 92 Drawing
        UIBezierPath* oval92Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(310, 108, 28, 19)];
        [color3 setFill];
        [oval92Path fill];

        ////// Oval 92 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval92Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval92Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval92Path.lineWidth = 1;
        [oval92Path stroke];


        //// Oval 93 Drawing
        UIBezierPath* oval93Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(256.5, 100.5, 33, 22)];
        [color3 setFill];
        [oval93Path fill];

        ////// Oval 93 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval93Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval93Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval93Path.lineWidth = 1;
        [oval93Path stroke];


        //// Oval 94 Drawing
        UIBezierPath* oval94Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(274, 100.5, 34, 23)];
        [color3 setFill];
        [oval94Path fill];

        ////// Oval 94 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval94Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval94Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval94Path.lineWidth = 1;
        [oval94Path stroke];


        //// Oval 95 Drawing
        UIBezierPath* oval95Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(289.5, 106, 28, 19)];
        [color3 setFill];
        [oval95Path fill];

        ////// Oval 95 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval95Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval95Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval95Path.lineWidth = 1;
        [oval95Path stroke];


        //// Oval 99 Drawing
        UIBezierPath* oval99Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(330.5, 100, 37, 24)];
        [color3 setFill];
        [oval99Path fill];

        ////// Oval 99 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval99Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval99Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval99Path.lineWidth = 1;
        [oval99Path stroke];


        //// Oval 97 Drawing
        UIBezierPath* oval97Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(310, 98.5, 31, 21)];
        [color3 setFill];
        [oval97Path fill];

        ////// Oval 97 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval97Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval97Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval97Path.lineWidth = 1;
        [oval97Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group 2
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 104 Drawing
        UIBezierPath* oval104Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(356, 90.5, 29.5, 22)];
        [color10 setFill];
        [oval104Path fill];

        ////// Oval 104 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval104Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval104Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval104Path.lineWidth = 1;
        [oval104Path stroke];


        //// Oval 105 Drawing
        UIBezierPath* oval105Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(302.5, 98.5, 32, 19)];
        [color10 setFill];
        [oval105Path fill];

        ////// Oval 105 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval105Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval105Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval105Path.lineWidth = 1;
        [oval105Path stroke];


        //// Oval 106 Drawing
        UIBezierPath* oval106Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(318.5, 90.5, 38, 24)];
        [color10 setFill];
        [oval106Path fill];

        ////// Oval 106 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval106Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval106Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval106Path.lineWidth = 1;
        [oval106Path stroke];


        //// Oval 107 Drawing
        UIBezierPath* oval107Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(334, 94, 36, 23)];
        [color10 setFill];
        [oval107Path fill];

        ////// Oval 107 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval107Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval107Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval107Path.lineWidth = 1;
        [oval107Path stroke];


        //// Oval 77 Drawing
        UIBezierPath* oval77Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(385, 94.5, 36, 24)];
        [color10 setFill];
        [oval77Path fill];

        ////// Oval 77 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval77Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval77Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval77Path.lineWidth = 1;
        [oval77Path stroke];


        //// Oval 78 Drawing
        UIBezierPath* oval78Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(361.5, 96.5, 36, 24)];
        [color10 setFill];
        [oval78Path fill];

        ////// Oval 78 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval78Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval78Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval78Path.lineWidth = 1;
        [oval78Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }


    //// Group
    {
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, sunShineShadow.shadowOffset, sunShineShadow.shadowBlurRadius, [sunShineShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Oval 142 Drawing
        UIBezierPath* oval142Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(257.5, 78.5, 37, 28)];
        [color3 setFill];
        [oval142Path fill];

        ////// Oval 142 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval142Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval142Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval142Path.lineWidth = 1;
        [oval142Path stroke];


        //// Oval 143 Drawing
        UIBezierPath* oval143Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(289.5, 77.5, 31, 24)];
        [color3 setFill];
        [oval143Path fill];

        ////// Oval 143 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval143Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval143Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval143Path.lineWidth = 1;
        [oval143Path stroke];


        //// Oval 144 Drawing
        UIBezierPath* oval144Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(239.5, 62.5, 38, 28)];
        [color3 setFill];
        [oval144Path fill];

        ////// Oval 144 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval144Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval144Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval144Path.lineWidth = 1;
        [oval144Path stroke];


        //// Oval 145 Drawing
        UIBezierPath* oval145Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(188, 77, 35, 26)];
        [color3 setFill];
        [oval145Path fill];

        ////// Oval 145 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval145Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval145Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval145Path.lineWidth = 1;
        [oval145Path stroke];


        //// Oval 146 Drawing
        UIBezierPath* oval146Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(205.5, 84.5, 40, 29)];
        [color3 setFill];
        [oval146Path fill];

        ////// Oval 146 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval146Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval146Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval146Path.lineWidth = 1;
        [oval146Path stroke];


        //// Oval 147 Drawing
        UIBezierPath* oval147Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(269.5, 88.5, 27, 21)];
        [color3 setFill];
        [oval147Path fill];

        ////// Oval 147 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval147Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval147Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval147Path.lineWidth = 1;
        [oval147Path stroke];


        //// Oval 148 Drawing
        UIBezierPath* oval148Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(267.5, 71.5, 27, 19)];
        [color3 setFill];
        [oval148Path fill];

        ////// Oval 148 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval148Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval148Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval148Path.lineWidth = 1;
        [oval148Path stroke];


        //// Oval 149 Drawing
        UIBezierPath* oval149Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(212.5, 64.5, 33, 26)];
        [color3 setFill];
        [oval149Path fill];

        ////// Oval 149 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval149Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval149Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval149Path.lineWidth = 1;
        [oval149Path stroke];


        //// Oval 150 Drawing
        UIBezierPath* oval150Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(223.5, 74.5, 35, 25)];
        [color3 setFill];
        [oval150Path fill];

        ////// Oval 150 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval150Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval150Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval150Path.lineWidth = 1;
        [oval150Path stroke];


        //// Oval 151 Drawing
        UIBezierPath* oval151Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(225.5, 87.5, 31, 23)];
        [color3 setFill];
        [oval151Path fill];

        ////// Oval 151 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval151Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval151Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval151Path.lineWidth = 1;
        [oval151Path stroke];


        //// Oval 152 Drawing
        UIBezierPath* oval152Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(245.5, 83.5, 32, 26)];
        [color3 setFill];
        [oval152Path fill];

        ////// Oval 152 Inner Shadow
        CGContextSaveGState(context);
        UIRectClip(oval152Path.bounds);
        CGContextSetShadowWithColor(context, CGSizeZero, 0, NULL);

        CGContextSetAlpha(context, CGColorGetAlpha([shadow.shadowColor CGColor]));
        CGContextBeginTransparencyLayer(context, NULL);
        {
            UIColor* opaqueShadow = [shadow.shadowColor colorWithAlphaComponent: 1];
            CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, [opaqueShadow CGColor]);
            CGContextSetBlendMode(context, kCGBlendModeSourceOut);
            CGContextBeginTransparencyLayer(context, NULL);

            [opaqueShadow setFill];
            [oval152Path fill];

            CGContextEndTransparencyLayer(context);
        }
        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);

        [UIColor.darkGrayColor setStroke];
        oval152Path.lineWidth = 1;
        [oval152Path stroke];


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

#pragma mark Generated Images

+ (UIImage*)imageOfCanvas1
{
    if (_imageOfCanvas1)
        return _imageOfCanvas1;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(430, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas1];

    _imageOfCanvas1 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas1;
}

+ (UIImage*)imageOfCanvas4
{
    if (_imageOfCanvas4)
        return _imageOfCanvas4;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas4];

    _imageOfCanvas4 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas4;
}

+ (UIImage*)imageOfCanvas6
{
    if (_imageOfCanvas6)
        return _imageOfCanvas6;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(430, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas6];

    _imageOfCanvas6 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas6;
}

+ (UIImage*)imageOfCanvas7
{
    if (_imageOfCanvas7)
        return _imageOfCanvas7;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas7];

    _imageOfCanvas7 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas7;
}

+ (UIImage*)imageOfCanvas8
{
    if (_imageOfCanvas8)
        return _imageOfCanvas8;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(430, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas8];

    _imageOfCanvas8 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas8;
}

+ (UIImage*)imageOfCanvas9
{
    if (_imageOfCanvas9)
        return _imageOfCanvas9;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(430, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas9];

    _imageOfCanvas9 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas9;
}

+ (UIImage*)imageOfCanvas10
{
    if (_imageOfCanvas10)
        return _imageOfCanvas10;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(430, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas10];

    _imageOfCanvas10 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas10;
}

+ (UIImage*)imageOfCanvas11
{
    if (_imageOfCanvas11)
        return _imageOfCanvas11;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas11];

    _imageOfCanvas11 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas11;
}

+ (UIImage*)imageOfCanvas13
{
    if (_imageOfCanvas13)
        return _imageOfCanvas13;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(430, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas13];

    _imageOfCanvas13 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas13;
}

+ (UIImage*)imageOfCanvas18
{
    if (_imageOfCanvas18)
        return _imageOfCanvas18;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas18];

    _imageOfCanvas18 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas18;
}

+ (UIImage*)imageOfCanvas20
{
    if (_imageOfCanvas20)
        return _imageOfCanvas20;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas20];

    _imageOfCanvas20 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas20;
}

+ (UIImage*)imageOfCanvas21
{
    if (_imageOfCanvas21)
        return _imageOfCanvas21;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas21];

    _imageOfCanvas21 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas21;
}

+ (UIImage*)imageOfCanvas22
{
    if (_imageOfCanvas22)
        return _imageOfCanvas22;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas22];

    _imageOfCanvas22 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas22;
}

+ (UIImage*)imageOfCanvas23
{
    if (_imageOfCanvas23)
        return _imageOfCanvas23;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas23];

    _imageOfCanvas23 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas23;
}

+ (UIImage*)imageOfCanvas24
{
    if (_imageOfCanvas24)
        return _imageOfCanvas24;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas24];

    _imageOfCanvas24 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas24;
}

+ (UIImage*)imageOfCanvas25
{
    if (_imageOfCanvas25)
        return _imageOfCanvas25;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas25];

    _imageOfCanvas25 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas25;
}

+ (UIImage*)imageOfCanvas26
{
    if (_imageOfCanvas26)
        return _imageOfCanvas26;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas26];

    _imageOfCanvas26 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas26;
}

+ (UIImage*)imageOfCanvas27
{
    if (_imageOfCanvas27)
        return _imageOfCanvas27;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas27];

    _imageOfCanvas27 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas27;
}

+ (UIImage*)imageOfCanvas28
{
    if (_imageOfCanvas28)
        return _imageOfCanvas28;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas28];

    _imageOfCanvas28 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas28;
}

+ (UIImage*)imageOfCanvas29
{
    if (_imageOfCanvas29)
        return _imageOfCanvas29;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas29];

    _imageOfCanvas29 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas29;
}

+ (UIImage*)imageOfCanvas30
{
    if (_imageOfCanvas30)
        return _imageOfCanvas30;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas30];

    _imageOfCanvas30 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas30;
}

+ (UIImage*)imageOfCanvas31
{
    if (_imageOfCanvas31)
        return _imageOfCanvas31;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 414), NO, 0.0f);
    [WeatherStyleKit drawCanvas31];

    _imageOfCanvas31 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas31;
}

+ (UIImage*)imageOfCanvas32
{
    if (_imageOfCanvas32)
        return _imageOfCanvas32;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 414), NO, 0.0f);
    [WeatherStyleKit drawCanvas32];

    _imageOfCanvas32 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas32;
}

+ (UIImage*)imageOfCanvas33
{
    if (_imageOfCanvas33)
        return _imageOfCanvas33;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 414), NO, 0.0f);
    [WeatherStyleKit drawCanvas33];

    _imageOfCanvas33 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas33;
}

+ (UIImage*)imageOfCanvas34
{
    if (_imageOfCanvas34)
        return _imageOfCanvas34;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 467), NO, 0.0f);
    [WeatherStyleKit drawCanvas34];

    _imageOfCanvas34 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas34;
}

+ (UIImage*)imageOfCanvas35
{
    if (_imageOfCanvas35)
        return _imageOfCanvas35;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 414), NO, 0.0f);
    [WeatherStyleKit drawCanvas35];

    _imageOfCanvas35 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas35;
}

+ (UIImage*)imageOfCanvas36
{
    if (_imageOfCanvas36)
        return _imageOfCanvas36;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(430, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas36];

    _imageOfCanvas36 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas36;
}

+ (UIImage*)imageOfCanvas37
{
    if (_imageOfCanvas37)
        return _imageOfCanvas37;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas37];

    _imageOfCanvas37 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas37;
}

+ (UIImage*)imageOfCanvas38
{
    if (_imageOfCanvas38)
        return _imageOfCanvas38;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas38];

    _imageOfCanvas38 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas38;
}

+ (UIImage*)imageOfCanvas39
{
    if (_imageOfCanvas39)
        return _imageOfCanvas39;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(470, 770), NO, 0.0f);
    [WeatherStyleKit drawCanvas39];

    _imageOfCanvas39 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas39;
}

+ (UIImage*)imageOfCanvas40
{
    if (_imageOfCanvas40)
        return _imageOfCanvas40;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(465, 770), NO, 0.0f);
    [WeatherStyleKit drawCanvas40];

    _imageOfCanvas40 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas40;
}

+ (UIImage*)imageOfCanvas42
{
    if (_imageOfCanvas42)
        return _imageOfCanvas42;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(465, 765), NO, 0.0f);
    [WeatherStyleKit drawCanvas42];

    _imageOfCanvas42 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas42;
}

+ (UIImage*)imageOfCanvas43
{
    if (_imageOfCanvas43)
        return _imageOfCanvas43;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(470, 765), NO, 0.0f);
    [WeatherStyleKit drawCanvas43];

    _imageOfCanvas43 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas43;
}

+ (UIImage*)imageOfCanvas77
{
    if (_imageOfCanvas77)
        return _imageOfCanvas77;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 414), NO, 0.0f);
    [WeatherStyleKit drawCanvas77];

    _imageOfCanvas77 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas77;
}

+ (UIImage*)imageOfCanvas79
{
    if (_imageOfCanvas79)
        return _imageOfCanvas79;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas79];

    _imageOfCanvas79 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas79;
}

+ (UIImage*)imageOfCanvas80
{
    if (_imageOfCanvas80)
        return _imageOfCanvas80;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas80];

    _imageOfCanvas80 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas80;
}

+ (UIImage*)imageOfCanvas81
{
    if (_imageOfCanvas81)
        return _imageOfCanvas81;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas81];

    _imageOfCanvas81 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas81;
}

+ (UIImage*)imageOfCanvas82
{
    if (_imageOfCanvas82)
        return _imageOfCanvas82;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas82];

    _imageOfCanvas82 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas82;
}

+ (UIImage*)imageOfCanvas83
{
    if (_imageOfCanvas83)
        return _imageOfCanvas83;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas83];

    _imageOfCanvas83 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas83;
}

+ (UIImage*)imageOfCanvas78
{
    if (_imageOfCanvas78)
        return _imageOfCanvas78;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas78];

    _imageOfCanvas78 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas78;
}

+ (UIImage*)imageOfCanvas2
{
    if (_imageOfCanvas2)
        return _imageOfCanvas2;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas2];

    _imageOfCanvas2 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas2;
}

+ (UIImage*)imageOfCanvas3
{
    if (_imageOfCanvas3)
        return _imageOfCanvas3;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas3];

    _imageOfCanvas3 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas3;
}

+ (UIImage*)imageOfCanvas41
{
    if (_imageOfCanvas41)
        return _imageOfCanvas41;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas41];

    _imageOfCanvas41 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas41;
}

+ (UIImage*)imageOfCanvas44
{
    if (_imageOfCanvas44)
        return _imageOfCanvas44;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(430, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas44];

    _imageOfCanvas44 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas44;
}

+ (UIImage*)imageOfCanvas45
{
    if (_imageOfCanvas45)
        return _imageOfCanvas45;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(430, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas45];

    _imageOfCanvas45 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas45;
}

+ (UIImage*)imageOfCanvas46
{
    if (_imageOfCanvas46)
        return _imageOfCanvas46;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(412, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas46];

    _imageOfCanvas46 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas46;
}

+ (UIImage*)imageOfCanvas47
{
    if (_imageOfCanvas47)
        return _imageOfCanvas47;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas47];

    _imageOfCanvas47 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas47;
}

+ (UIImage*)imageOfCanvas48
{
    if (_imageOfCanvas48)
        return _imageOfCanvas48;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas48];

    _imageOfCanvas48 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas48;
}

+ (UIImage*)imageOfCanvas49
{
    if (_imageOfCanvas49)
        return _imageOfCanvas49;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas49];

    _imageOfCanvas49 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas49;
}

+ (UIImage*)imageOfCanvas50
{
    if (_imageOfCanvas50)
        return _imageOfCanvas50;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas50];

    _imageOfCanvas50 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas50;
}

+ (UIImage*)imageOfCanvas51
{
    if (_imageOfCanvas51)
        return _imageOfCanvas51;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas51];

    _imageOfCanvas51 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas51;
}

+ (UIImage*)imageOfCanvas52
{
    if (_imageOfCanvas52)
        return _imageOfCanvas52;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(412, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas52];

    _imageOfCanvas52 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas52;
}

+ (UIImage*)imageOfCanvas53
{
    if (_imageOfCanvas53)
        return _imageOfCanvas53;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas53];

    _imageOfCanvas53 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas53;
}

+ (UIImage*)imageOfCanvas54
{
    if (_imageOfCanvas54)
        return _imageOfCanvas54;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(436, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas54];

    _imageOfCanvas54 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas54;
}

+ (UIImage*)imageOfCanvas55
{
    if (_imageOfCanvas55)
        return _imageOfCanvas55;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas55];

    _imageOfCanvas55 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas55;
}

+ (UIImage*)imageOfCanvas56
{
    if (_imageOfCanvas56)
        return _imageOfCanvas56;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas56];

    _imageOfCanvas56 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas56;
}

+ (UIImage*)imageOfCanvas57
{
    if (_imageOfCanvas57)
        return _imageOfCanvas57;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas57];

    _imageOfCanvas57 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas57;
}

+ (UIImage*)imageOfCanvas58
{
    if (_imageOfCanvas58)
        return _imageOfCanvas58;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(439, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas58];

    _imageOfCanvas58 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas58;
}

+ (UIImage*)imageOfCanvas59
{
    if (_imageOfCanvas59)
        return _imageOfCanvas59;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(439, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas59];

    _imageOfCanvas59 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas59;
}

+ (UIImage*)imageOfCanvas60
{
    if (_imageOfCanvas60)
        return _imageOfCanvas60;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas60];

    _imageOfCanvas60 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas60;
}

+ (UIImage*)imageOfCanvas61
{
    if (_imageOfCanvas61)
        return _imageOfCanvas61;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas61];

    _imageOfCanvas61 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas61;
}

+ (UIImage*)imageOfCanvas62
{
    if (_imageOfCanvas62)
        return _imageOfCanvas62;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas62];

    _imageOfCanvas62 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas62;
}

+ (UIImage*)imageOfCanvas63
{
    if (_imageOfCanvas63)
        return _imageOfCanvas63;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas63];

    _imageOfCanvas63 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas63;
}

+ (UIImage*)imageOfCanvas64
{
    if (_imageOfCanvas64)
        return _imageOfCanvas64;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas64];

    _imageOfCanvas64 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas64;
}

+ (UIImage*)imageOfCanvas65
{
    if (_imageOfCanvas65)
        return _imageOfCanvas65;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas65];

    _imageOfCanvas65 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas65;
}

+ (UIImage*)imageOfCanvas67
{
    if (_imageOfCanvas67)
        return _imageOfCanvas67;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas67];

    _imageOfCanvas67 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas67;
}

+ (UIImage*)imageOfCanvas68
{
    if (_imageOfCanvas68)
        return _imageOfCanvas68;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas68];

    _imageOfCanvas68 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas68;
}

+ (UIImage*)imageOfCanvas69
{
    if (_imageOfCanvas69)
        return _imageOfCanvas69;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(450, 755), NO, 0.0f);
    [WeatherStyleKit drawCanvas69];

    _imageOfCanvas69 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas69;
}

+ (UIImage*)imageOfCanvas70
{
    if (_imageOfCanvas70)
        return _imageOfCanvas70;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(450, 755), NO, 0.0f);
    [WeatherStyleKit drawCanvas70];

    _imageOfCanvas70 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas70;
}

+ (UIImage*)imageOfCanvas71
{
    if (_imageOfCanvas71)
        return _imageOfCanvas71;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(430, 755), NO, 0.0f);
    [WeatherStyleKit drawCanvas71];

    _imageOfCanvas71 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas71;
}

+ (UIImage*)imageOfCanvas72
{
    if (_imageOfCanvas72)
        return _imageOfCanvas72;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(430, 755), NO, 0.0f);
    [WeatherStyleKit drawCanvas72];

    _imageOfCanvas72 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas72;
}

+ (UIImage*)imageOfCanvas73
{
    if (_imageOfCanvas73)
        return _imageOfCanvas73;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas73];

    _imageOfCanvas73 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas73;
}

+ (UIImage*)imageOfCanvas74
{
    if (_imageOfCanvas74)
        return _imageOfCanvas74;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(414, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas74];

    _imageOfCanvas74 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas74;
}

+ (UIImage*)imageOfCanvas75
{
    if (_imageOfCanvas75)
        return _imageOfCanvas75;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(428, 736), NO, 0.0f);
    [WeatherStyleKit drawCanvas75];

    _imageOfCanvas75 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfCanvas75;
}

#pragma mark Customization Infrastructure

- (void)setCanvas1Targets: (NSArray*)canvas1Targets
{
    _canvas1Targets = canvas1Targets;

    for (id target in self.canvas1Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas1];
}

- (void)setCanvas4Targets: (NSArray*)canvas4Targets
{
    _canvas4Targets = canvas4Targets;

    for (id target in self.canvas4Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas4];
}

- (void)setCanvas6Targets: (NSArray*)canvas6Targets
{
    _canvas6Targets = canvas6Targets;

    for (id target in self.canvas6Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas6];
}

- (void)setCanvas7Targets: (NSArray*)canvas7Targets
{
    _canvas7Targets = canvas7Targets;

    for (id target in self.canvas7Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas7];
}

- (void)setCanvas8Targets: (NSArray*)canvas8Targets
{
    _canvas8Targets = canvas8Targets;

    for (id target in self.canvas8Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas8];
}

- (void)setCanvas9Targets: (NSArray*)canvas9Targets
{
    _canvas9Targets = canvas9Targets;

    for (id target in self.canvas9Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas9];
}

- (void)setCanvas10Targets: (NSArray*)canvas10Targets
{
    _canvas10Targets = canvas10Targets;

    for (id target in self.canvas10Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas10];
}

- (void)setCanvas11Targets: (NSArray*)canvas11Targets
{
    _canvas11Targets = canvas11Targets;

    for (id target in self.canvas11Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas11];
}

- (void)setCanvas13Targets: (NSArray*)canvas13Targets
{
    _canvas13Targets = canvas13Targets;

    for (id target in self.canvas13Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas13];
}

- (void)setCanvas18Targets: (NSArray*)canvas18Targets
{
    _canvas18Targets = canvas18Targets;

    for (id target in self.canvas18Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas18];
}

- (void)setCanvas20Targets: (NSArray*)canvas20Targets
{
    _canvas20Targets = canvas20Targets;

    for (id target in self.canvas20Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas20];
}

- (void)setCanvas21Targets: (NSArray*)canvas21Targets
{
    _canvas21Targets = canvas21Targets;

    for (id target in self.canvas21Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas21];
}

- (void)setCanvas22Targets: (NSArray*)canvas22Targets
{
    _canvas22Targets = canvas22Targets;

    for (id target in self.canvas22Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas22];
}

- (void)setCanvas23Targets: (NSArray*)canvas23Targets
{
    _canvas23Targets = canvas23Targets;

    for (id target in self.canvas23Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas23];
}

- (void)setCanvas24Targets: (NSArray*)canvas24Targets
{
    _canvas24Targets = canvas24Targets;

    for (id target in self.canvas24Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas24];
}

- (void)setCanvas25Targets: (NSArray*)canvas25Targets
{
    _canvas25Targets = canvas25Targets;

    for (id target in self.canvas25Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas25];
}

- (void)setCanvas26Targets: (NSArray*)canvas26Targets
{
    _canvas26Targets = canvas26Targets;

    for (id target in self.canvas26Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas26];
}

- (void)setCanvas27Targets: (NSArray*)canvas27Targets
{
    _canvas27Targets = canvas27Targets;

    for (id target in self.canvas27Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas27];
}

- (void)setCanvas28Targets: (NSArray*)canvas28Targets
{
    _canvas28Targets = canvas28Targets;

    for (id target in self.canvas28Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas28];
}

- (void)setCanvas29Targets: (NSArray*)canvas29Targets
{
    _canvas29Targets = canvas29Targets;

    for (id target in self.canvas29Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas29];
}

- (void)setCanvas30Targets: (NSArray*)canvas30Targets
{
    _canvas30Targets = canvas30Targets;

    for (id target in self.canvas30Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas30];
}

- (void)setCanvas31Targets: (NSArray*)canvas31Targets
{
    _canvas31Targets = canvas31Targets;

    for (id target in self.canvas31Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas31];
}

- (void)setCanvas32Targets: (NSArray*)canvas32Targets
{
    _canvas32Targets = canvas32Targets;

    for (id target in self.canvas32Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas32];
}

- (void)setCanvas33Targets: (NSArray*)canvas33Targets
{
    _canvas33Targets = canvas33Targets;

    for (id target in self.canvas33Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas33];
}

- (void)setCanvas34Targets: (NSArray*)canvas34Targets
{
    _canvas34Targets = canvas34Targets;

    for (id target in self.canvas34Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas34];
}

- (void)setCanvas35Targets: (NSArray*)canvas35Targets
{
    _canvas35Targets = canvas35Targets;

    for (id target in self.canvas35Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas35];
}

- (void)setCanvas36Targets: (NSArray*)canvas36Targets
{
    _canvas36Targets = canvas36Targets;

    for (id target in self.canvas36Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas36];
}

- (void)setCanvas37Targets: (NSArray*)canvas37Targets
{
    _canvas37Targets = canvas37Targets;

    for (id target in self.canvas37Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas37];
}

- (void)setCanvas38Targets: (NSArray*)canvas38Targets
{
    _canvas38Targets = canvas38Targets;

    for (id target in self.canvas38Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas38];
}

- (void)setCanvas39Targets: (NSArray*)canvas39Targets
{
    _canvas39Targets = canvas39Targets;

    for (id target in self.canvas39Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas39];
}

- (void)setCanvas40Targets: (NSArray*)canvas40Targets
{
    _canvas40Targets = canvas40Targets;

    for (id target in self.canvas40Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas40];
}

- (void)setCanvas42Targets: (NSArray*)canvas42Targets
{
    _canvas42Targets = canvas42Targets;

    for (id target in self.canvas42Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas42];
}

- (void)setCanvas43Targets: (NSArray*)canvas43Targets
{
    _canvas43Targets = canvas43Targets;

    for (id target in self.canvas43Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas43];
}

- (void)setCanvas77Targets: (NSArray*)canvas77Targets
{
    _canvas77Targets = canvas77Targets;

    for (id target in self.canvas77Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas77];
}

- (void)setCanvas79Targets: (NSArray*)canvas79Targets
{
    _canvas79Targets = canvas79Targets;

    for (id target in self.canvas79Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas79];
}

- (void)setCanvas80Targets: (NSArray*)canvas80Targets
{
    _canvas80Targets = canvas80Targets;

    for (id target in self.canvas80Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas80];
}

- (void)setCanvas81Targets: (NSArray*)canvas81Targets
{
    _canvas81Targets = canvas81Targets;

    for (id target in self.canvas81Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas81];
}

- (void)setCanvas82Targets: (NSArray*)canvas82Targets
{
    _canvas82Targets = canvas82Targets;

    for (id target in self.canvas82Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas82];
}

- (void)setCanvas83Targets: (NSArray*)canvas83Targets
{
    _canvas83Targets = canvas83Targets;

    for (id target in self.canvas83Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas83];
}

- (void)setCanvas78Targets: (NSArray*)canvas78Targets
{
    _canvas78Targets = canvas78Targets;

    for (id target in self.canvas78Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas78];
}

- (void)setCanvas2Targets: (NSArray*)canvas2Targets
{
    _canvas2Targets = canvas2Targets;

    for (id target in self.canvas2Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas2];
}

- (void)setCanvas3Targets: (NSArray*)canvas3Targets
{
    _canvas3Targets = canvas3Targets;

    for (id target in self.canvas3Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas3];
}

- (void)setCanvas41Targets: (NSArray*)canvas41Targets
{
    _canvas41Targets = canvas41Targets;

    for (id target in self.canvas41Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas41];
}

- (void)setCanvas44Targets: (NSArray*)canvas44Targets
{
    _canvas44Targets = canvas44Targets;

    for (id target in self.canvas44Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas44];
}

- (void)setCanvas45Targets: (NSArray*)canvas45Targets
{
    _canvas45Targets = canvas45Targets;

    for (id target in self.canvas45Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas45];
}

- (void)setCanvas46Targets: (NSArray*)canvas46Targets
{
    _canvas46Targets = canvas46Targets;

    for (id target in self.canvas46Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas46];
}

- (void)setCanvas47Targets: (NSArray*)canvas47Targets
{
    _canvas47Targets = canvas47Targets;

    for (id target in self.canvas47Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas47];
}

- (void)setCanvas48Targets: (NSArray*)canvas48Targets
{
    _canvas48Targets = canvas48Targets;

    for (id target in self.canvas48Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas48];
}

- (void)setCanvas49Targets: (NSArray*)canvas49Targets
{
    _canvas49Targets = canvas49Targets;

    for (id target in self.canvas49Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas49];
}

- (void)setCanvas50Targets: (NSArray*)canvas50Targets
{
    _canvas50Targets = canvas50Targets;

    for (id target in self.canvas50Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas50];
}

- (void)setCanvas51Targets: (NSArray*)canvas51Targets
{
    _canvas51Targets = canvas51Targets;

    for (id target in self.canvas51Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas51];
}

- (void)setCanvas52Targets: (NSArray*)canvas52Targets
{
    _canvas52Targets = canvas52Targets;

    for (id target in self.canvas52Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas52];
}

- (void)setCanvas53Targets: (NSArray*)canvas53Targets
{
    _canvas53Targets = canvas53Targets;

    for (id target in self.canvas53Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas53];
}

- (void)setCanvas54Targets: (NSArray*)canvas54Targets
{
    _canvas54Targets = canvas54Targets;

    for (id target in self.canvas54Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas54];
}

- (void)setCanvas55Targets: (NSArray*)canvas55Targets
{
    _canvas55Targets = canvas55Targets;

    for (id target in self.canvas55Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas55];
}

- (void)setCanvas56Targets: (NSArray*)canvas56Targets
{
    _canvas56Targets = canvas56Targets;

    for (id target in self.canvas56Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas56];
}

- (void)setCanvas57Targets: (NSArray*)canvas57Targets
{
    _canvas57Targets = canvas57Targets;

    for (id target in self.canvas57Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas57];
}

- (void)setCanvas58Targets: (NSArray*)canvas58Targets
{
    _canvas58Targets = canvas58Targets;

    for (id target in self.canvas58Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas58];
}

- (void)setCanvas59Targets: (NSArray*)canvas59Targets
{
    _canvas59Targets = canvas59Targets;

    for (id target in self.canvas59Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas59];
}

- (void)setCanvas60Targets: (NSArray*)canvas60Targets
{
    _canvas60Targets = canvas60Targets;

    for (id target in self.canvas60Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas60];
}

- (void)setCanvas61Targets: (NSArray*)canvas61Targets
{
    _canvas61Targets = canvas61Targets;

    for (id target in self.canvas61Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas61];
}

- (void)setCanvas62Targets: (NSArray*)canvas62Targets
{
    _canvas62Targets = canvas62Targets;

    for (id target in self.canvas62Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas62];
}

- (void)setCanvas63Targets: (NSArray*)canvas63Targets
{
    _canvas63Targets = canvas63Targets;

    for (id target in self.canvas63Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas63];
}

- (void)setCanvas64Targets: (NSArray*)canvas64Targets
{
    _canvas64Targets = canvas64Targets;

    for (id target in self.canvas64Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas64];
}

- (void)setCanvas65Targets: (NSArray*)canvas65Targets
{
    _canvas65Targets = canvas65Targets;

    for (id target in self.canvas65Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas65];
}

- (void)setCanvas67Targets: (NSArray*)canvas67Targets
{
    _canvas67Targets = canvas67Targets;

    for (id target in self.canvas67Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas67];
}

- (void)setCanvas68Targets: (NSArray*)canvas68Targets
{
    _canvas68Targets = canvas68Targets;

    for (id target in self.canvas68Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas68];
}

- (void)setCanvas69Targets: (NSArray*)canvas69Targets
{
    _canvas69Targets = canvas69Targets;

    for (id target in self.canvas69Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas69];
}

- (void)setCanvas70Targets: (NSArray*)canvas70Targets
{
    _canvas70Targets = canvas70Targets;

    for (id target in self.canvas70Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas70];
}

- (void)setCanvas71Targets: (NSArray*)canvas71Targets
{
    _canvas71Targets = canvas71Targets;

    for (id target in self.canvas71Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas71];
}

- (void)setCanvas72Targets: (NSArray*)canvas72Targets
{
    _canvas72Targets = canvas72Targets;

    for (id target in self.canvas72Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas72];
}

- (void)setCanvas73Targets: (NSArray*)canvas73Targets
{
    _canvas73Targets = canvas73Targets;

    for (id target in self.canvas73Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas73];
}

- (void)setCanvas74Targets: (NSArray*)canvas74Targets
{
    _canvas74Targets = canvas74Targets;

    for (id target in self.canvas74Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas74];
}

- (void)setCanvas75Targets: (NSArray*)canvas75Targets
{
    _canvas75Targets = canvas75Targets;

    for (id target in self.canvas75Targets)
        [target performSelector: @selector(setImage:) withObject: WeatherStyleKit.imageOfCanvas75];
}


@end



@implementation UIColor (PaintCodeAdditions)

- (UIColor*)blendedColorWithFraction: (CGFloat)fraction ofColor: (UIColor*)color2
{
    UIColor* color1 = self;

    CGFloat r1 = 0, g1 = 0, b1 = 0, a1 = 0;
    CGFloat r2 = 0, g2 = 0, b2 = 0, a2 = 0;


    [color1 getRed: &r1 green: &g1 blue: &b1 alpha: &a1];
    [color2 getRed: &r2 green: &g2 blue: &b2 alpha: &a2];

    CGFloat r = r1 * (1 - fraction) + r2 * fraction;
    CGFloat g = g1 * (1 - fraction) + g2 * fraction;
    CGFloat b = b1 * (1 - fraction) + b2 * fraction;
    CGFloat a = a1 * (1 - fraction) + a2 * fraction;

    return [UIColor colorWithRed: r green: g blue: b alpha: a];
}

@end
